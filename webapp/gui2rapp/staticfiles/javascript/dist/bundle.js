(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],2:[function(require,module,exports){
"use strict";
// DEFLATE is a complex format; to read this code, you should probably check the RFC first:
// https://tools.ietf.org/html/rfc1951
// You may also wish to take a look at the guide I made about this program:
// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad
exports.__esModule = true;
exports.unzipSync = exports.unzip = exports.zipSync = exports.zip = exports.strFromU8 = exports.strToU8 = exports.decompressSync = exports.decompress = exports.AsyncDecompress = exports.Decompress = exports.Compress = exports.compressSync = exports.AsyncCompress = exports.compress = exports.unzlibSync = exports.unzlib = exports.AsyncUnzlib = exports.Unzlib = exports.zlibSync = exports.zlib = exports.AsyncZlib = exports.Zlib = exports.gunzipSync = exports.gunzip = exports.AsyncGunzip = exports.Gunzip = exports.gzipSync = exports.gzip = exports.AsyncGzip = exports.Gzip = exports.inflateSync = exports.inflate = exports.AsyncInflate = exports.Inflate = exports.deflateSync = exports.deflate = exports.AsyncDeflate = exports.Deflate = void 0;
// Much of the following code is similar to that of UZIP.js:
// https://github.com/photopea/UZIP.js
// Many optimizations have been made, so the bundle size is ultimately smaller but performance is similar.
// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint
// is better for memory in most engines (I *think*).
var node_worker_1 = require("./node-worker");
// aliases for shorter compressed code (most minifers don't do this)
var u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;
// fixed length extra bits
var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);
// fixed distance extra bits
// see fleb note
var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);
// code length index map
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
// get base, reverse index map from extra bits
var freb = function (eb, start) {
    var b = new u16(31);
    for (var i = 0; i < 31; ++i) {
        b[i] = start += 1 << eb[i - 1];
    }
    // numbers here are at max 18 bits
    var r = new u32(b[30]);
    for (var i = 1; i < 30; ++i) {
        for (var j = b[i]; j < b[i + 1]; ++j) {
            r[j] = ((j - b[i]) << 5) | i;
        }
    }
    return [b, r];
};
var _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];
// we can ignore the fact that the other numbers are wrong; they never happen anyway
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];
// map of value to reverse (assuming 16 bits)
var rev = new u16(32768);
for (var i = 0; i < 32768; ++i) {
    // reverse table algorithm from SO
    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);
    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);
    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);
    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;
}
// create huffman tree from u8 "map": index -> code length for code index
// mb (max bits) must be at most 15
// TODO: optimize/split up?
var hMap = (function (cd, mb, r) {
    var s = cd.length;
    // index
    var i = 0;
    // u16 "map": index -> # of codes with bit length = index
    var l = new u16(mb);
    // length of cd must be 288 (total # of codes)
    for (; i < s; ++i)
        ++l[cd[i] - 1];
    // u16 "map": index -> minimum code for bit length = index
    var le = new u16(mb);
    for (i = 0; i < mb; ++i) {
        le[i] = (le[i - 1] + l[i - 1]) << 1;
    }
    var co;
    if (r) {
        // u16 "map": index -> number of actual bits, symbol for code
        co = new u16(1 << mb);
        // bits to remove for reverser
        var rvb = 15 - mb;
        for (i = 0; i < s; ++i) {
            // ignore 0 lengths
            if (cd[i]) {
                // num encoding both symbol and bits read
                var sv = (i << 4) | cd[i];
                // free bits
                var r_1 = mb - cd[i];
                // start value
                var v = le[cd[i] - 1]++ << r_1;
                // m is end value
                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {
                    // every 16 bit value starting with the code yields the same result
                    co[rev[v] >>> rvb] = sv;
                }
            }
        }
    }
    else {
        co = new u16(s);
        for (i = 0; i < s; ++i)
            co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);
    }
    return co;
});
// fixed length tree
var flt = new u8(288);
for (var i = 0; i < 144; ++i)
    flt[i] = 8;
for (var i = 144; i < 256; ++i)
    flt[i] = 9;
for (var i = 256; i < 280; ++i)
    flt[i] = 7;
for (var i = 280; i < 288; ++i)
    flt[i] = 8;
// fixed distance tree
var fdt = new u8(32);
for (var i = 0; i < 32; ++i)
    fdt[i] = 5;
// fixed length map
var flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);
// fixed distance map
var fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);
// find max of array
var max = function (a) {
    var m = a[0];
    for (var i = 1; i < a.length; ++i) {
        if (a[i] > m)
            m = a[i];
    }
    return m;
};
// read d, starting at bit p and mask with m
var bits = function (d, p, m) {
    var o = (p / 8) >> 0;
    return ((d[o] | (d[o + 1] << 8)) >>> (p & 7)) & m;
};
// read d, starting at bit p continuing for at least 16 bits
var bits16 = function (d, p) {
    var o = (p / 8) >> 0;
    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >>> (p & 7));
};
// get end of byte
var shft = function (p) { return ((p / 8) >> 0) + (p & 7 && 1); };
// typed array slice - allows garbage collector to free original reference,
// while being more compatible than .slice
var slc = function (v, s, e) {
    if (s == null || s < 0)
        s = 0;
    if (e == null || e > v.length)
        e = v.length;
    // can't use .constructor in case user-supplied
    var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
    n.set(v.subarray(s, e));
    return n;
};
// expands raw DEFLATE data
var inflt = function (dat, buf, st) {
    // source length
    var sl = dat.length;
    // have to estimate size
    var noBuf = !buf || st;
    // no state
    var noSt = !st || st.i;
    if (!st)
        st = {};
    // Assumes roughly 33% compression ratio average
    if (!buf)
        buf = new u8(sl * 3);
    // ensure buffer can fit at least l elements
    var cbuf = function (l) {
        var bl = buf.length;
        // need to increase size to fit
        if (l > bl) {
            // Double or set to necessary, whichever is greater
            var nbuf = new u8(Math.max(bl * 2, l));
            nbuf.set(buf);
            buf = nbuf;
        }
    };
    //  last chunk         bitpos           bytes
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    // total bits
    var tbts = sl * 8;
    do {
        if (!lm) {
            // BFINAL - this is only 1 when last chunk is next
            st.f = final = bits(dat, pos, 1);
            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
            var type = bits(dat, pos + 1, 3);
            pos += 3;
            if (!type) {
                // go to end of byte boundary
                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;
                if (t > sl) {
                    if (noSt)
                        throw 'unexpected EOF';
                    break;
                }
                // ensure size
                if (noBuf)
                    cbuf(bt + l);
                // Copy over uncompressed data
                buf.set(dat.subarray(s, t), bt);
                // Get new bitpos, update byte count
                st.b = bt += l, st.p = pos = t * 8;
                continue;
            }
            else if (type == 1)
                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
            else if (type == 2) {
                //  literal                            lengths
                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
                var tl = hLit + bits(dat, pos + 5, 31) + 1;
                pos += 14;
                // length+distance tree
                var ldt = new u8(tl);
                // code length tree
                var clt = new u8(19);
                for (var i = 0; i < hcLen; ++i) {
                    // use index map to get real code
                    clt[clim[i]] = bits(dat, pos + i * 3, 7);
                }
                pos += hcLen * 3;
                // code lengths bits
                var clb = max(clt), clbmsk = (1 << clb) - 1;
                if (!noSt && pos + tl * (clb + 7) > tbts)
                    break;
                // code lengths map
                var clm = hMap(clt, clb, 1);
                for (var i = 0; i < tl;) {
                    var r = clm[bits(dat, pos, clbmsk)];
                    // bits read
                    pos += r & 15;
                    // symbol
                    var s = r >>> 4;
                    // code length to copy
                    if (s < 16) {
                        ldt[i++] = s;
                    }
                    else {
                        //  copy   count
                        var c = 0, n = 0;
                        if (s == 16)
                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
                        else if (s == 17)
                            n = 3 + bits(dat, pos, 7), pos += 3;
                        else if (s == 18)
                            n = 11 + bits(dat, pos, 127), pos += 7;
                        while (n--)
                            ldt[i++] = c;
                    }
                }
                //    length tree                 distance tree
                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
                // max length bits
                lbt = max(lt);
                // max dist bits
                dbt = max(dt);
                lm = hMap(lt, lbt, 1);
                dm = hMap(dt, dbt, 1);
            }
            else
                throw 'invalid block type';
            if (pos > tbts)
                throw 'unexpected EOF';
        }
        // Make sure the buffer can hold this + the largest possible addition
        // Maximum chunk size (practically, theoretically infinite) is 2^17;
        if (noBuf)
            cbuf(bt + 131072);
        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        var mxa = lbt + dbt + 18;
        while (noSt || pos + mxa < tbts) {
            // bits read, code
            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
            pos += c & 15;
            if (pos > tbts)
                throw 'unexpected EOF';
            if (!c)
                throw 'invalid length/literal';
            if (sym < 256)
                buf[bt++] = sym;
            else if (sym == 256) {
                lm = null;
                break;
            }
            else {
                var add = sym - 254;
                // no extra bits needed if less
                if (sym > 264) {
                    // index
                    var i = sym - 257, b = fleb[i];
                    add = bits(dat, pos, (1 << b) - 1) + fl[i];
                    pos += b;
                }
                // dist
                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
                if (!d)
                    throw 'invalid distance';
                pos += d & 15;
                var dt = fd[dsym];
                if (dsym > 3) {
                    var b = fdeb[dsym];
                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;
                }
                if (pos > tbts)
                    throw 'unexpected EOF';
                if (noBuf)
                    cbuf(bt + 131072);
                var end = bt + add;
                for (; bt < end; bt += 4) {
                    buf[bt] = buf[bt - dt];
                    buf[bt + 1] = buf[bt + 1 - dt];
                    buf[bt + 2] = buf[bt + 2 - dt];
                    buf[bt + 3] = buf[bt + 3 - dt];
                }
                bt = end;
            }
        }
        st.l = lm, st.p = pos, st.b = bt;
        if (lm)
            final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt == buf.length ? buf : slc(buf, 0, bt);
};
// starting at p, write the minimum number of bits that can hold v to d
var wbits = function (d, p, v) {
    v <<= p & 7;
    var o = (p / 8) >> 0;
    d[o] |= v;
    d[o + 1] |= v >>> 8;
};
// starting at p, write the minimum number of bits (>8) that can hold v to d
var wbits16 = function (d, p, v) {
    v <<= p & 7;
    var o = (p / 8) >> 0;
    d[o] |= v;
    d[o + 1] |= v >>> 8;
    d[o + 2] |= v >>> 16;
};
// creates code lengths from a frequency table
var hTree = function (d, mb) {
    // Need extra info to make a tree
    var t = [];
    for (var i = 0; i < d.length; ++i) {
        if (d[i])
            t.push({ s: i, f: d[i] });
    }
    var s = t.length;
    var t2 = t.slice();
    if (!s)
        return [new u8(0), 0];
    if (s == 1) {
        var v = new u8(t[0].s + 1);
        v[t[0].s] = 1;
        return [v, 1];
    }
    t.sort(function (a, b) { return a.f - b.f; });
    // after i2 reaches last ind, will be stopped
    // freq must be greater than largest possible number of symbols
    t.push({ s: -1, f: 25001 });
    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;
    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };
    // efficient algorithm from UZIP.js
    // i0 is lookbehind, i2 is lookahead - after processing two low-freq
    // symbols that combined have high freq, will start processing i2 (high-freq,
    // non-composite) symbols instead
    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/
    while (i1 != s - 1) {
        l = t[t[i0].f < t[i2].f ? i0++ : i2++];
        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };
    }
    var maxSym = t2[0].s;
    for (var i = 1; i < s; ++i) {
        if (t2[i].s > maxSym)
            maxSym = t2[i].s;
    }
    // code lengths
    var tr = new u16(maxSym + 1);
    // max bits in tree
    var mbt = ln(t[i1 - 1], tr, 0);
    if (mbt > mb) {
        // more algorithms from UZIP.js
        // TODO: find out how this code works (debt)
        //  ind    debt
        var i = 0, dt = 0;
        //    left            cost
        var lft = mbt - mb, cst = 1 << lft;
        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });
        for (; i < s; ++i) {
            var i2_1 = t2[i].s;
            if (tr[i2_1] > mb) {
                dt += cst - (1 << (mbt - tr[i2_1]));
                tr[i2_1] = mb;
            }
            else
                break;
        }
        dt >>>= lft;
        while (dt > 0) {
            var i2_2 = t2[i].s;
            if (tr[i2_2] < mb)
                dt -= 1 << (mb - tr[i2_2]++ - 1);
            else
                ++i;
        }
        for (; i >= 0 && dt; --i) {
            var i2_3 = t2[i].s;
            if (tr[i2_3] == mb) {
                --tr[i2_3];
                ++dt;
            }
        }
        mbt = mb;
    }
    return [new u8(tr), mbt];
};
// get the max length and assign length codes
var ln = function (n, l, d) {
    return n.s == -1
        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))
        : (l[n.s] = d);
};
// length codes generation
var lc = function (c) {
    var s = c.length;
    // Note that the semicolon was intentional
    while (s && !c[--s])
        ;
    var cl = new u16(++s);
    //  ind      num         streak
    var cli = 0, cln = c[0], cls = 1;
    var w = function (v) { cl[cli++] = v; };
    for (var i = 1; i <= s; ++i) {
        if (c[i] == cln && i != s)
            ++cls;
        else {
            if (!cln && cls > 2) {
                for (; cls > 138; cls -= 138)
                    w(32754);
                if (cls > 2) {
                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);
                    cls = 0;
                }
            }
            else if (cls > 3) {
                w(cln), --cls;
                for (; cls > 6; cls -= 6)
                    w(8304);
                if (cls > 2)
                    w(((cls - 3) << 5) | 8208), cls = 0;
            }
            while (cls--)
                w(cln);
            cls = 1;
            cln = c[i];
        }
    }
    return [cl.subarray(0, cli), s];
};
// calculate the length of output from tree, code lengths
var clen = function (cf, cl) {
    var l = 0;
    for (var i = 0; i < cl.length; ++i)
        l += cf[i] * cl[i];
    return l;
};
// writes a fixed block
// returns the new bit pos
var wfblk = function (out, pos, dat) {
    // no need to write 00 as type: TypedArray defaults to 0
    var s = dat.length;
    var o = shft(pos + 2);
    out[o] = s & 255;
    out[o + 1] = s >>> 8;
    out[o + 2] = out[o] ^ 255;
    out[o + 3] = out[o + 1] ^ 255;
    for (var i = 0; i < s; ++i)
        out[o + i + 4] = dat[i];
    return (o + 4 + s) * 8;
};
// writes a block
var wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
    wbits(out, p++, final);
    ++lf[256];
    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];
    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];
    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];
    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];
    var lcfreq = new u16(19);
    for (var i = 0; i < lclt.length; ++i)
        lcfreq[lclt[i] & 31]++;
    for (var i = 0; i < lcdt.length; ++i)
        lcfreq[lcdt[i] & 31]++;
    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];
    var nlcc = 19;
    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)
        ;
    var flen = (bl + 5) << 3;
    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
    if (flen <= ftlen && flen <= dtlen)
        return wfblk(out, p, dat.subarray(bs, bs + bl));
    var lm, ll, dm, dl;
    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
    if (dtlen < ftlen) {
        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
        var llm = hMap(lct, mlcb, 0);
        wbits(out, p, nlc - 257);
        wbits(out, p + 5, ndc - 1);
        wbits(out, p + 10, nlcc - 4);
        p += 14;
        for (var i = 0; i < nlcc; ++i)
            wbits(out, p + 3 * i, lct[clim[i]]);
        p += 3 * nlcc;
        var lcts = [lclt, lcdt];
        for (var it = 0; it < 2; ++it) {
            var clct = lcts[it];
            for (var i = 0; i < clct.length; ++i) {
                var len = clct[i] & 31;
                wbits(out, p, llm[len]), p += lct[len];
                if (len > 15)
                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;
            }
        }
    }
    else {
        lm = flm, ll = flt, dm = fdm, dl = fdt;
    }
    for (var i = 0; i < li; ++i) {
        if (syms[i] > 255) {
            var len = (syms[i] >>> 18) & 31;
            wbits16(out, p, lm[len + 257]), p += ll[len + 257];
            if (len > 7)
                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];
            var dst = syms[i] & 31;
            wbits16(out, p, dm[dst]), p += dl[dst];
            if (dst > 3)
                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];
        }
        else {
            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];
        }
    }
    wbits16(out, p, lm[256]);
    return p + ll[256];
};
// deflate options (nice << 13) | chain
var deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
// empty
var et = /*#__PURE__*/ new u8(0);
// compresses data into a raw DEFLATE buffer
var dflt = function (dat, lvl, plvl, pre, post, lst) {
    var s = dat.length;
    var o = new u8(pre + s + 5 * (1 + Math.floor(s / 7000)) + post);
    // writing to this writes to the output buffer
    var w = o.subarray(pre, o.length - post);
    var pos = 0;
    if (!lvl || s < 8) {
        for (var i = 0; i <= s; i += 65535) {
            // end
            var e = i + 65535;
            if (e < s) {
                // write full block
                pos = wfblk(w, pos, dat.subarray(i, e));
            }
            else {
                // write final block
                w[i] = lst;
                pos = wfblk(w, pos, dat.subarray(i, s));
            }
        }
    }
    else {
        var opt = deo[lvl - 1];
        var n = opt >>> 13, c = opt & 8191;
        var msk_1 = (1 << plvl) - 1;
        //    prev 2-byte val map    curr 2-byte val map
        var prev = new u16(32768), head = new u16(msk_1 + 1);
        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };
        // 24576 is an arbitrary number of maximum symbols per block
        // 424 buffer for last block
        var syms = new u32(25000);
        // length/literal freq   distance freq
        var lf = new u16(288), df = new u16(32);
        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos
        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;
        for (; i < s; ++i) {
            // hash value
            var hv = hsh(i);
            // index mod 32768
            var imod = i & 32767;
            // previous index with this value
            var pimod = head[hv];
            prev[imod] = pimod;
            head[hv] = imod;
            // We always should modify head and prev, but only add symbols if
            // this data is not yet processed ("wait" for wait index)
            if (wi <= i) {
                // bytes remaining
                var rem = s - i;
                if ((lc_1 > 7000 || li > 24576) && rem > 423) {
                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
                    li = lc_1 = eb = 0, bs = i;
                    for (var j = 0; j < 286; ++j)
                        lf[j] = 0;
                    for (var j = 0; j < 30; ++j)
                        df[j] = 0;
                }
                //  len    dist   chain
                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;
                if (rem > 2 && hv == hsh(i - dif)) {
                    var maxn = Math.min(n, rem) - 1;
                    var maxd = Math.min(32767, i);
                    // max possible length
                    // not capped at dif because decompressors implement "rolling" index population
                    var ml = Math.min(258, rem);
                    while (dif <= maxd && --ch_1 && imod != pimod) {
                        if (dat[i + l] == dat[i + l - dif]) {
                            var nl = 0;
                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)
                                ;
                            if (nl > l) {
                                l = nl, d = dif;
                                // break out early when we reach "nice" (we are satisfied enough)
                                if (nl > maxn)
                                    break;
                                // now, find the rarest 2-byte sequence within this
                                // length of literals and search for that instead.
                                // Much faster than just using the start
                                var mmd = Math.min(dif, nl - 2);
                                var md = 0;
                                for (var j = 0; j < mmd; ++j) {
                                    var ti = (i - dif + j + 32768) & 32767;
                                    var pti = prev[ti];
                                    var cd = (ti - pti + 32768) & 32767;
                                    if (cd > md)
                                        md = cd, pimod = ti;
                                }
                            }
                        }
                        // check the previous match
                        imod = pimod, pimod = prev[imod];
                        dif += (imod - pimod + 32768) & 32767;
                    }
                }
                // d will be nonzero only when a match was found
                if (d) {
                    // store both dist and len data in one Uint32
                    // Make sure this is recognized as a len/dist with 28th bit (2^28)
                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];
                    var lin = revfl[l] & 31, din = revfd[d] & 31;
                    eb += fleb[lin] + fdeb[din];
                    ++lf[257 + lin];
                    ++df[din];
                    wi = i + l;
                    ++lc_1;
                }
                else {
                    syms[li++] = dat[i];
                    ++lf[dat[i]];
                }
            }
        }
        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
        // this is the easiest way to avoid needing to maintain state
        if (!lst)
            pos = wfblk(w, pos, et);
    }
    return slc(o, 0, pre + shft(pos) + post);
};
// CRC32 table
var crct = /*#__PURE__*/ (function () {
    var t = new u32(256);
    for (var i = 0; i < 256; ++i) {
        var c = i, k = 9;
        while (--k)
            c = ((c & 1) && 0xEDB88320) ^ (c >>> 1);
        t[i] = c;
    }
    return t;
})();
// CRC32
var crc = function () {
    var c = 0xFFFFFFFF;
    return {
        p: function (d) {
            // closures have awful performance
            var cr = c;
            for (var i = 0; i < d.length; ++i)
                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);
            c = cr;
        },
        d: function () { return c ^ 0xFFFFFFFF; }
    };
};
// Alder32
var adler = function () {
    var a = 1, b = 0;
    return {
        p: function (d) {
            // closures have awful performance
            var n = a, m = b;
            var l = d.length;
            for (var i = 0; i != l;) {
                var e = Math.min(i + 5552, l);
                for (; i < e; ++i)
                    n += d[i], m += n;
                n %= 65521, m %= 65521;
            }
            a = n, b = m;
        },
        d: function () { return ((a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8)) + ((a & 255) << 23) * 2; }
    };
};
;
// deflate with opts
var dopt = function (dat, opt, pre, post, st) {
    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);
};
// Walmart object spread
var mrg = function (a, b) {
    var o = {};
    for (var k in a)
        o[k] = a[k];
    for (var k in b)
        o[k] = b[k];
    return o;
};
// worker clone
// This is possibly the craziest part of the entire codebase, despite how simple it may seem.
// The only parameter to this function is a closure that returns an array of variables outside of the function scope.
// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.
// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).
// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.
// This took me three weeks to figure out how to do.
var wcln = function (fn, fnStr, td) {
    var dt = fn();
    var st = fn.toString();
    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/ /g, '').split(',');
    for (var i = 0; i < dt.length; ++i) {
        var v = dt[i], k = ks[i];
        if (typeof v == 'function') {
            fnStr += ';' + k + '=';
            var st_1 = v.toString();
            if (v.prototype) {
                // for global objects
                if (st_1.indexOf('[native code]') != -1) {
                    var spInd = st_1.indexOf(' ', 8) + 1;
                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));
                }
                else {
                    fnStr += st_1;
                    for (var t in v.prototype)
                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();
                }
            }
            else
                fnStr += st_1;
        }
        else
            td[k] = v;
    }
    return [fnStr, td];
};
var ch = [];
// clone bufs
var cbfs = function (v) {
    var tl = [];
    for (var k in v) {
        if (v[k] instanceof u8 || v[k] instanceof u16 || v[k] instanceof u32)
            tl.push((v[k] = new v[k].constructor(v[k])).buffer);
    }
    return tl;
};
// use a worker to execute code
var wrkr = function (fns, init, id, cb) {
    var _a;
    if (!ch[id]) {
        var fnStr = '', td_1 = {}, m = fns.length - 1;
        for (var i = 0; i < m; ++i)
            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];
        ch[id] = wcln(fns[m], fnStr, td_1);
    }
    var td = mrg({}, ch[id][1]);
    return node_worker_1["default"](ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);
};
// base async inflate fn
var bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, hMap, max, bits, bits16, shft, slc, inflt, inflateSync, pbf, gu8]; };
var bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };
// gzip extra
var gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };
// gunzip extra
var guze = function () { return [gzs, gzl]; };
// zlib extra
var zle = function () { return [zlh, wbytes, adler]; };
// unzlib extra
var zule = function () { return [zlv]; };
// post buf
var pbf = function (msg) { return postMessage(msg, [msg.buffer]); };
// get u8
var gu8 = function (o) { return o && o.size && new u8(o.size); };
// async helper
var cbify = function (dat, opts, fns, init, id, cb) {
    var w = wrkr(fns, init, id, function (err, dat) {
        w.terminate();
        cb(err, dat);
    });
    if (!opts.consume)
        dat = new u8(dat);
    w.postMessage([dat, opts], [dat.buffer]);
    return function () { w.terminate(); };
};
// auto stream
var astrm = function (strm) {
    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };
    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };
};
// async stream attach
var astrmify = function (fns, strm, opts, init, id) {
    var t;
    var w = wrkr(fns, init, id, function (err, dat) {
        if (err)
            w.terminate(), strm.ondata.call(strm, err);
        else {
            if (dat[1])
                w.terminate();
            strm.ondata.call(strm, err, dat[0], dat[1]);
        }
    });
    w.postMessage(opts);
    strm.push = function (d, f) {
        if (t)
            throw 'stream finished';
        if (!strm.ondata)
            throw 'no stream handler';
        w.postMessage([d, t = f], [d.buffer]);
    };
    strm.terminate = function () { w.terminate(); };
};
// read 2 bytes
var b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };
// read 4 bytes
var b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16)) + (d[b + 3] << 23) * 2; };
// write bytes
var wbytes = function (d, b, v) {
    for (; v; ++b)
        d[b] = v, v >>>= 8;
};
// gzip header
var gzh = function (c, o) {
    var fn = o.filename;
    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix
    if (o.mtime != 0)
        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));
    if (fn) {
        c[3] = 8;
        for (var i = 0; i <= fn.length; ++i)
            c[i + 10] = fn.charCodeAt(i);
    }
};
// gzip footer: -8 to -4 = CRC, -4 to -0 is length
// gzip start
var gzs = function (d) {
    if (d[0] != 31 || d[1] != 139 || d[2] != 8)
        throw 'invalid gzip data';
    var flg = d[3];
    var st = 10;
    if (flg & 4)
        st += d[10] | (d[11] << 8) + 2;
    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])
        ;
    return st + (flg & 2);
};
// gzip length
var gzl = function (d) {
    var l = d.length;
    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) + (2 * (d[l - 1] << 23));
};
// gzip header length
var gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };
// zlib header
var zlh = function (c, o) {
    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);
};
// zlib valid
var zlv = function (d) {
    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))
        throw 'invalid zlib data';
    if (d[1] & 32)
        throw 'invalid zlib data: preset dictionaries not supported';
};
function AsyncCmpStrm(opts, cb) {
    if (!cb && typeof opts == 'function')
        cb = opts, opts = {};
    this.ondata = cb;
    return opts;
}
// zlib footer: -4 to -0 is Adler32
/**
 * Streaming DEFLATE compression
 */
var Deflate = /*#__PURE__*/ (function () {
    function Deflate(opts, cb) {
        if (!cb && typeof opts == 'function')
            cb = opts, opts = {};
        this.ondata = cb;
        this.o = opts || {};
    }
    Deflate.prototype.p = function (c, f) {
        this.ondata(dopt(c, this.o, 0, 0, !f), f);
    };
    /**
     * Pushes a chunk to be deflated
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Deflate.prototype.push = function (chunk, final) {
        if (this.d)
            throw 'stream finished';
        if (!this.ondata)
            throw 'no stream handler';
        this.d = final;
        this.p(chunk, final || false);
    };
    return Deflate;
}());
exports.Deflate = Deflate;
/**
 * Asynchronous streaming DEFLATE compression
 */
var AsyncDeflate = /*#__PURE__*/ (function () {
    function AsyncDeflate(opts, cb) {
        astrmify([
            bDflt,
            function () { return [astrm, Deflate]; }
        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
            var strm = new Deflate(ev.data);
            onmessage = astrm(strm);
        }, 6);
    }
    return AsyncDeflate;
}());
exports.AsyncDeflate = AsyncDeflate;
function deflate(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bDflt,
    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);
}
exports.deflate = deflate;
/**
 * Compresses data with DEFLATE without any wrapper
 * @param data The data to compress
 * @param opts The compression options
 * @returns The deflated version of the data
 */
function deflateSync(data, opts) {
    if (opts === void 0) { opts = {}; }
    return dopt(data, opts, 0, 0);
}
exports.deflateSync = deflateSync;
/**
 * Streaming DEFLATE decompression
 */
var Inflate = /*#__PURE__*/ (function () {
    /**
     * Creates an inflation stream
     * @param cb The callback to call whenever data is inflated
     */
    function Inflate(cb) {
        this.s = {};
        this.p = new u8(0);
        this.ondata = cb;
    }
    Inflate.prototype.e = function (c) {
        if (this.d)
            throw 'stream finished';
        if (!this.ondata)
            throw 'no stream handler';
        var l = this.p.length;
        var n = new u8(l + c.length);
        n.set(this.p), n.set(c, l), this.p = n;
    };
    Inflate.prototype.c = function (final) {
        this.d = this.s.i = final || false;
        var bts = this.s.b;
        var dt = inflt(this.p, this.o, this.s);
        this.ondata(slc(dt, bts, this.s.b), this.d);
        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
        this.p = slc(this.p, (this.s.p / 8) >> 0), this.s.p &= 7;
    };
    /**
     * Pushes a chunk to be inflated
     * @param chunk The chunk to push
     * @param final Whether this is the final chunk
     */
    Inflate.prototype.push = function (chunk, final) {
        this.e(chunk), this.c(final);
    };
    return Inflate;
}());
exports.Inflate = Inflate;
/**
 * Asynchronous streaming DEFLATE decompression
 */
var AsyncInflate = /*#__PURE__*/ (function () {
    /**
     * Creates an asynchronous inflation stream
     * @param cb The callback to call whenever data is deflated
     */
    function AsyncInflate(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            function () { return [astrm, Inflate]; }
        ], this, 0, function () {
            var strm = new Inflate();
            onmessage = astrm(strm);
        }, 7);
    }
    return AsyncInflate;
}());
exports.AsyncInflate = AsyncInflate;
function inflate(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bInflt
    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);
}
exports.inflate = inflate;
/**
 * Expands DEFLATE data with no wrapper
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function inflateSync(data, out) {
    return inflt(data, out);
}
exports.inflateSync = inflateSync;
// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.
/**
 * Streaming GZIP compression
 */
var Gzip = /*#__PURE__*/ (function () {
    function Gzip(opts, cb) {
        this.c = crc();
        this.l = 0;
        this.v = 1;
        Deflate.call(this, opts, cb);
    }
    /**
     * Pushes a chunk to be GZIPped
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Gzip.prototype.push = function (chunk, final) {
        Deflate.prototype.push.call(this, chunk, final);
    };
    Gzip.prototype.p = function (c, f) {
        this.c.p(c);
        this.l += c.length;
        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);
        if (this.v)
            gzh(raw, this.o), this.v = 0;
        if (f)
            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
        this.ondata(raw, f);
    };
    return Gzip;
}());
exports.Gzip = Gzip;
exports.Compress = Gzip;
/**
 * Asynchronous streaming GZIP compression
 */
var AsyncGzip = /*#__PURE__*/ (function () {
    function AsyncGzip(opts, cb) {
        astrmify([
            bDflt,
            gze,
            function () { return [astrm, Deflate, Gzip]; }
        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
            var strm = new Gzip(ev.data);
            onmessage = astrm(strm);
        }, 8);
    }
    return AsyncGzip;
}());
exports.AsyncGzip = AsyncGzip;
exports.AsyncCompress = AsyncGzip;
function gzip(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bDflt,
        gze,
        function () { return [gzipSync]; }
    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);
}
exports.gzip = gzip;
exports.compress = gzip;
/**
 * Compresses data with GZIP
 * @param data The data to compress
 * @param opts The compression options
 * @returns The gzipped version of the data
 */
function gzipSync(data, opts) {
    if (opts === void 0) { opts = {}; }
    var c = crc(), l = data.length;
    c.p(data);
    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;
    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;
}
exports.gzipSync = gzipSync;
exports.compressSync = gzipSync;
/**
 * Streaming GZIP decompression
 */
var Gunzip = /*#__PURE__*/ (function () {
    /**
     * Creates a GUNZIP stream
     * @param cb The callback to call whenever data is inflated
     */
    function Gunzip(cb) {
        this.v = 1;
        Inflate.call(this, cb);
    }
    /**
     * Pushes a chunk to be GUNZIPped
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Gunzip.prototype.push = function (chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
            var s = gzs(this.p);
            if (s >= this.p.length && !final)
                return;
            this.p = this.p.subarray(s), this.v = 0;
        }
        if (final) {
            if (this.p.length < 8)
                throw 'invalid gzip stream';
            this.p = this.p.subarray(0, -8);
        }
        // necessary to prevent TS from using the closure value
        // This allows for workerization to function correctly
        Inflate.prototype.c.call(this, final);
    };
    return Gunzip;
}());
exports.Gunzip = Gunzip;
/**
 * Asynchronous streaming GZIP decompression
 */
var AsyncGunzip = /*#__PURE__*/ (function () {
    /**
     * Creates an asynchronous GUNZIP stream
     * @param cb The callback to call whenever data is deflated
     */
    function AsyncGunzip(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            guze,
            function () { return [astrm, Inflate, Gunzip]; }
        ], this, 0, function () {
            var strm = new Gunzip();
            onmessage = astrm(strm);
        }, 9);
    }
    return AsyncGunzip;
}());
exports.AsyncGunzip = AsyncGunzip;
function gunzip(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bInflt,
        guze,
        function () { return [gunzipSync]; }
    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);
}
exports.gunzip = gunzip;
/**
 * Expands GZIP data
 * @param data The data to decompress
 * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.
 * @returns The decompressed version of the data
 */
function gunzipSync(data, out) {
    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));
}
exports.gunzipSync = gunzipSync;
/**
 * Streaming Zlib compression
 */
var Zlib = /*#__PURE__*/ (function () {
    function Zlib(opts, cb) {
        this.c = adler();
        this.v = 1;
        Deflate.call(this, opts, cb);
    }
    /**
     * Pushes a chunk to be zlibbed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Zlib.prototype.push = function (chunk, final) {
        Deflate.prototype.push.call(this, chunk, final);
    };
    Zlib.prototype.p = function (c, f) {
        this.c.p(c);
        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);
        if (this.v)
            zlh(raw, this.o), this.v = 0;
        if (f)
            wbytes(raw, raw.length - 4, this.c.d());
        this.ondata(raw, f);
    };
    return Zlib;
}());
exports.Zlib = Zlib;
/**
 * Asynchronous streaming Zlib compression
 */
var AsyncZlib = /*#__PURE__*/ (function () {
    function AsyncZlib(opts, cb) {
        astrmify([
            bDflt,
            zle,
            function () { return [astrm, Deflate, Zlib]; }
        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
            var strm = new Zlib(ev.data);
            onmessage = astrm(strm);
        }, 10);
    }
    return AsyncZlib;
}());
exports.AsyncZlib = AsyncZlib;
function zlib(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bDflt,
        zle,
        function () { return [zlibSync]; }
    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);
}
exports.zlib = zlib;
/**
 * Compress data with Zlib
 * @param data The data to compress
 * @param opts The compression options
 * @returns The zlib-compressed version of the data
 */
function zlibSync(data, opts) {
    if (opts === void 0) { opts = {}; }
    var a = adler();
    a.p(data);
    var d = dopt(data, opts, 2, 4);
    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;
}
exports.zlibSync = zlibSync;
/**
 * Streaming Zlib decompression
 */
var Unzlib = /*#__PURE__*/ (function () {
    /**
     * Creates a Zlib decompression stream
     * @param cb The callback to call whenever data is inflated
     */
    function Unzlib(cb) {
        this.v = 1;
        Inflate.call(this, cb);
    }
    /**
     * Pushes a chunk to be unzlibbed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Unzlib.prototype.push = function (chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
            if (this.p.length < 2 && !final)
                return;
            this.p = this.p.subarray(2), this.v = 0;
        }
        if (final) {
            if (this.p.length < 4)
                throw 'invalid zlib stream';
            this.p = this.p.subarray(0, -4);
        }
        // necessary to prevent TS from using the closure value
        // This allows for workerization to function correctly
        Inflate.prototype.c.call(this, final);
    };
    return Unzlib;
}());
exports.Unzlib = Unzlib;
/**
 * Asynchronous streaming Zlib decompression
 */
var AsyncUnzlib = /*#__PURE__*/ (function () {
    /**
     * Creates an asynchronous Zlib decompression stream
     * @param cb The callback to call whenever data is deflated
     */
    function AsyncUnzlib(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            zule,
            function () { return [astrm, Inflate, Unzlib]; }
        ], this, 0, function () {
            var strm = new Unzlib();
            onmessage = astrm(strm);
        }, 11);
    }
    return AsyncUnzlib;
}());
exports.AsyncUnzlib = AsyncUnzlib;
function unzlib(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bInflt,
        zule,
        function () { return [unzlibSync]; }
    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);
}
exports.unzlib = unzlib;
/**
 * Expands Zlib data
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function unzlibSync(data, out) {
    return inflt((zlv(data), data.subarray(2, -4)), out);
}
exports.unzlibSync = unzlibSync;
/**
 * Streaming GZIP, Zlib, or raw DEFLATE decompression
 */
var Decompress = /*#__PURE__*/ (function () {
    /**
     * Creates a decompression stream
     * @param cb The callback to call whenever data is decompressed
     */
    function Decompress(cb) {
        this.G = Gunzip;
        this.I = Inflate;
        this.Z = Unzlib;
        this.ondata = cb;
    }
    /**
     * Pushes a chunk to be decompressed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Decompress.prototype.push = function (chunk, final) {
        if (!this.ondata)
            throw 'no stream handler';
        if (!this.s) {
            if (this.p && this.p.length) {
                var n = new u8(this.p.length + chunk.length);
                n.set(this.p), n.set(chunk, this.p.length);
            }
            else
                this.p = chunk;
            if (this.p.length > 2) {
                var _this_1 = this;
                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };
                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)
                    ? new this.G(cb)
                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))
                        ? new this.I(cb)
                        : new this.Z(cb);
                this.s.push(this.p, final);
                this.p = null;
            }
        }
        else
            this.s.push(chunk, final);
    };
    return Decompress;
}());
exports.Decompress = Decompress;
/**
 * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression
 */
var AsyncDecompress = /*#__PURE__*/ (function () {
    /**
   * Creates an asynchronous decompression stream
   * @param cb The callback to call whenever data is decompressed
   */
    function AsyncDecompress(cb) {
        this.G = AsyncGunzip;
        this.I = AsyncInflate;
        this.Z = AsyncUnzlib;
        this.ondata = cb;
    }
    /**
     * Pushes a chunk to be decompressed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    AsyncDecompress.prototype.push = function (chunk, final) {
        Decompress.prototype.push.call(this, chunk, final);
    };
    return AsyncDecompress;
}());
exports.AsyncDecompress = AsyncDecompress;
function decompress(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return (data[0] == 31 && data[1] == 139 && data[2] == 8)
        ? gunzip(data, opts, cb)
        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))
            ? inflate(data, opts, cb)
            : unzlib(data, opts, cb);
}
exports.decompress = decompress;
/**
 * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function decompressSync(data, out) {
    return (data[0] == 31 && data[1] == 139 && data[2] == 8)
        ? gunzipSync(data, out)
        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))
            ? inflateSync(data, out)
            : unzlibSync(data, out);
}
exports.decompressSync = decompressSync;
// flatten a directory structure
var fltn = function (d, p, t, o) {
    for (var k in d) {
        var val = d[k], n = p + k;
        if (val instanceof u8)
            t[n] = [val, o];
        else if (Array.isArray(val))
            t[n] = [val[0], mrg(o, val[1])];
        else
            fltn(val, n + '/', t, o);
    }
};
/**
 * Converts a string into a Uint8Array for use with compression/decompression methods
 * @param str The string to encode
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless decoding a binary string.
 * @returns The string encoded in UTF-8/Latin-1 binary
 */
function strToU8(str, latin1) {
    var l = str.length;
    if (!latin1 && typeof TextEncoder != 'undefined')
        return new TextEncoder().encode(str);
    var ar = new u8(str.length + (str.length >>> 1));
    var ai = 0;
    var w = function (v) { ar[ai++] = v; };
    for (var i = 0; i < l; ++i) {
        if (ai + 5 > ar.length) {
            var n = new u8(ai + 8 + ((l - i) << 1));
            n.set(ar);
            ar = n;
        }
        var c = str.charCodeAt(i);
        if (c < 128 || latin1)
            w(c);
        else if (c < 2048)
            w(192 | (c >>> 6)), w(128 | (c & 63));
        else if (c > 55295 && c < 57344)
            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),
                w(240 | (c >>> 18)), w(128 | ((c >>> 12) & 63)), w(128 | ((c >>> 6) & 63)), w(128 | (c & 63));
        else
            w(224 | (c >>> 12)), w(128 | ((c >>> 6) & 63)), w(128 | (c & 63));
    }
    return slc(ar, 0, ai);
}
exports.strToU8 = strToU8;
/**
 * Converts a Uint8Array to a string
 * @param dat The data to decode to string
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless encoding to binary string.
 * @returns The original UTF-8/Latin-1 string
 */
function strFromU8(dat, latin1) {
    var r = '';
    if (!latin1 && typeof TextDecoder != 'undefined')
        return new TextDecoder().decode(dat);
    for (var i = 0; i < dat.length;) {
        var c = dat[i++];
        if (c < 128 || latin1)
            r += String.fromCharCode(c);
        else if (c < 224)
            r += String.fromCharCode((c & 31) << 6 | (dat[i++] & 63));
        else if (c < 240)
            r += String.fromCharCode((c & 15) << 12 | (dat[i++] & 63) << 6 | (dat[i++] & 63));
        else
            c = ((c & 15) << 18 | (dat[i++] & 63) << 12 | (dat[i++] & 63) << 6 | (dat[i++] & 63)) - 65536,
                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));
    }
    return r;
}
exports.strFromU8 = strFromU8;
;
// skip local zip header
var slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };
// read zip header
var zh = function (d, b, z) {
    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl;
    var _a = z ? z64e(d, es) : [b4(d, b + 20), b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];
    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];
};
// read zip64 extra field
var z64e = function (d, b) {
    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))
        ;
    return [b4(d, b + 12), b4(d, b + 4), b4(d, b + 20)];
};
// write zip header
var wzh = function (d, b, c, cmp, su, fn, u, o, ce, t) {
    var fl = fn.length, l = cmp.length;
    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;
    if (ce != null)
        d[b] = 20, b += 2;
    d[b] = 20, b += 2; // spec compliance? what's that?
    d[b++] = (t == 8 && (o.level == 1 ? 6 : o.level < 6 ? 4 : o.level == 9 ? 2 : 0)), d[b++] = u && 8;
    d[b] = t, b += 2;
    var dt = new Date(o.mtime || Date.now()), y = dt.getFullYear() - 1980;
    if (y < 0 || y > 119)
        throw 'date not in range 1980-2099';
    wbytes(d, b, ((y << 24) * 2) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1));
    b += 4;
    wbytes(d, b, c);
    wbytes(d, b + 4, l);
    wbytes(d, b + 8, su);
    wbytes(d, b + 12, fl), b += 16; // skip extra field, comment
    if (ce != null)
        wbytes(d, b += 10, ce), b += 4;
    d.set(fn, b);
    b += fl;
    if (ce == null)
        d.set(cmp, b);
};
// write zip footer (end of central directory)
var wzf = function (o, b, c, d, e) {
    wbytes(o, b, 0x6054B50); // skip disk
    wbytes(o, b + 8, c);
    wbytes(o, b + 10, c);
    wbytes(o, b + 12, d);
    wbytes(o, b + 16, e);
};
function zip(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    var r = {};
    fltn(data, '', r, opts);
    var k = Object.keys(r);
    var lft = k.length, o = 0, tot = 0;
    var slft = lft, files = new Array(lft);
    var term = [];
    var tAll = function () {
        for (var i = 0; i < term.length; ++i)
            term[i]();
    };
    var cbf = function () {
        var out = new u8(tot + 22), oe = o, cdl = tot - o;
        tot = 0;
        for (var i = 0; i < slft; ++i) {
            var f = files[i];
            try {
                wzh(out, tot, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
                wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, tot, f.t), o += 46 + f.n.length, tot += 30 + f.n.length + f.d.length;
            }
            catch (e) {
                return cb(e, null);
            }
        }
        wzf(out, o, files.length, cdl, oe);
        cb(null, out);
    };
    if (!lft)
        cbf();
    var _loop_1 = function (i) {
        var fn = k[i];
        var _a = r[fn], file = _a[0], p = _a[1];
        var c = crc(), m = file.length;
        c.p(file);
        var n = strToU8(fn), s = n.length;
        var t = p.level == 0 ? 0 : 8;
        var cbl = function (e, d) {
            if (e) {
                tAll();
                cb(e, null);
            }
            else {
                var l = d.length;
                files[i] = {
                    t: t,
                    d: d,
                    m: m,
                    c: c.d(),
                    u: fn.length != l,
                    n: n,
                    p: p
                };
                o += 30 + s + l;
                tot += 76 + 2 * s + l;
                if (!--lft)
                    cbf();
            }
        };
        if (n.length > 65535)
            cbl('filename too long', null);
        if (!t)
            cbl(null, file);
        else if (m < 160000) {
            try {
                cbl(null, deflateSync(file, p));
            }
            catch (e) {
                cbl(e, null);
            }
        }
        else
            term.push(deflate(file, p, cbl));
    };
    // Cannot use lft because it can decrease
    for (var i = 0; i < slft; ++i) {
        _loop_1(i);
    }
    return tAll;
}
exports.zip = zip;
/**
 * Synchronously creates a ZIP file. Prefer using `zip` for better performance
 * with more than one file.
 * @param data The directory structure for the ZIP archive
 * @param opts The main options, merged with per-file options
 * @returns The generated ZIP archive
 */
function zipSync(data, opts) {
    if (opts === void 0) { opts = {}; }
    var r = {};
    var files = [];
    fltn(data, '', r, opts);
    var o = 0;
    var tot = 0;
    for (var fn in r) {
        var _a = r[fn], file = _a[0], p = _a[1];
        var t = p.level == 0 ? 0 : 8;
        var n = strToU8(fn), s = n.length;
        if (n.length > 65535)
            throw 'filename too long';
        var d = t ? deflateSync(file, p) : file, l = d.length;
        var c = crc();
        c.p(file);
        files.push({
            t: t,
            d: d,
            m: file.length,
            c: c.d(),
            u: fn.length != s,
            n: n,
            o: o,
            p: p
        });
        o += 30 + s + l;
        tot += 76 + 2 * s + l;
    }
    var out = new u8(tot + 22), oe = o, cdl = tot - o;
    for (var i = 0; i < files.length; ++i) {
        var f = files[i];
        wzh(out, f.o, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
        wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, f.o, f.t), o += 46 + f.n.length;
    }
    wzf(out, o, files.length, cdl, oe);
    return out;
}
exports.zipSync = zipSync;
/**
 * Asynchronously decompresses a ZIP archive
 * @param data The raw compressed ZIP file
 * @param cb The callback to call with the decompressed files
 * @returns A function that can be used to immediately terminate the unzipping
 */
function unzip(data, cb) {
    if (typeof cb != 'function')
        throw 'no callback';
    var term = [];
    var tAll = function () {
        for (var i = 0; i < term.length; ++i)
            term[i]();
    };
    var files = {};
    var e = data.length - 22;
    for (; b4(data, e) != 0x6054B50; --e) {
        if (!e || data.length - e > 65558) {
            cb('invalid zip file', null);
            return;
        }
    }
    ;
    var lft = b2(data, e + 8);
    if (!lft)
        cb(null, {});
    var c = lft;
    var o = b4(data, e + 16);
    var z = o == 4294967295;
    if (z) {
        e = b4(data, e - 12);
        if (b4(data, e) != 0x6064B50)
            throw 'invalid zip file';
        c = lft = b4(data, e + 32);
        o = b4(data, e + 48);
    }
    var _loop_2 = function (i) {
        var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);
        o = no;
        var cbl = function (e, d) {
            if (e) {
                tAll();
                cb(e, null);
            }
            else {
                files[fn] = d;
                if (!--lft)
                    cb(null, files);
            }
        };
        if (!c_1)
            cbl(null, slc(data, b, b + sc));
        else if (c_1 == 8) {
            var infl = data.subarray(b, b + sc);
            if (sc < 320000) {
                try {
                    cbl(null, inflateSync(infl, new u8(su)));
                }
                catch (e) {
                    cbl(e, null);
                }
            }
            else
                term.push(inflate(infl, { size: su }, cbl));
        }
        else
            cbl('unknown compression type ' + c_1, null);
    };
    for (var i = 0; i < c; ++i) {
        _loop_2(i);
    }
    return tAll;
}
exports.unzip = unzip;
/**
 * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better
 * performance with more than one file.
 * @param data The raw compressed ZIP file
 * @returns The decompressed files
 */
function unzipSync(data) {
    var files = {};
    var e = data.length - 22;
    for (; b4(data, e) != 0x6054B50; --e) {
        if (!e || data.length - e > 65558)
            throw 'invalid zip file';
    }
    ;
    var c = b2(data, e + 8);
    if (!c)
        return {};
    var o = b4(data, e + 16);
    var z = o == 4294967295;
    if (z) {
        e = b4(data, e - 12);
        if (b4(data, e) != 0x6064B50)
            throw 'invalid zip file';
        c = b4(data, e + 32);
        o = b4(data, e + 48);
    }
    for (var i = 0; i < c; ++i) {
        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);
        o = no;
        if (!c_2)
            files[fn] = slc(data, b, b + sc);
        else if (c_2 == 8)
            files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));
        else
            throw 'unknown compression type ' + c_2;
    }
    return files;
}
exports.unzipSync = unzipSync;

},{"./node-worker":3}],3:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var ch2 = {};
exports["default"] = (function (c, id, msg, transfer, cb) {
    var u = ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([c], { type: 'text/javascript' })));
    var w = new Worker(u);
    w.onerror = function (e) { return cb(e.error, null); };
    w.onmessage = function (e) { return cb(null, e.data); };
    w.postMessage(msg, transfer);
    return w;
});

},{}],4:[function(require,module,exports){
(function (global){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JSONPath = JSONPath;
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };
  return _wrapNativeSuper(Class);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  return function () {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(n);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o) {
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var it,
    normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

/* eslint-disable prefer-named-capture-group */
// Disabled `prefer-named-capture-group` due to https://github.com/babel/babel/issues/8951#issuecomment-508045524
// Only Node.JS has a process variable that is of [[Class]] process
var supportsNodeVM = function supportsNodeVM() {
  try {
    return Object.prototype.toString.call(global.process) === '[object process]';
  } catch (e) {
    return false;
  }
};
var hasOwnProp = Object.prototype.hasOwnProperty;
/**
* @typedef {null|boolean|number|string|PlainObject|GenericArray} JSONObject
*/

/**
* @callback ConditionCallback
* @param {any} item
* @returns {boolean}
*/

/**
 * Copy items out of one array into another.
 * @param {GenericArray} source Array with items to copy
 * @param {GenericArray} target Array to which to copy
 * @param {ConditionCallback} conditionCb Callback passed the current item;
 *     will move item if evaluates to `true`
 * @returns {void}
 */

var moveToAnotherArray = function moveToAnotherArray(source, target, conditionCb) {
  var il = source.length;
  for (var i = 0; i < il; i++) {
    var item = source[i];
    if (conditionCb(item)) {
      target.push(source.splice(i--, 1)[0]);
    }
  }
};
JSONPath.nodeVMSupported = supportsNodeVM();
var vm = JSONPath.nodeVMSupported ? require('vm') : {
  /**
   * @param {string} expr Expression to evaluate
   * @param {PlainObject} context Object whose items will be added
   *   to evaluation
   * @returns {any} Result of evaluated code
   */
  runInNewContext: function runInNewContext(expr, context) {
    var keys = Object.keys(context);
    var funcs = [];
    moveToAnotherArray(keys, funcs, function (key) {
      return typeof context[key] === 'function';
    });
    var values = keys.map(function (vr, i) {
      return context[vr];
    });
    var funcString = funcs.reduce(function (s, func) {
      var fString = context[func].toString();
      if (!/function/.test(fString)) {
        fString = 'function ' + fString;
      }
      return 'var ' + func + '=' + fString + ';' + s;
    }, '');
    expr = funcString + expr; // Mitigate http://perfectionkills.com/global-eval-what-are-the-options/#new_function

    if (!expr.match(/(["'])use strict\1/) && !keys.includes('arguments')) {
      expr = 'var arguments = undefined;' + expr;
    } // Remove last semi so `return` will be inserted before
    //  the previous one instead, allowing for the return
    //  of a bare ending expression

    expr = expr.replace(/;[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/, ''); // Insert `return`

    var lastStatementEnd = expr.lastIndexOf(';');
    var code = lastStatementEnd > -1 ? expr.slice(0, lastStatementEnd + 1) + ' return ' + expr.slice(lastStatementEnd + 1) : ' return ' + expr; // eslint-disable-next-line no-new-func

    return _construct(Function, _toConsumableArray(keys).concat([code])).apply(void 0, _toConsumableArray(values));
  }
};
/**
 * Copies array and then pushes item into it.
 * @param {GenericArray} arr Array to copy and into which to push
 * @param {any} item Array item to add (to end)
 * @returns {GenericArray} Copy of the original array
 */

function push(arr, item) {
  arr = arr.slice();
  arr.push(item);
  return arr;
}
/**
 * Copies array and then unshifts item into it.
 * @param {any} item Array item to add (to beginning)
 * @param {GenericArray} arr Array to copy and into which to unshift
 * @returns {GenericArray} Copy of the original array
 */

function unshift(item, arr) {
  arr = arr.slice();
  arr.unshift(item);
  return arr;
}
/**
 * Caught when JSONPath is used without `new` but rethrown if with `new`
 * @extends Error
 */

var NewError = /*#__PURE__*/function (_Error) {
  _inherits(NewError, _Error);
  var _super = _createSuper(NewError);

  /**
   * @param {any} value The evaluated scalar value
   */
  function NewError(value) {
    var _this;
    _classCallCheck(this, NewError);
    _this = _super.call(this, 'JSONPath should not be called with "new" (it prevents return ' + 'of (unwrapped) scalar values)');
    _this.avoidNew = true;
    _this.value = value;
    _this.name = 'NewError';
    return _this;
  }
  return NewError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
* @typedef {PlainObject} ReturnObject
* @property {string} path
* @property {JSONObject} value
* @property {PlainObject|GenericArray} parent
* @property {string} parentProperty
*/

/**
* @callback JSONPathCallback
* @param {string|PlainObject} preferredOutput
* @param {"value"|"property"} type
* @param {ReturnObject} fullRetObj
* @returns {void}
*/

/**
* @callback OtherTypeCallback
* @param {JSONObject} val
* @param {string} path
* @param {PlainObject|GenericArray} parent
* @param {string} parentPropName
* @returns {boolean}
*/

/**
 * @typedef {PlainObject} JSONPathOptions
 * @property {JSON} json
 * @property {string|string[]} path
 * @property {"value"|"path"|"pointer"|"parent"|"parentProperty"|"all"}
 *   [resultType="value"]
 * @property {boolean} [flatten=false]
 * @property {boolean} [wrap=true]
 * @property {PlainObject} [sandbox={}]
 * @property {boolean} [preventEval=false]
 * @property {PlainObject|GenericArray|null} [parent=null]
 * @property {string|null} [parentProperty=null]
 * @property {JSONPathCallback} [callback]
 * @property {OtherTypeCallback} [otherTypeCallback] Defaults to
 *   function which throws on encountering `@other`
 * @property {boolean} [autostart=true]
 */

/**
 * @param {string|JSONPathOptions} opts If a string, will be treated as `expr`
 * @param {string} [expr] JSON path to evaluate
 * @param {JSON} [obj] JSON object to evaluate against
 * @param {JSONPathCallback} [callback] Passed 3 arguments: 1) desired payload
 *     per `resultType`, 2) `"value"|"property"`, 3) Full returned object with
 *     all payloads
 * @param {OtherTypeCallback} [otherTypeCallback] If `@other()` is at the end
 *   of one's query, this will be invoked with the value of the item, its
 *   path, its parent, and its parent's property name, and it should return
 *   a boolean indicating whether the supplied value belongs to the "other"
 *   type or not (or it may handle transformations and return `false`).
 * @returns {JSONPath}
 * @class
 */

function JSONPath(opts, expr, obj, callback, otherTypeCallback) {
  // eslint-disable-next-line no-restricted-syntax
  if (!(this instanceof JSONPath)) {
    try {
      return new JSONPath(opts, expr, obj, callback, otherTypeCallback);
    } catch (e) {
      if (!e.avoidNew) {
        throw e;
      }
      return e.value;
    }
  }
  if (typeof opts === 'string') {
    otherTypeCallback = callback;
    callback = obj;
    obj = expr;
    expr = opts;
    opts = null;
  }
  var optObj = opts && _typeof(opts) === 'object';
  opts = opts || {};
  this.json = opts.json || obj;
  this.path = opts.path || expr;
  this.resultType = opts.resultType || 'value';
  this.flatten = opts.flatten || false;
  this.wrap = hasOwnProp.call(opts, 'wrap') ? opts.wrap : true;
  this.sandbox = opts.sandbox || {};
  this.preventEval = opts.preventEval || false;
  this.parent = opts.parent || null;
  this.parentProperty = opts.parentProperty || null;
  this.callback = opts.callback || callback || null;
  this.otherTypeCallback = opts.otherTypeCallback || otherTypeCallback || function () {
    throw new TypeError('You must supply an otherTypeCallback callback option ' + 'with the @other() operator.');
  };
  if (opts.autostart !== false) {
    var args = {
      path: optObj ? opts.path : expr
    };
    if (!optObj) {
      args.json = obj;
    } else if ('json' in opts) {
      args.json = opts.json;
    }
    var ret = this.evaluate(args);
    if (!ret || _typeof(ret) !== 'object') {
      throw new NewError(ret);
    }
    return ret;
  }
} // PUBLIC METHODS

JSONPath.prototype.evaluate = function (expr, json, callback, otherTypeCallback) {
  var that = this;
  var currParent = this.parent,
    currParentProperty = this.parentProperty;
  var flatten = this.flatten,
    wrap = this.wrap;
  this.currResultType = this.resultType;
  this.currPreventEval = this.preventEval;
  this.currSandbox = this.sandbox;
  callback = callback || this.callback;
  this.currOtherTypeCallback = otherTypeCallback || this.otherTypeCallback;
  json = json || this.json;
  expr = expr || this.path;
  if (expr && _typeof(expr) === 'object' && !Array.isArray(expr)) {
    if (!expr.path && expr.path !== '') {
      throw new TypeError('You must supply a "path" property when providing an object ' + 'argument to JSONPath.evaluate().');
    }
    if (!hasOwnProp.call(expr, 'json')) {
      throw new TypeError('You must supply a "json" property when providing an object ' + 'argument to JSONPath.evaluate().');
    }
    var _expr = expr;
    json = _expr.json;
    flatten = hasOwnProp.call(expr, 'flatten') ? expr.flatten : flatten;
    this.currResultType = hasOwnProp.call(expr, 'resultType') ? expr.resultType : this.currResultType;
    this.currSandbox = hasOwnProp.call(expr, 'sandbox') ? expr.sandbox : this.currSandbox;
    wrap = hasOwnProp.call(expr, 'wrap') ? expr.wrap : wrap;
    this.currPreventEval = hasOwnProp.call(expr, 'preventEval') ? expr.preventEval : this.currPreventEval;
    callback = hasOwnProp.call(expr, 'callback') ? expr.callback : callback;
    this.currOtherTypeCallback = hasOwnProp.call(expr, 'otherTypeCallback') ? expr.otherTypeCallback : this.currOtherTypeCallback;
    currParent = hasOwnProp.call(expr, 'parent') ? expr.parent : currParent;
    currParentProperty = hasOwnProp.call(expr, 'parentProperty') ? expr.parentProperty : currParentProperty;
    expr = expr.path;
  }
  currParent = currParent || null;
  currParentProperty = currParentProperty || null;
  if (Array.isArray(expr)) {
    expr = JSONPath.toPathString(expr);
  }
  if (!expr && expr !== '' || !json) {
    return undefined;
  }
  this._obj = json;
  var exprList = JSONPath.toPathArray(expr);
  if (exprList[0] === '$' && exprList.length > 1) {
    exprList.shift();
  }
  this._hasParentSelector = null;
  var result = this._trace(exprList, json, ['$'], currParent, currParentProperty, callback).filter(function (ea) {
    return ea && !ea.isParentSelector;
  });
  if (!result.length) {
    return wrap ? [] : undefined;
  }
  if (!wrap && result.length === 1 && !result[0].hasArrExpr) {
    return this._getPreferredOutput(result[0]);
  }
  return result.reduce(function (rslt, ea) {
    var valOrPath = that._getPreferredOutput(ea);
    if (flatten && Array.isArray(valOrPath)) {
      rslt = rslt.concat(valOrPath);
    } else {
      rslt.push(valOrPath);
    }
    return rslt;
  }, []);
}; // PRIVATE METHODS

JSONPath.prototype._getPreferredOutput = function (ea) {
  var resultType = this.currResultType;
  switch (resultType) {
    default:
      throw new TypeError('Unknown result type');
    case 'all':
      {
        var path = Array.isArray(ea.path) ? ea.path : JSONPath.toPathArray(ea.path);
        ea.pointer = JSONPath.toPointer(path);
        ea.path = typeof ea.path === 'string' ? ea.path : JSONPath.toPathString(ea.path);
        return ea;
      }
    case 'value':
    case 'parent':
    case 'parentProperty':
      return ea[resultType];
    case 'path':
      return JSONPath.toPathString(ea[resultType]);
    case 'pointer':
      return JSONPath.toPointer(ea.path);
  }
};
JSONPath.prototype._handleCallback = function (fullRetObj, callback, type) {
  if (callback) {
    var preferredOutput = this._getPreferredOutput(fullRetObj);
    fullRetObj.path = typeof fullRetObj.path === 'string' ? fullRetObj.path : JSONPath.toPathString(fullRetObj.path); // eslint-disable-next-line callback-return

    callback(preferredOutput, type, fullRetObj);
  }
};
/**
 *
 * @param {string} expr
 * @param {JSONObject} val
 * @param {string} path
 * @param {PlainObject|GenericArray} parent
 * @param {string} parentPropName
 * @param {JSONPathCallback} callback
 * @param {boolean} hasArrExpr
 * @param {boolean} literalPriority
 * @returns {ReturnObject|ReturnObject[]}
 */

JSONPath.prototype._trace = function (expr, val, path, parent, parentPropName, callback, hasArrExpr, literalPriority) {
  // No expr to follow? return path and value as the result of
  //  this trace branch
  var retObj;
  var that = this;
  if (!expr.length) {
    retObj = {
      path: path,
      value: val,
      parent: parent,
      parentProperty: parentPropName,
      hasArrExpr: hasArrExpr
    };
    this._handleCallback(retObj, callback, 'value');
    return retObj;
  }
  var loc = expr[0],
    x = expr.slice(1); // We need to gather the return value of recursive trace calls in order to
  // do the parent sel computation.

  var ret = [];
  /**
   *
   * @param {ReturnObject|ReturnObject[]} elems
   * @returns {void}
   */

  function addRet(elems) {
    if (Array.isArray(elems)) {
      // This was causing excessive stack size in Node (with or
      //  without Babel) against our performance test:
      //  `ret.push(...elems);`
      elems.forEach(function (t) {
        ret.push(t);
      });
    } else {
      ret.push(elems);
    }
  }
  if ((typeof loc !== 'string' || literalPriority) && val && hasOwnProp.call(val, loc)) {
    // simple case--directly follow property
    addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr));
  } else if (loc === '*') {
    // all child properties
    this._walk(loc, x, val, path, parent, parentPropName, callback, function (m, l, _x, v, p, par, pr, cb) {
      addRet(that._trace(unshift(m, _x), v, p, par, pr, cb, true, true));
    });
  } else if (loc === '..') {
    // all descendent parent properties
    // Check remaining expression with val's immediate children
    addRet(this._trace(x, val, path, parent, parentPropName, callback, hasArrExpr));
    this._walk(loc, x, val, path, parent, parentPropName, callback, function (m, l, _x, v, p, par, pr, cb) {
      // We don't join m and x here because we only want parents,
      //   not scalar values
      if (_typeof(v[m]) === 'object') {
        // Keep going with recursive descent on val's
        //   object children
        addRet(that._trace(unshift(l, _x), v[m], push(p, m), v, m, cb, true));
      }
    }); // The parent sel computation is handled in the frame above using the
    // ancestor object of val
  } else if (loc === '^') {
    // This is not a final endpoint, so we do not invoke the callback here
    this._hasParentSelector = true;
    return {
      path: path.slice(0, -1),
      expr: x,
      isParentSelector: true
    };
  } else if (loc === '~') {
    // property name
    retObj = {
      path: push(path, loc),
      value: parentPropName,
      parent: parent,
      parentProperty: null
    };
    this._handleCallback(retObj, callback, 'property');
    return retObj;
  } else if (loc === '$') {
    // root only
    addRet(this._trace(x, val, path, null, null, callback, hasArrExpr));
  } else if (/^(\x2D?[0-9]*):(\x2D?[0-9]*):?([0-9]*)$/.test(loc)) {
    // [start:end:step]  Python slice syntax
    addRet(this._slice(loc, x, val, path, parent, parentPropName, callback));
  } else if (loc.indexOf('?(') === 0) {
    // [?(expr)] (filtering)
    if (this.currPreventEval) {
      throw new Error('Eval [?(expr)] prevented in JSONPath expression.');
    }
    this._walk(loc, x, val, path, parent, parentPropName, callback, function (m, l, _x, v, p, par, pr, cb) {
      if (that._eval(l.replace(/^\?\(((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?)\)$/, '$1'), v[m], m, p, par, pr)) {
        addRet(that._trace(unshift(m, _x), v, p, par, pr, cb, true));
      }
    });
  } else if (loc[0] === '(') {
    // [(expr)] (dynamic property/index)
    if (this.currPreventEval) {
      throw new Error('Eval [(expr)] prevented in JSONPath expression.');
    } // As this will resolve to a property name (but we don't know it
    //  yet), property and parent information is relative to the
    //  parent of the property to which this expression will resolve

    addRet(this._trace(unshift(this._eval(loc, val, path[path.length - 1], path.slice(0, -1), parent, parentPropName), x), val, path, parent, parentPropName, callback, hasArrExpr));
  } else if (loc[0] === '@') {
    // value type: @boolean(), etc.
    var addType = false;
    var valueType = loc.slice(1, -2);
    switch (valueType) {
      /* istanbul ignore next */
      default:
        throw new TypeError('Unknown value type ' + valueType);
      case 'scalar':
        if (!val || !['object', 'function'].includes(_typeof(val))) {
          addType = true;
        }
        break;
      case 'boolean':
      case 'string':
      case 'undefined':
      case 'function':
        // eslint-disable-next-line valid-typeof
        if (_typeof(val) === valueType) {
          addType = true;
        }
        break;
      case 'integer':
        if (Number.isFinite(val) && !(val % 1)) {
          addType = true;
        }
        break;
      case 'number':
        if (Number.isFinite(val)) {
          addType = true;
        }
        break;
      case 'nonFinite':
        if (typeof val === 'number' && !Number.isFinite(val)) {
          addType = true;
        }
        break;
      case 'object':
        // eslint-disable-next-line valid-typeof
        if (val && _typeof(val) === valueType) {
          addType = true;
        }
        break;
      case 'array':
        if (Array.isArray(val)) {
          addType = true;
        }
        break;
      case 'other':
        addType = this.currOtherTypeCallback(val, path, parent, parentPropName);
        break;
      case 'null':
        if (val === null) {
          addType = true;
        }
        break;
    }
    if (addType) {
      retObj = {
        path: path,
        value: val,
        parent: parent,
        parentProperty: parentPropName
      };
      this._handleCallback(retObj, callback, 'value');
      return retObj;
    } // `-escaped property
  } else if (loc[0] === '`' && val && hasOwnProp.call(val, loc.slice(1))) {
    var locProp = loc.slice(1);
    addRet(this._trace(x, val[locProp], push(path, locProp), val, locProp, callback, hasArrExpr, true));
  } else if (loc.includes(',')) {
    // [name1,name2,...]
    var parts = loc.split(',');
    var _iterator = _createForOfIteratorHelper(parts),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var part = _step.value;
        addRet(this._trace(unshift(part, x), val, path, parent, parentPropName, callback, true));
      } // simple case--directly follow property
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else if (!literalPriority && val && hasOwnProp.call(val, loc)) {
    addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr, true));
  } // We check the resulting values for parent selections. For parent
  // selections we discard the value object and continue the trace with the
  // current val object

  if (this._hasParentSelector) {
    for (var t = 0; t < ret.length; t++) {
      var rett = ret[t];
      if (rett && rett.isParentSelector) {
        var tmp = that._trace(rett.expr, val, rett.path, parent, parentPropName, callback, hasArrExpr);
        if (Array.isArray(tmp)) {
          ret[t] = tmp[0];
          var tl = tmp.length;
          for (var tt = 1; tt < tl; tt++) {
            t++;
            ret.splice(t, 0, tmp[tt]);
          }
        } else {
          ret[t] = tmp;
        }
      }
    }
  }
  return ret;
};
JSONPath.prototype._walk = function (loc, expr, val, path, parent, parentPropName, callback, f) {
  if (Array.isArray(val)) {
    var n = val.length;
    for (var i = 0; i < n; i++) {
      f(i, loc, expr, val, path, parent, parentPropName, callback);
    }
  } else if (val && _typeof(val) === 'object') {
    Object.keys(val).forEach(function (m) {
      f(m, loc, expr, val, path, parent, parentPropName, callback);
    });
  }
};
JSONPath.prototype._slice = function (loc, expr, val, path, parent, parentPropName, callback) {
  if (!Array.isArray(val)) {
    return undefined;
  }
  var len = val.length,
    parts = loc.split(':'),
    step = parts[2] && Number.parseInt(parts[2]) || 1;
  var start = parts[0] && Number.parseInt(parts[0]) || 0,
    end = parts[1] && Number.parseInt(parts[1]) || len;
  start = start < 0 ? Math.max(0, start + len) : Math.min(len, start);
  end = end < 0 ? Math.max(0, end + len) : Math.min(len, end);
  var ret = [];
  for (var i = start; i < end; i += step) {
    var tmp = this._trace(unshift(i, expr), val, path, parent, parentPropName, callback, true); // Should only be possible to be an array here since first part of
    //   ``unshift(i, expr)` passed in above would not be empty, nor `~`,
    //     nor begin with `@` (as could return objects)
    // This was causing excessive stack size in Node (with or
    //  without Babel) against our performance test: `ret.push(...tmp);`

    tmp.forEach(function (t) {
      ret.push(t);
    });
  }
  return ret;
};
JSONPath.prototype._eval = function (code, _v, _vname, path, parent, parentPropName) {
  if (!this._obj || !_v) {
    return false;
  }
  if (code.includes('@parentProperty')) {
    this.currSandbox._$_parentProperty = parentPropName;
    code = code.replace(/@parentProperty/g, '_$_parentProperty');
  }
  if (code.includes('@parent')) {
    this.currSandbox._$_parent = parent;
    code = code.replace(/@parent/g, '_$_parent');
  }
  if (code.includes('@property')) {
    this.currSandbox._$_property = _vname;
    code = code.replace(/@property/g, '_$_property');
  }
  if (code.includes('@path')) {
    this.currSandbox._$_path = JSONPath.toPathString(path.concat([_vname]));
    code = code.replace(/@path/g, '_$_path');
  }
  if (code.includes('@root')) {
    this.currSandbox._$_root = this.json;
    code = code.replace(/@root/g, '_$_root');
  }
  if (code.match(/@([\t-\r \)\.\[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF])/)) {
    this.currSandbox._$_v = _v;
    code = code.replace(/@([\t-\r \)\.\[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF])/g, '_$_v$1');
  }
  try {
    return vm.runInNewContext(code, this.currSandbox);
  } catch (e) {
    // eslint-disable-next-line no-console
    console.log(e);
    throw new Error('jsonPath: ' + e.message + ': ' + code);
  }
}; // PUBLIC CLASS PROPERTIES AND METHODS
// Could store the cache object itself

JSONPath.cache = {};
/**
 * @param {string[]} pathArr Array to convert
 * @returns {string} The path string
 */

JSONPath.toPathString = function (pathArr) {
  var x = pathArr,
    n = x.length;
  var p = '$';
  for (var i = 1; i < n; i++) {
    if (!/^(~|\^|@(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\(\))$/.test(x[i])) {
      p += /^[\*0-9]+$/.test(x[i]) ? '[' + x[i] + ']' : "['" + x[i] + "']";
    }
  }
  return p;
};
/**
 * @param {string} pointer JSON Path
 * @returns {string} JSON Pointer
 */

JSONPath.toPointer = function (pointer) {
  var x = pointer,
    n = x.length;
  var p = '';
  for (var i = 1; i < n; i++) {
    if (!/^(~|\^|@(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\(\))$/.test(x[i])) {
      p += '/' + x[i].toString().replace(/~/g, '~0').replace(/\//g, '~1');
    }
  }
  return p;
};
/**
 * @param {string} expr Expression to convert
 * @returns {string[]}
 */

JSONPath.toPathArray = function (expr) {
  var cache = JSONPath.cache;
  if (cache[expr]) {
    return cache[expr].concat();
  }
  var subx = [];
  var normalized = expr // Properties
  .replace(/@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\(\)/g, ';$&;') // Parenthetical evaluations (filtering and otherwise), directly
  //   within brackets or single quotes
  .replace(/['\[](\??\((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\))['\]]/g, function ($0, $1) {
    return '[#' + (subx.push($1) - 1) + ']';
  }) // Escape periods and tildes within properties
  .replace(/\['((?:[\0-&\(-\\\^-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)'\]/g, function ($0, prop) {
    return "['" + prop.replace(/\./g, '%@%').replace(/~/g, '%%@@%%') + "']";
  }) // Properties operator
  .replace(/~/g, ';~;') // Split by property boundaries
  .replace(/'?\.'?(?!(?:[\0-Z\\-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*\])|\['?/g, ';') // Reinsert periods within properties
  .replace(/%@%/g, '.') // Reinsert tildes within properties
  .replace(/%%@@%%/g, '~') // Parent
  .replace(/(?:;)?(\^+)(?:;)?/g, function ($0, ups) {
    return ';' + ups.split('').join(';') + ';';
  }) // Descendents
  .replace(/;;;|;;/g, ';..;') // Remove trailing
  .replace(/;$|'?\]|'$/g, '');
  var exprList = normalized.split(';').map(function (exp) {
    var match = exp.match(/#([0-9]+)/);
    return !match || !match[1] ? exp : subx[match[1]];
  });
  cache[expr] = exprList;
  return cache[expr];
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"vm":63}],5:[function(require,module,exports){
(function (global){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AcroFormTextField = exports.AcroFormRadioButton = exports.AcroFormPushButton = exports.AcroFormPasswordField = exports.AcroFormListBox = exports.AcroFormEditBox = exports.AcroFormComboBox = exports.AcroFormChoiceField = exports.AcroFormCheckBox = exports.AcroFormButton = exports.AcroFormAppearance = exports.AcroForm = void 0;
exports.GState = j;
exports.ShadingPattern = B;
exports.TilingPattern = M;
exports.default = void 0;
exports.jsPDF = E;
var _typeof = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _fflate = require("fflate");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** @license
 *
 * jsPDF - PDF Document creation from JavaScript
 * Version 2.5.1 Built on 2022-01-28T15:37:57.791Z
 *                      CommitID 00000000
 *
 * Copyright (c) 2010-2021 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF
 *               2015-2021 yWorks GmbH, http://www.yworks.com
 *               2015-2021 Lukas Holländer <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX
 *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>
 *               2010 Aaron Spike, https://github.com/acspike
 *               2012 Willow Systems Corporation, https://github.com/willowsystems
 *               2012 Pablo Hess, https://github.com/pablohess
 *               2012 Florian Jenett, https://github.com/fjenett
 *               2013 Warren Weckesser, https://github.com/warrenweckesser
 *               2013 Youssef Beddad, https://github.com/lifof
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2013 Stefan Slonevskiy, https://github.com/stefslon
 *               2013 Jeremy Morel, https://github.com/jmorel
 *               2013 Christoph Hartmann, https://github.com/chris-rock
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Makes, https://github.com/dollaruw
 *               2014 Diego Casorran, https://github.com/diegocr
 *               2014 Steven Spungin, https://github.com/Flamenco
 *               2014 Kenneth Glassey, https://github.com/Gavvers
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Contributor(s):
 *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,
 *    kim3er, mfo, alnorth, Flamenco
 */

var n = function () {
  return "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this;
}();
function i() {
  n.console && "function" == typeof n.console.log && n.console.log.apply(n.console, arguments);
}
var a = {
  log: i,
  warn: function (t) {
    n.console && ("function" == typeof n.console.warn ? n.console.warn.apply(n.console, arguments) : i.call(null, arguments));
  },
  error: function (t) {
    n.console && ("function" == typeof n.console.error ? n.console.error.apply(n.console, arguments) : i(t));
  }
};
function o(t, e, r) {
  var n = new XMLHttpRequest();
  n.open("GET", t), n.responseType = "blob", n.onload = function () {
    l(n.response, e, r);
  }, n.onerror = function () {
    a.error("could not download file");
  }, n.send();
}
function s(t) {
  var e = new XMLHttpRequest();
  e.open("HEAD", t, !1);
  try {
    e.send();
  } catch (t) {}
  return e.status >= 200 && e.status <= 299;
}
function c(t) {
  try {
    t.dispatchEvent(new MouseEvent("click"));
  } catch (r) {
    var e = document.createEvent("MouseEvents");
    e.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), t.dispatchEvent(e);
  }
}
var u,
  h,
  l = n.saveAs || ("object" !== ("undefined" == typeof window ? "undefined" : (0, _typeof.default)(window)) || window !== n ? function () {} : "undefined" != typeof HTMLAnchorElement && "download" in HTMLAnchorElement.prototype ? function (t, e, r) {
    var i = n.URL || n.webkitURL,
      a = document.createElement("a");
    e = e || t.name || "download", a.download = e, a.rel = "noopener", "string" == typeof t ? (a.href = t, a.origin !== location.origin ? s(a.href) ? o(t, e, r) : c(a, a.target = "_blank") : c(a)) : (a.href = i.createObjectURL(t), setTimeout(function () {
      i.revokeObjectURL(a.href);
    }, 4e4), setTimeout(function () {
      c(a);
    }, 0));
  } : "msSaveOrOpenBlob" in navigator ? function (e, r, n) {
    if (r = r || e.name || "download", "string" == typeof e) {
      if (s(e)) o(e, r, n);else {
        var i = document.createElement("a");
        i.href = e, i.target = "_blank", setTimeout(function () {
          c(i);
        });
      }
    } else navigator.msSaveOrOpenBlob(function (e, r) {
      return void 0 === r ? r = {
        autoBom: !1
      } : "object" !== (0, _typeof.default)(r) && (a.warn("Deprecated: Expected third argument to be a object"), r = {
        autoBom: !r
      }), r.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type) ? new Blob([String.fromCharCode(65279), e], {
        type: e.type
      }) : e;
    }(e, n), r);
  } : function (e, r, i, a) {
    if ((a = a || open("", "_blank")) && (a.document.title = a.document.body.innerText = "downloading..."), "string" == typeof e) return o(e, r, i);
    var s = "application/octet-stream" === e.type,
      c = /constructor/i.test(n.HTMLElement) || n.safari,
      u = /CriOS\/[\d]+/.test(navigator.userAgent);
    if ((u || s && c) && "object" === ("undefined" == typeof FileReader ? "undefined" : (0, _typeof.default)(FileReader))) {
      var h = new FileReader();
      h.onloadend = function () {
        var t = h.result;
        t = u ? t : t.replace(/^data:[^;]*;/, "data:attachment/file;"), a ? a.location.href = t : location = t, a = null;
      }, h.readAsDataURL(e);
    } else {
      var l = n.URL || n.webkitURL,
        f = l.createObjectURL(e);
      a ? a.location = f : location.href = f, a = null, setTimeout(function () {
        l.revokeObjectURL(f);
      }, 4e4);
    }
  });
/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}
 * @license Use it if you like it
 */
function f(t) {
  var e;
  t = t || "", this.ok = !1, "#" == t.charAt(0) && (t = t.substr(1, 6));
  t = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "00ffff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000000",
    blanchedalmond: "ffebcd",
    blue: "0000ff",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "00ffff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dodgerblue: "1e90ff",
    feldspar: "d19275",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "ff00ff",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgrey: "d3d3d3",
    lightgreen: "90ee90",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslateblue: "8470ff",
    lightslategray: "778899",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "00ff00",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "ff00ff",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370d8",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "d87093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    red: "ff0000",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    violetred: "d02090",
    wheat: "f5deb3",
    white: "ffffff",
    whitesmoke: "f5f5f5",
    yellow: "ffff00",
    yellowgreen: "9acd32"
  }[t = (t = t.replace(/ /g, "")).toLowerCase()] || t;
  for (var r = [{
      re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      example: ["rgb(123, 234, 45)", "rgb(255,234,245)"],
      process: function (t) {
        return [parseInt(t[1]), parseInt(t[2]), parseInt(t[3])];
      }
    }, {
      re: /^(\w{2})(\w{2})(\w{2})$/,
      example: ["#00ff00", "336699"],
      process: function (t) {
        return [parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16)];
      }
    }, {
      re: /^(\w{1})(\w{1})(\w{1})$/,
      example: ["#fb0", "f0f"],
      process: function (t) {
        return [parseInt(t[1] + t[1], 16), parseInt(t[2] + t[2], 16), parseInt(t[3] + t[3], 16)];
      }
    }], n = 0; n < r.length; n++) {
    var i = r[n].re,
      a = r[n].process,
      o = i.exec(t);
    o && (e = a(o), this.r = e[0], this.g = e[1], this.b = e[2], this.ok = !0);
  }
  this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r, this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g, this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b, this.toRGB = function () {
    return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
  }, this.toHex = function () {
    var t = this.r.toString(16),
      e = this.g.toString(16),
      r = this.b.toString(16);
    return 1 == t.length && (t = "0" + t), 1 == e.length && (e = "0" + e), 1 == r.length && (r = "0" + r), "#" + t + e + r;
  };
}
/**
 * @license
 * Joseph Myers does not specify a particular license for his work.
 *
 * Author: Joseph Myers
 * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js
 *
 * Modified by: Owen Leong
 */
function d(t, e) {
  var r = t[0],
    n = t[1],
    i = t[2],
    a = t[3];
  r = g(r, n, i, a, e[0], 7, -680876936), a = g(a, r, n, i, e[1], 12, -389564586), i = g(i, a, r, n, e[2], 17, 606105819), n = g(n, i, a, r, e[3], 22, -1044525330), r = g(r, n, i, a, e[4], 7, -176418897), a = g(a, r, n, i, e[5], 12, 1200080426), i = g(i, a, r, n, e[6], 17, -1473231341), n = g(n, i, a, r, e[7], 22, -45705983), r = g(r, n, i, a, e[8], 7, 1770035416), a = g(a, r, n, i, e[9], 12, -1958414417), i = g(i, a, r, n, e[10], 17, -42063), n = g(n, i, a, r, e[11], 22, -1990404162), r = g(r, n, i, a, e[12], 7, 1804603682), a = g(a, r, n, i, e[13], 12, -40341101), i = g(i, a, r, n, e[14], 17, -1502002290), r = m(r, n = g(n, i, a, r, e[15], 22, 1236535329), i, a, e[1], 5, -165796510), a = m(a, r, n, i, e[6], 9, -1069501632), i = m(i, a, r, n, e[11], 14, 643717713), n = m(n, i, a, r, e[0], 20, -373897302), r = m(r, n, i, a, e[5], 5, -701558691), a = m(a, r, n, i, e[10], 9, 38016083), i = m(i, a, r, n, e[15], 14, -660478335), n = m(n, i, a, r, e[4], 20, -405537848), r = m(r, n, i, a, e[9], 5, 568446438), a = m(a, r, n, i, e[14], 9, -1019803690), i = m(i, a, r, n, e[3], 14, -187363961), n = m(n, i, a, r, e[8], 20, 1163531501), r = m(r, n, i, a, e[13], 5, -1444681467), a = m(a, r, n, i, e[2], 9, -51403784), i = m(i, a, r, n, e[7], 14, 1735328473), r = v(r, n = m(n, i, a, r, e[12], 20, -1926607734), i, a, e[5], 4, -378558), a = v(a, r, n, i, e[8], 11, -2022574463), i = v(i, a, r, n, e[11], 16, 1839030562), n = v(n, i, a, r, e[14], 23, -35309556), r = v(r, n, i, a, e[1], 4, -1530992060), a = v(a, r, n, i, e[4], 11, 1272893353), i = v(i, a, r, n, e[7], 16, -155497632), n = v(n, i, a, r, e[10], 23, -1094730640), r = v(r, n, i, a, e[13], 4, 681279174), a = v(a, r, n, i, e[0], 11, -358537222), i = v(i, a, r, n, e[3], 16, -722521979), n = v(n, i, a, r, e[6], 23, 76029189), r = v(r, n, i, a, e[9], 4, -640364487), a = v(a, r, n, i, e[12], 11, -421815835), i = v(i, a, r, n, e[15], 16, 530742520), r = b(r, n = v(n, i, a, r, e[2], 23, -995338651), i, a, e[0], 6, -198630844), a = b(a, r, n, i, e[7], 10, 1126891415), i = b(i, a, r, n, e[14], 15, -1416354905), n = b(n, i, a, r, e[5], 21, -57434055), r = b(r, n, i, a, e[12], 6, 1700485571), a = b(a, r, n, i, e[3], 10, -1894986606), i = b(i, a, r, n, e[10], 15, -1051523), n = b(n, i, a, r, e[1], 21, -2054922799), r = b(r, n, i, a, e[8], 6, 1873313359), a = b(a, r, n, i, e[15], 10, -30611744), i = b(i, a, r, n, e[6], 15, -1560198380), n = b(n, i, a, r, e[13], 21, 1309151649), r = b(r, n, i, a, e[4], 6, -145523070), a = b(a, r, n, i, e[11], 10, -1120210379), i = b(i, a, r, n, e[2], 15, 718787259), n = b(n, i, a, r, e[9], 21, -343485551), t[0] = _(r, t[0]), t[1] = _(n, t[1]), t[2] = _(i, t[2]), t[3] = _(a, t[3]);
}
function p(t, e, r, n, i, a) {
  return e = _(_(e, t), _(n, a)), _(e << i | e >>> 32 - i, r);
}
function g(t, e, r, n, i, a, o) {
  return p(e & r | ~e & n, t, e, i, a, o);
}
function m(t, e, r, n, i, a, o) {
  return p(e & n | r & ~n, t, e, i, a, o);
}
function v(t, e, r, n, i, a, o) {
  return p(e ^ r ^ n, t, e, i, a, o);
}
function b(t, e, r, n, i, a, o) {
  return p(r ^ (e | ~n), t, e, i, a, o);
}
function y(t) {
  var e,
    r = t.length,
    n = [1732584193, -271733879, -1732584194, 271733878];
  for (e = 64; e <= t.length; e += 64) d(n, w(t.substring(e - 64, e)));
  t = t.substring(e - 64);
  var i = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  for (e = 0; e < t.length; e++) i[e >> 2] |= t.charCodeAt(e) << (e % 4 << 3);
  if (i[e >> 2] |= 128 << (e % 4 << 3), e > 55) for (d(n, i), e = 0; e < 16; e++) i[e] = 0;
  return i[14] = 8 * r, d(n, i), n;
}
function w(t) {
  var e,
    r = [];
  for (e = 0; e < 64; e += 4) r[e >> 2] = t.charCodeAt(e) + (t.charCodeAt(e + 1) << 8) + (t.charCodeAt(e + 2) << 16) + (t.charCodeAt(e + 3) << 24);
  return r;
}
u = n.atob.bind(n), h = n.btoa.bind(n);
var N = "0123456789abcdef".split("");
function L(t) {
  for (var e = "", r = 0; r < 4; r++) e += N[t >> 8 * r + 4 & 15] + N[t >> 8 * r & 15];
  return e;
}
function A(t) {
  return String.fromCharCode((255 & t) >> 0, (65280 & t) >> 8, (16711680 & t) >> 16, (4278190080 & t) >> 24);
}
function x(t) {
  return y(t).map(A).join("");
}
var S = "5d41402abc4b2a76b9719d911017c592" != function (t) {
  for (var e = 0; e < t.length; e++) t[e] = L(t[e]);
  return t.join("");
}(y("hello"));
function _(t, e) {
  if (S) {
    var r = (65535 & t) + (65535 & e);
    return (t >> 16) + (e >> 16) + (r >> 16) << 16 | 65535 & r;
  }
  return t + e & 4294967295;
}
/**
 * @license
 * FPDF is released under a permissive license: there is no usage restriction.
 * You may embed it freely in your application (commercial or not), with or
 * without modifications.
 *
 * Reference: http://www.fpdf.org/en/script/script37.php
 */
function P(t, e) {
  var r, n, i, a;
  if (t !== r) {
    for (var o = (i = t, a = 1 + (256 / t.length >> 0), new Array(a + 1).join(i)), s = [], c = 0; c < 256; c++) s[c] = c;
    var u = 0;
    for (c = 0; c < 256; c++) {
      var h = s[c];
      u = (u + h + o.charCodeAt(c)) % 256, s[c] = s[u], s[u] = h;
    }
    r = t, n = s;
  } else s = n;
  var l = e.length,
    f = 0,
    d = 0,
    p = "";
  for (c = 0; c < l; c++) d = (d + (h = s[f = (f + 1) % 256])) % 256, s[f] = s[d], s[d] = h, o = s[(s[f] + s[d]) % 256], p += String.fromCharCode(e.charCodeAt(c) ^ o);
  return p;
}
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 * Author: Owen Leong (@owenl131)
 * Date: 15 Oct 2020
 * References:
 * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt
 * https://github.com/foliojs/pdfkit/blob/master/lib/security.js
 * http://www.fpdf.org/en/script/script37.php
 */
var k = {
  print: 4,
  modify: 8,
  copy: 16,
  "annot-forms": 32
};
function I(t, e, r, n) {
  this.v = 1, this.r = 2;
  var i = 192;
  t.forEach(function (t) {
    if (void 0 !== k.perm) throw new Error("Invalid permission: " + t);
    i += k[t];
  }), this.padding = "(¿N^NuAd\0NVÿú\b..\0¶Ðh>/\f©þdSiz";
  var a = (e + this.padding).substr(0, 32),
    o = (r + this.padding).substr(0, 32);
  this.O = this.processOwnerPassword(a, o), this.P = -(1 + (255 ^ i)), this.encryptionKey = x(a + this.O + this.lsbFirstWord(this.P) + this.hexToBytes(n)).substr(0, 5), this.U = P(this.encryptionKey, this.padding);
}
function F(t) {
  if (/[^\u0000-\u00ff]/.test(t)) throw new Error("Invalid PDF Name Object: " + t + ", Only accept ASCII characters.");
  for (var e = "", r = t.length, n = 0; n < r; n++) {
    var i = t.charCodeAt(n);
    if (i < 33 || 35 === i || 37 === i || 40 === i || 41 === i || 47 === i || 60 === i || 62 === i || 91 === i || 93 === i || 123 === i || 125 === i || i > 126) e += "#" + ("0" + i.toString(16)).slice(-2);else e += t[n];
  }
  return e;
}
function C(e) {
  if ("object" !== (0, _typeof.default)(e)) throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");
  var r = {};
  this.subscribe = function (t, e, n) {
    if (n = n || !1, "string" != typeof t || "function" != typeof e || "boolean" != typeof n) throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");
    r.hasOwnProperty(t) || (r[t] = {});
    var i = Math.random().toString(35);
    return r[t][i] = [e, !!n], i;
  }, this.unsubscribe = function (t) {
    for (var e in r) if (r[e][t]) return delete r[e][t], 0 === Object.keys(r[e]).length && delete r[e], !0;
    return !1;
  }, this.publish = function (t) {
    if (r.hasOwnProperty(t)) {
      var i = Array.prototype.slice.call(arguments, 1),
        o = [];
      for (var s in r[t]) {
        var c = r[t][s];
        try {
          c[0].apply(e, i);
        } catch (t) {
          n.console && a.error("jsPDF PubSub Error", t.message, t);
        }
        c[1] && o.push(s);
      }
      o.length && o.forEach(this.unsubscribe);
    }
  }, this.getTopics = function () {
    return r;
  };
}
function j(t) {
  if (!(this instanceof j)) return new j(t);
  var e = "opacity,stroke-opacity".split(",");
  for (var r in t) t.hasOwnProperty(r) && e.indexOf(r) >= 0 && (this[r] = t[r]);
  this.id = "", this.objectNumber = -1;
}
function O(t, e) {
  this.gState = t, this.matrix = e, this.id = "", this.objectNumber = -1;
}
function B(t, e, r, n, i) {
  if (!(this instanceof B)) return new B(t, e, r, n, i);
  this.type = "axial" === t ? 2 : 3, this.coords = e, this.colors = r, O.call(this, n, i);
}
function M(t, e, r, n, i) {
  if (!(this instanceof M)) return new M(t, e, r, n, i);
  this.boundingBox = t, this.xStep = e, this.yStep = r, this.stream = "", this.cloneIndex = 0, O.call(this, n, i);
}
function E(e) {
  var r,
    i = "string" == typeof arguments[0] ? arguments[0] : "p",
    o = arguments[1],
    s = arguments[2],
    c = arguments[3],
    u = [],
    d = 1,
    p = 16,
    g = "S",
    m = null;
  "object" === (0, _typeof.default)(e = e || {}) && (i = e.orientation, o = e.unit || o, s = e.format || s, c = e.compress || e.compressPdf || c, null !== (m = e.encryption || null) && (m.userPassword = m.userPassword || "", m.ownerPassword = m.ownerPassword || "", m.userPermissions = m.userPermissions || []), d = "number" == typeof e.userUnit ? Math.abs(e.userUnit) : 1, void 0 !== e.precision && (r = e.precision), void 0 !== e.floatPrecision && (p = e.floatPrecision), g = e.defaultPathOperation || "S"), u = e.filters || (!0 === c ? ["FlateEncode"] : u), o = o || "mm", i = ("" + (i || "P")).toLowerCase();
  var v = e.putOnlyUsedFonts || !1,
    b = {},
    y = {
      internal: {},
      __private__: {}
    };
  y.__private__.PubSub = C;
  var w = "1.3",
    N = y.__private__.getPdfVersion = function () {
      return w;
    };
  y.__private__.setPdfVersion = function (t) {
    w = t;
  };
  var L = {
    a0: [2383.94, 3370.39],
    a1: [1683.78, 2383.94],
    a2: [1190.55, 1683.78],
    a3: [841.89, 1190.55],
    a4: [595.28, 841.89],
    a5: [419.53, 595.28],
    a6: [297.64, 419.53],
    a7: [209.76, 297.64],
    a8: [147.4, 209.76],
    a9: [104.88, 147.4],
    a10: [73.7, 104.88],
    b0: [2834.65, 4008.19],
    b1: [2004.09, 2834.65],
    b2: [1417.32, 2004.09],
    b3: [1000.63, 1417.32],
    b4: [708.66, 1000.63],
    b5: [498.9, 708.66],
    b6: [354.33, 498.9],
    b7: [249.45, 354.33],
    b8: [175.75, 249.45],
    b9: [124.72, 175.75],
    b10: [87.87, 124.72],
    c0: [2599.37, 3676.54],
    c1: [1836.85, 2599.37],
    c2: [1298.27, 1836.85],
    c3: [918.43, 1298.27],
    c4: [649.13, 918.43],
    c5: [459.21, 649.13],
    c6: [323.15, 459.21],
    c7: [229.61, 323.15],
    c8: [161.57, 229.61],
    c9: [113.39, 161.57],
    c10: [79.37, 113.39],
    dl: [311.81, 623.62],
    letter: [612, 792],
    "government-letter": [576, 756],
    legal: [612, 1008],
    "junior-legal": [576, 360],
    ledger: [1224, 792],
    tabloid: [792, 1224],
    "credit-card": [153, 243]
  };
  y.__private__.getPageFormats = function () {
    return L;
  };
  var A = y.__private__.getPageFormat = function (t) {
    return L[t];
  };
  s = s || "a4";
  var x = {
      COMPAT: "compat",
      ADVANCED: "advanced"
    },
    S = x.COMPAT;
  function _() {
    this.saveGraphicsState(), lt(new Vt(_t, 0, 0, -_t, 0, Rr() * _t).toString() + " cm"), this.setFontSize(this.getFontSize() / _t), g = "n", S = x.ADVANCED;
  }
  function P() {
    this.restoreGraphicsState(), g = "S", S = x.COMPAT;
  }
  var k = y.__private__.combineFontStyleAndFontWeight = function (t, e) {
    if ("bold" == t && "normal" == e || "bold" == t && 400 == e || "normal" == t && "italic" == e || "bold" == t && "italic" == e) throw new Error("Invalid Combination of fontweight and fontstyle");
    return e && (t = 400 == e || "normal" === e ? "italic" === t ? "italic" : "normal" : 700 != e && "bold" !== e || "normal" !== t ? (700 == e ? "bold" : e) + "" + t : "bold"), t;
  };
  y.advancedAPI = function (t) {
    var e = S === x.COMPAT;
    return e && _.call(this), "function" != typeof t || (t(this), e && P.call(this)), this;
  }, y.compatAPI = function (t) {
    var e = S === x.ADVANCED;
    return e && P.call(this), "function" != typeof t || (t(this), e && _.call(this)), this;
  }, y.isAdvancedAPI = function () {
    return S === x.ADVANCED;
  };
  var O,
    q = function (t) {
      if (S !== x.ADVANCED) throw new Error(t + " is only available in 'advanced' API mode. You need to call advancedAPI() first.");
    },
    D = y.roundToPrecision = y.__private__.roundToPrecision = function (t, e) {
      var n = r || e;
      if (isNaN(t) || isNaN(n)) throw new Error("Invalid argument passed to jsPDF.roundToPrecision");
      return t.toFixed(n).replace(/0+$/, "");
    };
  O = y.hpf = y.__private__.hpf = "number" == typeof p ? function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
    return D(t, p);
  } : "smart" === p ? function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
    return D(t, t > -1 && t < 1 ? 16 : 5);
  } : function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
    return D(t, 16);
  };
  var R = y.f2 = y.__private__.f2 = function (t) {
      if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f2");
      return D(t, 2);
    },
    T = y.__private__.f3 = function (t) {
      if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f3");
      return D(t, 3);
    },
    U = y.scale = y.__private__.scale = function (t) {
      if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.scale");
      return S === x.COMPAT ? t * _t : S === x.ADVANCED ? t : void 0;
    },
    z = function (t) {
      return S === x.COMPAT ? Rr() - t : S === x.ADVANCED ? t : void 0;
    },
    H = function (t) {
      return U(z(t));
    };
  y.__private__.setPrecision = y.setPrecision = function (t) {
    "number" == typeof parseInt(t, 10) && (r = parseInt(t, 10));
  };
  var W,
    V = "00000000000000000000000000000000",
    G = y.__private__.getFileId = function () {
      return V;
    },
    Y = y.__private__.setFileId = function (t) {
      return V = void 0 !== t && /^[a-fA-F0-9]{32}$/.test(t) ? t.toUpperCase() : V.split("").map(function () {
        return "ABCDEF0123456789".charAt(Math.floor(16 * Math.random()));
      }).join(""), null !== m && (Ye = new I(m.userPermissions, m.userPassword, m.ownerPassword, V)), V;
    };
  y.setFileId = function (t) {
    return Y(t), this;
  }, y.getFileId = function () {
    return G();
  };
  var J = y.__private__.convertDateToPDFDate = function (t) {
      var e = t.getTimezoneOffset(),
        r = e < 0 ? "+" : "-",
        n = Math.floor(Math.abs(e / 60)),
        i = Math.abs(e % 60),
        a = [r, Q(n), "'", Q(i), "'"].join("");
      return ["D:", t.getFullYear(), Q(t.getMonth() + 1), Q(t.getDate()), Q(t.getHours()), Q(t.getMinutes()), Q(t.getSeconds()), a].join("");
    },
    X = y.__private__.convertPDFDateToDate = function (t) {
      var e = parseInt(t.substr(2, 4), 10),
        r = parseInt(t.substr(6, 2), 10) - 1,
        n = parseInt(t.substr(8, 2), 10),
        i = parseInt(t.substr(10, 2), 10),
        a = parseInt(t.substr(12, 2), 10),
        o = parseInt(t.substr(14, 2), 10);
      return new Date(e, r, n, i, a, o, 0);
    },
    K = y.__private__.setCreationDate = function (t) {
      var e;
      if (void 0 === t && (t = new Date()), t instanceof Date) e = J(t);else {
        if (!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t)) throw new Error("Invalid argument passed to jsPDF.setCreationDate");
        e = t;
      }
      return W = e;
    },
    Z = y.__private__.getCreationDate = function (t) {
      var e = W;
      return "jsDate" === t && (e = X(W)), e;
    };
  y.setCreationDate = function (t) {
    return K(t), this;
  }, y.getCreationDate = function (t) {
    return Z(t);
  };
  var $,
    Q = y.__private__.padd2 = function (t) {
      return ("0" + parseInt(t)).slice(-2);
    },
    tt = y.__private__.padd2Hex = function (t) {
      return ("00" + (t = t.toString())).substr(t.length);
    },
    et = 0,
    rt = [],
    nt = [],
    it = 0,
    at = [],
    ot = [],
    st = !1,
    ct = nt,
    ut = function () {
      et = 0, it = 0, nt = [], rt = [], at = [], Qt = Kt(), te = Kt();
    };
  y.__private__.setCustomOutputDestination = function (t) {
    st = !0, ct = t;
  };
  var ht = function (t) {
    st || (ct = t);
  };
  y.__private__.resetCustomOutputDestination = function () {
    st = !1, ct = nt;
  };
  var lt = y.__private__.out = function (t) {
      return t = t.toString(), it += t.length + 1, ct.push(t), ct;
    },
    ft = y.__private__.write = function (t) {
      return lt(1 === arguments.length ? t.toString() : Array.prototype.join.call(arguments, " "));
    },
    dt = y.__private__.getArrayBuffer = function (t) {
      for (var e = t.length, r = new ArrayBuffer(e), n = new Uint8Array(r); e--;) n[e] = t.charCodeAt(e);
      return r;
    },
    pt = [["Helvetica", "helvetica", "normal", "WinAnsiEncoding"], ["Helvetica-Bold", "helvetica", "bold", "WinAnsiEncoding"], ["Helvetica-Oblique", "helvetica", "italic", "WinAnsiEncoding"], ["Helvetica-BoldOblique", "helvetica", "bolditalic", "WinAnsiEncoding"], ["Courier", "courier", "normal", "WinAnsiEncoding"], ["Courier-Bold", "courier", "bold", "WinAnsiEncoding"], ["Courier-Oblique", "courier", "italic", "WinAnsiEncoding"], ["Courier-BoldOblique", "courier", "bolditalic", "WinAnsiEncoding"], ["Times-Roman", "times", "normal", "WinAnsiEncoding"], ["Times-Bold", "times", "bold", "WinAnsiEncoding"], ["Times-Italic", "times", "italic", "WinAnsiEncoding"], ["Times-BoldItalic", "times", "bolditalic", "WinAnsiEncoding"], ["ZapfDingbats", "zapfdingbats", "normal", null], ["Symbol", "symbol", "normal", null]];
  y.__private__.getStandardFonts = function () {
    return pt;
  };
  var gt = e.fontSize || 16;
  y.__private__.setFontSize = y.setFontSize = function (t) {
    return gt = S === x.ADVANCED ? t / _t : t, this;
  };
  var mt,
    vt = y.__private__.getFontSize = y.getFontSize = function () {
      return S === x.COMPAT ? gt : gt * _t;
    },
    bt = e.R2L || !1;
  y.__private__.setR2L = y.setR2L = function (t) {
    return bt = t, this;
  }, y.__private__.getR2L = y.getR2L = function () {
    return bt;
  };
  var yt,
    wt = y.__private__.setZoomMode = function (t) {
      var e = [void 0, null, "fullwidth", "fullheight", "fullpage", "original"];
      if (/^(?:\d+\.\d*|\d*\.\d+|\d+)%$/.test(t)) mt = t;else if (isNaN(t)) {
        if (-1 === e.indexOf(t)) throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "' + t + '" is not recognized.');
        mt = t;
      } else mt = parseInt(t, 10);
    };
  y.__private__.getZoomMode = function () {
    return mt;
  };
  var Nt,
    Lt = y.__private__.setPageMode = function (t) {
      if (-1 == [void 0, null, "UseNone", "UseOutlines", "UseThumbs", "FullScreen"].indexOf(t)) throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "' + t + '" is not recognized.');
      yt = t;
    };
  y.__private__.getPageMode = function () {
    return yt;
  };
  var At = y.__private__.setLayoutMode = function (t) {
    if (-1 == [void 0, null, "continuous", "single", "twoleft", "tworight", "two"].indexOf(t)) throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "' + t + '" is not recognized.');
    Nt = t;
  };
  y.__private__.getLayoutMode = function () {
    return Nt;
  }, y.__private__.setDisplayMode = y.setDisplayMode = function (t, e, r) {
    return wt(t), At(e), Lt(r), this;
  };
  var xt = {
    title: "",
    subject: "",
    author: "",
    keywords: "",
    creator: ""
  };
  y.__private__.getDocumentProperty = function (t) {
    if (-1 === Object.keys(xt).indexOf(t)) throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");
    return xt[t];
  }, y.__private__.getDocumentProperties = function () {
    return xt;
  }, y.__private__.setDocumentProperties = y.setProperties = y.setDocumentProperties = function (t) {
    for (var e in xt) xt.hasOwnProperty(e) && t[e] && (xt[e] = t[e]);
    return this;
  }, y.__private__.setDocumentProperty = function (t, e) {
    if (-1 === Object.keys(xt).indexOf(t)) throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");
    return xt[t] = e;
  };
  var St,
    _t,
    Pt,
    kt,
    It,
    Ft = {},
    Ct = {},
    jt = [],
    Ot = {},
    Bt = {},
    Mt = {},
    Et = {},
    qt = null,
    Dt = 0,
    Rt = [],
    Tt = new C(y),
    Ut = e.hotfixes || [],
    zt = {},
    Ht = {},
    Wt = [],
    Vt = function t(e, r, n, i, a, o) {
      if (!(this instanceof t)) return new t(e, r, n, i, a, o);
      isNaN(e) && (e = 1), isNaN(r) && (r = 0), isNaN(n) && (n = 0), isNaN(i) && (i = 1), isNaN(a) && (a = 0), isNaN(o) && (o = 0), this._matrix = [e, r, n, i, a, o];
    };
  Object.defineProperty(Vt.prototype, "sx", {
    get: function () {
      return this._matrix[0];
    },
    set: function (t) {
      this._matrix[0] = t;
    }
  }), Object.defineProperty(Vt.prototype, "shy", {
    get: function () {
      return this._matrix[1];
    },
    set: function (t) {
      this._matrix[1] = t;
    }
  }), Object.defineProperty(Vt.prototype, "shx", {
    get: function () {
      return this._matrix[2];
    },
    set: function (t) {
      this._matrix[2] = t;
    }
  }), Object.defineProperty(Vt.prototype, "sy", {
    get: function () {
      return this._matrix[3];
    },
    set: function (t) {
      this._matrix[3] = t;
    }
  }), Object.defineProperty(Vt.prototype, "tx", {
    get: function () {
      return this._matrix[4];
    },
    set: function (t) {
      this._matrix[4] = t;
    }
  }), Object.defineProperty(Vt.prototype, "ty", {
    get: function () {
      return this._matrix[5];
    },
    set: function (t) {
      this._matrix[5] = t;
    }
  }), Object.defineProperty(Vt.prototype, "a", {
    get: function () {
      return this._matrix[0];
    },
    set: function (t) {
      this._matrix[0] = t;
    }
  }), Object.defineProperty(Vt.prototype, "b", {
    get: function () {
      return this._matrix[1];
    },
    set: function (t) {
      this._matrix[1] = t;
    }
  }), Object.defineProperty(Vt.prototype, "c", {
    get: function () {
      return this._matrix[2];
    },
    set: function (t) {
      this._matrix[2] = t;
    }
  }), Object.defineProperty(Vt.prototype, "d", {
    get: function () {
      return this._matrix[3];
    },
    set: function (t) {
      this._matrix[3] = t;
    }
  }), Object.defineProperty(Vt.prototype, "e", {
    get: function () {
      return this._matrix[4];
    },
    set: function (t) {
      this._matrix[4] = t;
    }
  }), Object.defineProperty(Vt.prototype, "f", {
    get: function () {
      return this._matrix[5];
    },
    set: function (t) {
      this._matrix[5] = t;
    }
  }), Object.defineProperty(Vt.prototype, "rotation", {
    get: function () {
      return Math.atan2(this.shx, this.sx);
    }
  }), Object.defineProperty(Vt.prototype, "scaleX", {
    get: function () {
      return this.decompose().scale.sx;
    }
  }), Object.defineProperty(Vt.prototype, "scaleY", {
    get: function () {
      return this.decompose().scale.sy;
    }
  }), Object.defineProperty(Vt.prototype, "isIdentity", {
    get: function () {
      return 1 === this.sx && 0 === this.shy && 0 === this.shx && 1 === this.sy && 0 === this.tx && 0 === this.ty;
    }
  }), Vt.prototype.join = function (t) {
    return [this.sx, this.shy, this.shx, this.sy, this.tx, this.ty].map(O).join(t);
  }, Vt.prototype.multiply = function (t) {
    var e = t.sx * this.sx + t.shy * this.shx,
      r = t.sx * this.shy + t.shy * this.sy,
      n = t.shx * this.sx + t.sy * this.shx,
      i = t.shx * this.shy + t.sy * this.sy,
      a = t.tx * this.sx + t.ty * this.shx + this.tx,
      o = t.tx * this.shy + t.ty * this.sy + this.ty;
    return new Vt(e, r, n, i, a, o);
  }, Vt.prototype.decompose = function () {
    var t = this.sx,
      e = this.shy,
      r = this.shx,
      n = this.sy,
      i = this.tx,
      a = this.ty,
      o = Math.sqrt(t * t + e * e),
      s = (t /= o) * r + (e /= o) * n;
    r -= t * s, n -= e * s;
    var c = Math.sqrt(r * r + n * n);
    return s /= c, t * (n /= c) < e * (r /= c) && (t = -t, e = -e, s = -s, o = -o), {
      scale: new Vt(o, 0, 0, c, 0, 0),
      translate: new Vt(1, 0, 0, 1, i, a),
      rotate: new Vt(t, e, -e, t, 0, 0),
      skew: new Vt(1, 0, s, 1, 0, 0)
    };
  }, Vt.prototype.toString = function (t) {
    return this.join(" ");
  }, Vt.prototype.inversed = function () {
    var t = this.sx,
      e = this.shy,
      r = this.shx,
      n = this.sy,
      i = this.tx,
      a = this.ty,
      o = 1 / (t * n - e * r),
      s = n * o,
      c = -e * o,
      u = -r * o,
      h = t * o;
    return new Vt(s, c, u, h, -s * i - u * a, -c * i - h * a);
  }, Vt.prototype.applyToPoint = function (t) {
    var e = t.x * this.sx + t.y * this.shx + this.tx,
      r = t.x * this.shy + t.y * this.sy + this.ty;
    return new Cr(e, r);
  }, Vt.prototype.applyToRectangle = function (t) {
    var e = this.applyToPoint(t),
      r = this.applyToPoint(new Cr(t.x + t.w, t.y + t.h));
    return new jr(e.x, e.y, r.x - e.x, r.y - e.y);
  }, Vt.prototype.clone = function () {
    var t = this.sx,
      e = this.shy,
      r = this.shx,
      n = this.sy,
      i = this.tx,
      a = this.ty;
    return new Vt(t, e, r, n, i, a);
  }, y.Matrix = Vt;
  var Gt = y.matrixMult = function (t, e) {
      return e.multiply(t);
    },
    Yt = new Vt(1, 0, 0, 1, 0, 0);
  y.unitMatrix = y.identityMatrix = Yt;
  var Jt = function (t, e) {
    if (!Bt[t]) {
      var r = (e instanceof B ? "Sh" : "P") + (Object.keys(Ot).length + 1).toString(10);
      e.id = r, Bt[t] = r, Ot[r] = e, Tt.publish("addPattern", e);
    }
  };
  y.ShadingPattern = B, y.TilingPattern = M, y.addShadingPattern = function (t, e) {
    return q("addShadingPattern()"), Jt(t, e), this;
  }, y.beginTilingPattern = function (t) {
    q("beginTilingPattern()"), Br(t.boundingBox[0], t.boundingBox[1], t.boundingBox[2] - t.boundingBox[0], t.boundingBox[3] - t.boundingBox[1], t.matrix);
  }, y.endTilingPattern = function (t, e) {
    q("endTilingPattern()"), e.stream = ot[$].join("\n"), Jt(t, e), Tt.publish("endTilingPattern", e), Wt.pop().restore();
  };
  var Xt = y.__private__.newObject = function () {
      var t = Kt();
      return Zt(t, !0), t;
    },
    Kt = y.__private__.newObjectDeferred = function () {
      return et++, rt[et] = function () {
        return it;
      }, et;
    },
    Zt = function (t, e) {
      return e = "boolean" == typeof e && e, rt[t] = it, e && lt(t + " 0 obj"), t;
    },
    $t = y.__private__.newAdditionalObject = function () {
      var t = {
        objId: Kt(),
        content: ""
      };
      return at.push(t), t;
    },
    Qt = Kt(),
    te = Kt(),
    ee = y.__private__.decodeColorString = function (t) {
      var e = t.split(" ");
      if (2 !== e.length || "g" !== e[1] && "G" !== e[1]) {
        if (5 === e.length && ("k" === e[4] || "K" === e[4])) {
          e = [(1 - e[0]) * (1 - e[3]), (1 - e[1]) * (1 - e[3]), (1 - e[2]) * (1 - e[3]), "r"];
        }
      } else {
        var r = parseFloat(e[0]);
        e = [r, r, r, "r"];
      }
      for (var n = "#", i = 0; i < 3; i++) n += ("0" + Math.floor(255 * parseFloat(e[i])).toString(16)).slice(-2);
      return n;
    },
    re = y.__private__.encodeColorString = function (e) {
      var r;
      "string" == typeof e && (e = {
        ch1: e
      });
      var n = e.ch1,
        i = e.ch2,
        a = e.ch3,
        o = e.ch4,
        s = "draw" === e.pdfColorType ? ["G", "RG", "K"] : ["g", "rg", "k"];
      if ("string" == typeof n && "#" !== n.charAt(0)) {
        var c = new f(n);
        if (c.ok) n = c.toHex();else if (!/^\d*\.?\d*$/.test(n)) throw new Error('Invalid color "' + n + '" passed to jsPDF.encodeColorString.');
      }
      if ("string" == typeof n && /^#[0-9A-Fa-f]{3}$/.test(n) && (n = "#" + n[1] + n[1] + n[2] + n[2] + n[3] + n[3]), "string" == typeof n && /^#[0-9A-Fa-f]{6}$/.test(n)) {
        var u = parseInt(n.substr(1), 16);
        n = u >> 16 & 255, i = u >> 8 & 255, a = 255 & u;
      }
      if (void 0 === i || void 0 === o && n === i && i === a) {
        if ("string" == typeof n) r = n + " " + s[0];else switch (e.precision) {
          case 2:
            r = R(n / 255) + " " + s[0];
            break;
          case 3:
          default:
            r = T(n / 255) + " " + s[0];
        }
      } else if (void 0 === o || "object" === (0, _typeof.default)(o)) {
        if (o && !isNaN(o.a) && 0 === o.a) return r = ["1.", "1.", "1.", s[1]].join(" ");
        if ("string" == typeof n) r = [n, i, a, s[1]].join(" ");else switch (e.precision) {
          case 2:
            r = [R(n / 255), R(i / 255), R(a / 255), s[1]].join(" ");
            break;
          default:
          case 3:
            r = [T(n / 255), T(i / 255), T(a / 255), s[1]].join(" ");
        }
      } else if ("string" == typeof n) r = [n, i, a, o, s[2]].join(" ");else switch (e.precision) {
        case 2:
          r = [R(n), R(i), R(a), R(o), s[2]].join(" ");
          break;
        case 3:
        default:
          r = [T(n), T(i), T(a), T(o), s[2]].join(" ");
      }
      return r;
    },
    ne = y.__private__.getFilters = function () {
      return u;
    },
    ie = y.__private__.putStream = function (t) {
      var e = (t = t || {}).data || "",
        r = t.filters || ne(),
        n = t.alreadyAppliedFilters || [],
        i = t.addLength1 || !1,
        a = e.length,
        o = t.objectId,
        s = function (t) {
          return t;
        };
      if (null !== m && void 0 === o) throw new Error("ObjectId must be passed to putStream for file encryption");
      null !== m && (s = Ye.encryptor(o, 0));
      var c = {};
      !0 === r && (r = ["FlateEncode"]);
      var u = t.additionalKeyValues || [],
        h = (c = void 0 !== E.API.processDataByFilters ? E.API.processDataByFilters(e, r) : {
          data: e,
          reverseChain: []
        }).reverseChain + (Array.isArray(n) ? n.join(" ") : n.toString());
      if (0 !== c.data.length && (u.push({
        key: "Length",
        value: c.data.length
      }), !0 === i && u.push({
        key: "Length1",
        value: a
      })), 0 != h.length) if (h.split("/").length - 1 == 1) u.push({
        key: "Filter",
        value: h
      });else {
        u.push({
          key: "Filter",
          value: "[" + h + "]"
        });
        for (var l = 0; l < u.length; l += 1) if ("DecodeParms" === u[l].key) {
          for (var f = [], d = 0; d < c.reverseChain.split("/").length - 1; d += 1) f.push("null");
          f.push(u[l].value), u[l].value = "[" + f.join(" ") + "]";
        }
      }
      lt("<<");
      for (var p = 0; p < u.length; p++) lt("/" + u[p].key + " " + u[p].value);
      lt(">>"), 0 !== c.data.length && (lt("stream"), lt(s(c.data)), lt("endstream"));
    },
    ae = y.__private__.putPage = function (t) {
      var e = t.number,
        r = t.data,
        n = t.objId,
        i = t.contentsObjId;
      Zt(n, !0), lt("<</Type /Page"), lt("/Parent " + t.rootDictionaryObjId + " 0 R"), lt("/Resources " + t.resourceDictionaryObjId + " 0 R"), lt("/MediaBox [" + parseFloat(O(t.mediaBox.bottomLeftX)) + " " + parseFloat(O(t.mediaBox.bottomLeftY)) + " " + O(t.mediaBox.topRightX) + " " + O(t.mediaBox.topRightY) + "]"), null !== t.cropBox && lt("/CropBox [" + O(t.cropBox.bottomLeftX) + " " + O(t.cropBox.bottomLeftY) + " " + O(t.cropBox.topRightX) + " " + O(t.cropBox.topRightY) + "]"), null !== t.bleedBox && lt("/BleedBox [" + O(t.bleedBox.bottomLeftX) + " " + O(t.bleedBox.bottomLeftY) + " " + O(t.bleedBox.topRightX) + " " + O(t.bleedBox.topRightY) + "]"), null !== t.trimBox && lt("/TrimBox [" + O(t.trimBox.bottomLeftX) + " " + O(t.trimBox.bottomLeftY) + " " + O(t.trimBox.topRightX) + " " + O(t.trimBox.topRightY) + "]"), null !== t.artBox && lt("/ArtBox [" + O(t.artBox.bottomLeftX) + " " + O(t.artBox.bottomLeftY) + " " + O(t.artBox.topRightX) + " " + O(t.artBox.topRightY) + "]"), "number" == typeof t.userUnit && 1 !== t.userUnit && lt("/UserUnit " + t.userUnit), Tt.publish("putPage", {
        objId: n,
        pageContext: Rt[e],
        pageNumber: e,
        page: r
      }), lt("/Contents " + i + " 0 R"), lt(">>"), lt("endobj");
      var a = r.join("\n");
      return S === x.ADVANCED && (a += "\nQ"), Zt(i, !0), ie({
        data: a,
        filters: ne(),
        objectId: i
      }), lt("endobj"), n;
    },
    oe = y.__private__.putPages = function () {
      var t,
        e,
        r = [];
      for (t = 1; t <= Dt; t++) Rt[t].objId = Kt(), Rt[t].contentsObjId = Kt();
      for (t = 1; t <= Dt; t++) r.push(ae({
        number: t,
        data: ot[t],
        objId: Rt[t].objId,
        contentsObjId: Rt[t].contentsObjId,
        mediaBox: Rt[t].mediaBox,
        cropBox: Rt[t].cropBox,
        bleedBox: Rt[t].bleedBox,
        trimBox: Rt[t].trimBox,
        artBox: Rt[t].artBox,
        userUnit: Rt[t].userUnit,
        rootDictionaryObjId: Qt,
        resourceDictionaryObjId: te
      }));
      Zt(Qt, !0), lt("<</Type /Pages");
      var n = "/Kids [";
      for (e = 0; e < Dt; e++) n += r[e] + " 0 R ";
      lt(n + "]"), lt("/Count " + Dt), lt(">>"), lt("endobj"), Tt.publish("postPutPages");
    },
    se = function (t) {
      Tt.publish("putFont", {
        font: t,
        out: lt,
        newObject: Xt,
        putStream: ie
      }), !0 !== t.isAlreadyPutted && (t.objectNumber = Xt(), lt("<<"), lt("/Type /Font"), lt("/BaseFont /" + F(t.postScriptName)), lt("/Subtype /Type1"), "string" == typeof t.encoding && lt("/Encoding /" + t.encoding), lt("/FirstChar 32"), lt("/LastChar 255"), lt(">>"), lt("endobj"));
    },
    ce = function () {
      for (var t in Ft) Ft.hasOwnProperty(t) && (!1 === v || !0 === v && b.hasOwnProperty(t)) && se(Ft[t]);
    },
    ue = function (t) {
      t.objectNumber = Xt();
      var e = [];
      e.push({
        key: "Type",
        value: "/XObject"
      }), e.push({
        key: "Subtype",
        value: "/Form"
      }), e.push({
        key: "BBox",
        value: "[" + [O(t.x), O(t.y), O(t.x + t.width), O(t.y + t.height)].join(" ") + "]"
      }), e.push({
        key: "Matrix",
        value: "[" + t.matrix.toString() + "]"
      });
      var r = t.pages[1].join("\n");
      ie({
        data: r,
        additionalKeyValues: e,
        objectId: t.objectNumber
      }), lt("endobj");
    },
    he = function () {
      for (var t in zt) zt.hasOwnProperty(t) && ue(zt[t]);
    },
    le = function (t, e) {
      var r,
        n = [],
        i = 1 / (e - 1);
      for (r = 0; r < 1; r += i) n.push(r);
      if (n.push(1), 0 != t[0].offset) {
        var a = {
          offset: 0,
          color: t[0].color
        };
        t.unshift(a);
      }
      if (1 != t[t.length - 1].offset) {
        var o = {
          offset: 1,
          color: t[t.length - 1].color
        };
        t.push(o);
      }
      for (var s = "", c = 0, u = 0; u < n.length; u++) {
        for (r = n[u]; r > t[c + 1].offset;) c++;
        var h = t[c].offset,
          l = (r - h) / (t[c + 1].offset - h),
          f = t[c].color,
          d = t[c + 1].color;
        s += tt(Math.round((1 - l) * f[0] + l * d[0]).toString(16)) + tt(Math.round((1 - l) * f[1] + l * d[1]).toString(16)) + tt(Math.round((1 - l) * f[2] + l * d[2]).toString(16));
      }
      return s.trim();
    },
    fe = function (t, e) {
      e || (e = 21);
      var r = Xt(),
        n = le(t.colors, e),
        i = [];
      i.push({
        key: "FunctionType",
        value: "0"
      }), i.push({
        key: "Domain",
        value: "[0.0 1.0]"
      }), i.push({
        key: "Size",
        value: "[" + e + "]"
      }), i.push({
        key: "BitsPerSample",
        value: "8"
      }), i.push({
        key: "Range",
        value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
      }), i.push({
        key: "Decode",
        value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
      }), ie({
        data: n,
        additionalKeyValues: i,
        alreadyAppliedFilters: ["/ASCIIHexDecode"],
        objectId: r
      }), lt("endobj"), t.objectNumber = Xt(), lt("<< /ShadingType " + t.type), lt("/ColorSpace /DeviceRGB");
      var a = "/Coords [" + O(parseFloat(t.coords[0])) + " " + O(parseFloat(t.coords[1])) + " ";
      2 === t.type ? a += O(parseFloat(t.coords[2])) + " " + O(parseFloat(t.coords[3])) : a += O(parseFloat(t.coords[2])) + " " + O(parseFloat(t.coords[3])) + " " + O(parseFloat(t.coords[4])) + " " + O(parseFloat(t.coords[5])), lt(a += "]"), t.matrix && lt("/Matrix [" + t.matrix.toString() + "]"), lt("/Function " + r + " 0 R"), lt("/Extend [true true]"), lt(">>"), lt("endobj");
    },
    de = function (t, e) {
      var r = Kt(),
        n = Xt();
      e.push({
        resourcesOid: r,
        objectOid: n
      }), t.objectNumber = n;
      var i = [];
      i.push({
        key: "Type",
        value: "/Pattern"
      }), i.push({
        key: "PatternType",
        value: "1"
      }), i.push({
        key: "PaintType",
        value: "1"
      }), i.push({
        key: "TilingType",
        value: "1"
      }), i.push({
        key: "BBox",
        value: "[" + t.boundingBox.map(O).join(" ") + "]"
      }), i.push({
        key: "XStep",
        value: O(t.xStep)
      }), i.push({
        key: "YStep",
        value: O(t.yStep)
      }), i.push({
        key: "Resources",
        value: r + " 0 R"
      }), t.matrix && i.push({
        key: "Matrix",
        value: "[" + t.matrix.toString() + "]"
      }), ie({
        data: t.stream,
        additionalKeyValues: i,
        objectId: t.objectNumber
      }), lt("endobj");
    },
    pe = function (t) {
      var e;
      for (e in Ot) Ot.hasOwnProperty(e) && (Ot[e] instanceof B ? fe(Ot[e]) : Ot[e] instanceof M && de(Ot[e], t));
    },
    ge = function (t) {
      for (var e in t.objectNumber = Xt(), lt("<<"), t) switch (e) {
        case "opacity":
          lt("/ca " + R(t[e]));
          break;
        case "stroke-opacity":
          lt("/CA " + R(t[e]));
      }
      lt(">>"), lt("endobj");
    },
    me = function () {
      var t;
      for (t in Mt) Mt.hasOwnProperty(t) && ge(Mt[t]);
    },
    ve = function () {
      for (var t in lt("/XObject <<"), zt) zt.hasOwnProperty(t) && zt[t].objectNumber >= 0 && lt("/" + t + " " + zt[t].objectNumber + " 0 R");
      Tt.publish("putXobjectDict"), lt(">>");
    },
    be = function () {
      Ye.oid = Xt(), lt("<<"), lt("/Filter /Standard"), lt("/V " + Ye.v), lt("/R " + Ye.r), lt("/U <" + Ye.toHexString(Ye.U) + ">"), lt("/O <" + Ye.toHexString(Ye.O) + ">"), lt("/P " + Ye.P), lt(">>"), lt("endobj");
    },
    ye = function () {
      for (var t in lt("/Font <<"), Ft) Ft.hasOwnProperty(t) && (!1 === v || !0 === v && b.hasOwnProperty(t)) && lt("/" + t + " " + Ft[t].objectNumber + " 0 R");
      lt(">>");
    },
    we = function () {
      if (Object.keys(Ot).length > 0) {
        for (var t in lt("/Shading <<"), Ot) Ot.hasOwnProperty(t) && Ot[t] instanceof B && Ot[t].objectNumber >= 0 && lt("/" + t + " " + Ot[t].objectNumber + " 0 R");
        Tt.publish("putShadingPatternDict"), lt(">>");
      }
    },
    Ne = function (t) {
      if (Object.keys(Ot).length > 0) {
        for (var e in lt("/Pattern <<"), Ot) Ot.hasOwnProperty(e) && Ot[e] instanceof y.TilingPattern && Ot[e].objectNumber >= 0 && Ot[e].objectNumber < t && lt("/" + e + " " + Ot[e].objectNumber + " 0 R");
        Tt.publish("putTilingPatternDict"), lt(">>");
      }
    },
    Le = function () {
      if (Object.keys(Mt).length > 0) {
        var t;
        for (t in lt("/ExtGState <<"), Mt) Mt.hasOwnProperty(t) && Mt[t].objectNumber >= 0 && lt("/" + t + " " + Mt[t].objectNumber + " 0 R");
        Tt.publish("putGStateDict"), lt(">>");
      }
    },
    Ae = function (t) {
      Zt(t.resourcesOid, !0), lt("<<"), lt("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"), ye(), we(), Ne(t.objectOid), Le(), ve(), lt(">>"), lt("endobj");
    },
    xe = function () {
      var t = [];
      ce(), me(), he(), pe(t), Tt.publish("putResources"), t.forEach(Ae), Ae({
        resourcesOid: te,
        objectOid: Number.MAX_SAFE_INTEGER
      }), Tt.publish("postPutResources");
    },
    Se = function () {
      Tt.publish("putAdditionalObjects");
      for (var t = 0; t < at.length; t++) {
        var e = at[t];
        Zt(e.objId, !0), lt(e.content), lt("endobj");
      }
      Tt.publish("postPutAdditionalObjects");
    },
    _e = function (t) {
      Ct[t.fontName] = Ct[t.fontName] || {}, Ct[t.fontName][t.fontStyle] = t.id;
    },
    Pe = function (t, e, r, n, i) {
      var a = {
        id: "F" + (Object.keys(Ft).length + 1).toString(10),
        postScriptName: t,
        fontName: e,
        fontStyle: r,
        encoding: n,
        isStandardFont: i || !1,
        metadata: {}
      };
      return Tt.publish("addFont", {
        font: a,
        instance: this
      }), Ft[a.id] = a, _e(a), a.id;
    },
    ke = function (t) {
      for (var e = 0, r = pt.length; e < r; e++) {
        var n = Pe.call(this, t[e][0], t[e][1], t[e][2], pt[e][3], !0);
        !1 === v && (b[n] = !0);
        var i = t[e][0].split("-");
        _e({
          id: n,
          fontName: i[0],
          fontStyle: i[1] || ""
        });
      }
      Tt.publish("addFonts", {
        fonts: Ft,
        dictionary: Ct
      });
    },
    Ie = function (t) {
      return t.foo = function () {
        try {
          return t.apply(this, arguments);
        } catch (t) {
          var e = t.stack || "";
          ~e.indexOf(" at ") && (e = e.split(" at ")[1]);
          var r = "Error in function " + e.split("\n")[0].split("<")[0] + ": " + t.message;
          if (!n.console) throw new Error(r);
          n.console.error(r, t), n.alert && alert(r);
        }
      }, t.foo.bar = t, t.foo;
    },
    Fe = function (t, e) {
      var r, n, i, a, o, s, c, u, h;
      if (i = (e = e || {}).sourceEncoding || "Unicode", o = e.outputEncoding, (e.autoencode || o) && Ft[St].metadata && Ft[St].metadata[i] && Ft[St].metadata[i].encoding && (a = Ft[St].metadata[i].encoding, !o && Ft[St].encoding && (o = Ft[St].encoding), !o && a.codePages && (o = a.codePages[0]), "string" == typeof o && (o = a[o]), o)) {
        for (c = !1, s = [], r = 0, n = t.length; r < n; r++) (u = o[t.charCodeAt(r)]) ? s.push(String.fromCharCode(u)) : s.push(t[r]), s[r].charCodeAt(0) >> 8 && (c = !0);
        t = s.join("");
      }
      for (r = t.length; void 0 === c && 0 !== r;) t.charCodeAt(r - 1) >> 8 && (c = !0), r--;
      if (!c) return t;
      for (s = e.noBOM ? [] : [254, 255], r = 0, n = t.length; r < n; r++) {
        if ((h = (u = t.charCodeAt(r)) >> 8) >> 8) throw new Error("Character at position " + r + " of string '" + t + "' exceeds 16bits. Cannot be encoded into UCS-2 BE");
        s.push(h), s.push(u - (h << 8));
      }
      return String.fromCharCode.apply(void 0, s);
    },
    Ce = y.__private__.pdfEscape = y.pdfEscape = function (t, e) {
      return Fe(t, e).replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
    },
    je = y.__private__.beginPage = function (t) {
      ot[++Dt] = [], Rt[Dt] = {
        objId: 0,
        contentsObjId: 0,
        userUnit: Number(d),
        artBox: null,
        bleedBox: null,
        cropBox: null,
        trimBox: null,
        mediaBox: {
          bottomLeftX: 0,
          bottomLeftY: 0,
          topRightX: Number(t[0]),
          topRightY: Number(t[1])
        }
      }, Me(Dt), ht(ot[$]);
    },
    Oe = function (t, e) {
      var r, n, o;
      switch (i = e || i, "string" == typeof t && (r = A(t.toLowerCase()), Array.isArray(r) && (n = r[0], o = r[1])), Array.isArray(t) && (n = t[0] * _t, o = t[1] * _t), isNaN(n) && (n = s[0], o = s[1]), (n > 14400 || o > 14400) && (a.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"), n = Math.min(14400, n), o = Math.min(14400, o)), s = [n, o], i.substr(0, 1)) {
        case "l":
          o > n && (s = [o, n]);
          break;
        case "p":
          n > o && (s = [o, n]);
      }
      je(s), pr(fr), lt(Lr), 0 !== kr && lt(kr + " J"), 0 !== Ir && lt(Ir + " j"), Tt.publish("addPage", {
        pageNumber: Dt
      });
    },
    Be = function (t) {
      t > 0 && t <= Dt && (ot.splice(t, 1), Rt.splice(t, 1), Dt--, $ > Dt && ($ = Dt), this.setPage($));
    },
    Me = function (t) {
      t > 0 && t <= Dt && ($ = t);
    },
    Ee = y.__private__.getNumberOfPages = y.getNumberOfPages = function () {
      return ot.length - 1;
    },
    qe = function (t, e, r) {
      var n,
        i = void 0;
      return r = r || {}, t = void 0 !== t ? t : Ft[St].fontName, e = void 0 !== e ? e : Ft[St].fontStyle, n = t.toLowerCase(), void 0 !== Ct[n] && void 0 !== Ct[n][e] ? i = Ct[n][e] : void 0 !== Ct[t] && void 0 !== Ct[t][e] ? i = Ct[t][e] : !1 === r.disableWarning && a.warn("Unable to look up font label for font '" + t + "', '" + e + "'. Refer to getFontList() for available fonts."), i || r.noFallback || null == (i = Ct.times[e]) && (i = Ct.times.normal), i;
    },
    De = y.__private__.putInfo = function () {
      var t = Xt(),
        e = function (t) {
          return t;
        };
      for (var r in null !== m && (e = Ye.encryptor(t, 0)), lt("<<"), lt("/Producer (" + Ce(e("jsPDF " + E.version)) + ")"), xt) xt.hasOwnProperty(r) && xt[r] && lt("/" + r.substr(0, 1).toUpperCase() + r.substr(1) + " (" + Ce(e(xt[r])) + ")");
      lt("/CreationDate (" + Ce(e(W)) + ")"), lt(">>"), lt("endobj");
    },
    Re = y.__private__.putCatalog = function (t) {
      var e = (t = t || {}).rootDictionaryObjId || Qt;
      switch (Xt(), lt("<<"), lt("/Type /Catalog"), lt("/Pages " + e + " 0 R"), mt || (mt = "fullwidth"), mt) {
        case "fullwidth":
          lt("/OpenAction [3 0 R /FitH null]");
          break;
        case "fullheight":
          lt("/OpenAction [3 0 R /FitV null]");
          break;
        case "fullpage":
          lt("/OpenAction [3 0 R /Fit]");
          break;
        case "original":
          lt("/OpenAction [3 0 R /XYZ null null 1]");
          break;
        default:
          var r = "" + mt;
          "%" === r.substr(r.length - 1) && (mt = parseInt(mt) / 100), "number" == typeof mt && lt("/OpenAction [3 0 R /XYZ null null " + R(mt) + "]");
      }
      switch (Nt || (Nt = "continuous"), Nt) {
        case "continuous":
          lt("/PageLayout /OneColumn");
          break;
        case "single":
          lt("/PageLayout /SinglePage");
          break;
        case "two":
        case "twoleft":
          lt("/PageLayout /TwoColumnLeft");
          break;
        case "tworight":
          lt("/PageLayout /TwoColumnRight");
      }
      yt && lt("/PageMode /" + yt), Tt.publish("putCatalog"), lt(">>"), lt("endobj");
    },
    Te = y.__private__.putTrailer = function () {
      lt("trailer"), lt("<<"), lt("/Size " + (et + 1)), lt("/Root " + et + " 0 R"), lt("/Info " + (et - 1) + " 0 R"), null !== m && lt("/Encrypt " + Ye.oid + " 0 R"), lt("/ID [ <" + V + "> <" + V + "> ]"), lt(">>");
    },
    Ue = y.__private__.putHeader = function () {
      lt("%PDF-" + w), lt("%ºß¬à");
    },
    ze = y.__private__.putXRef = function () {
      var t = "0000000000";
      lt("xref"), lt("0 " + (et + 1)), lt("0000000000 65535 f ");
      for (var e = 1; e <= et; e++) {
        "function" == typeof rt[e] ? lt((t + rt[e]()).slice(-10) + " 00000 n ") : void 0 !== rt[e] ? lt((t + rt[e]).slice(-10) + " 00000 n ") : lt("0000000000 00000 n ");
      }
    },
    He = y.__private__.buildDocument = function () {
      ut(), ht(nt), Tt.publish("buildDocument"), Ue(), oe(), Se(), xe(), null !== m && be(), De(), Re();
      var t = it;
      return ze(), Te(), lt("startxref"), lt("" + t), lt("%%EOF"), ht(ot[$]), nt.join("\n");
    },
    We = y.__private__.getBlob = function (t) {
      return new Blob([dt(t)], {
        type: "application/pdf"
      });
    },
    Ve = y.output = y.__private__.output = Ie(function (t, e) {
      switch ("string" == typeof (e = e || {}) ? e = {
        filename: e
      } : e.filename = e.filename || "generated.pdf", t) {
        case void 0:
          return He();
        case "save":
          y.save(e.filename);
          break;
        case "arraybuffer":
          return dt(He());
        case "blob":
          return We(He());
        case "bloburi":
        case "bloburl":
          if (void 0 !== n.URL && "function" == typeof n.URL.createObjectURL) return n.URL && n.URL.createObjectURL(We(He())) || void 0;
          a.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");
          break;
        case "datauristring":
        case "dataurlstring":
          var r = "",
            i = He();
          try {
            r = h(i);
          } catch (t) {
            r = h(unescape(encodeURIComponent(i)));
          }
          return "data:application/pdf;filename=" + e.filename + ";base64," + r;
        case "pdfobjectnewwindow":
          if ("[object Window]" === Object.prototype.toString.call(n)) {
            var o = "https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js",
              s = ' integrity="sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==" crossorigin="anonymous"';
            e.pdfObjectUrl && (o = e.pdfObjectUrl, s = "");
            var c = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="' + o + '"' + s + '><\/script><script >PDFObject.embed("' + this.output("dataurlstring") + '", ' + JSON.stringify(e) + ");<\/script></body></html>",
              u = n.open();
            return null !== u && u.document.write(c), u;
          }
          throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");
        case "pdfjsnewwindow":
          if ("[object Window]" === Object.prototype.toString.call(n)) {
            var l = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="' + (e.pdfJsUrl || "examples/PDF.js/web/viewer.html") + "?file=&downloadName=" + e.filename + '" width="500px" height="400px" /></body></html>',
              f = n.open();
            if (null !== f) {
              f.document.write(l);
              var d = this;
              f.document.documentElement.querySelector("#pdfViewer").onload = function () {
                f.document.title = e.filename, f.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(d.output("bloburl"));
              };
            }
            return f;
          }
          throw new Error("The option pdfjsnewwindow just works in a browser-environment.");
        case "dataurlnewwindow":
          if ("[object Window]" !== Object.prototype.toString.call(n)) throw new Error("The option dataurlnewwindow just works in a browser-environment.");
          var p = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="' + this.output("datauristring", e) + '"></iframe></body></html>',
            g = n.open();
          if (null !== g && (g.document.write(p), g.document.title = e.filename), g || "undefined" == typeof safari) return g;
          break;
        case "datauri":
        case "dataurl":
          return n.document.location.href = this.output("datauristring", e);
        default:
          return null;
      }
    }),
    Ge = function (t) {
      return !0 === Array.isArray(Ut) && Ut.indexOf(t) > -1;
    };
  switch (o) {
    case "pt":
      _t = 1;
      break;
    case "mm":
      _t = 72 / 25.4;
      break;
    case "cm":
      _t = 72 / 2.54;
      break;
    case "in":
      _t = 72;
      break;
    case "px":
      _t = 1 == Ge("px_scaling") ? .75 : 96 / 72;
      break;
    case "pc":
    case "em":
      _t = 12;
      break;
    case "ex":
      _t = 6;
      break;
    default:
      if ("number" != typeof o) throw new Error("Invalid unit: " + o);
      _t = o;
  }
  var Ye = null;
  K(), Y();
  var Je = function (t) {
      return null !== m ? Ye.encryptor(t, 0) : function (t) {
        return t;
      };
    },
    Xe = y.__private__.getPageInfo = y.getPageInfo = function (t) {
      if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfo");
      return {
        objId: Rt[t].objId,
        pageNumber: t,
        pageContext: Rt[t]
      };
    },
    Ke = y.__private__.getPageInfoByObjId = function (t) {
      if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");
      for (var e in Rt) if (Rt[e].objId === t) break;
      return Xe(e);
    },
    Ze = y.__private__.getCurrentPageInfo = y.getCurrentPageInfo = function () {
      return {
        objId: Rt[$].objId,
        pageNumber: $,
        pageContext: Rt[$]
      };
    };
  y.addPage = function () {
    return Oe.apply(this, arguments), this;
  }, y.setPage = function () {
    return Me.apply(this, arguments), ht.call(this, ot[$]), this;
  }, y.insertPage = function (t) {
    return this.addPage(), this.movePage($, t), this;
  }, y.movePage = function (t, e) {
    var r, n;
    if (t > e) {
      r = ot[t], n = Rt[t];
      for (var i = t; i > e; i--) ot[i] = ot[i - 1], Rt[i] = Rt[i - 1];
      ot[e] = r, Rt[e] = n, this.setPage(e);
    } else if (t < e) {
      r = ot[t], n = Rt[t];
      for (var a = t; a < e; a++) ot[a] = ot[a + 1], Rt[a] = Rt[a + 1];
      ot[e] = r, Rt[e] = n, this.setPage(e);
    }
    return this;
  }, y.deletePage = function () {
    return Be.apply(this, arguments), this;
  }, y.__private__.text = y.text = function (e, r, n, i, a) {
    var o,
      s,
      c,
      u,
      h,
      l,
      f,
      d,
      p,
      g = (i = i || {}).scope || this;
    if ("number" == typeof e && "number" == typeof r && ("string" == typeof n || Array.isArray(n))) {
      var m = n;
      n = r, r = e, e = m;
    }
    if (arguments[3] instanceof Vt == !1 ? (c = arguments[4], u = arguments[5], "object" === (0, _typeof.default)(f = arguments[3]) && null !== f || ("string" == typeof c && (u = c, c = null), "string" == typeof f && (u = f, f = null), "number" == typeof f && (c = f, f = null), i = {
      flags: f,
      angle: c,
      align: u
    })) : (q("The transform parameter of text() with a Matrix value"), p = a), isNaN(r) || isNaN(n) || null == e) throw new Error("Invalid arguments passed to jsPDF.text");
    if (0 === e.length) return g;
    var v = "",
      y = !1,
      w = "number" == typeof i.lineHeightFactor ? i.lineHeightFactor : lr,
      N = g.internal.scaleFactor;
    function L(t) {
      return t = t.split("\t").join(Array(i.TabLen || 9).join(" ")), Ce(t, f);
    }
    function A(t) {
      for (var e, r = t.concat(), n = [], i = r.length; i--;) "string" == typeof (e = r.shift()) ? n.push(e) : Array.isArray(t) && (1 === e.length || void 0 === e[1] && void 0 === e[2]) ? n.push(e[0]) : n.push([e[0], e[1], e[2]]);
      return n;
    }
    function _(t, e) {
      var r;
      if ("string" == typeof t) r = e(t)[0];else if (Array.isArray(t)) {
        for (var n, i, a = t.concat(), o = [], s = a.length; s--;) "string" == typeof (n = a.shift()) ? o.push(e(n)[0]) : Array.isArray(n) && "string" == typeof n[0] && (i = e(n[0], n[1], n[2]), o.push([i[0], i[1], i[2]]));
        r = o;
      }
      return r;
    }
    var P = !1,
      k = !0;
    if ("string" == typeof e) P = !0;else if (Array.isArray(e)) {
      var I = e.concat();
      s = [];
      for (var F, C = I.length; C--;) ("string" != typeof (F = I.shift()) || Array.isArray(F) && "string" != typeof F[0]) && (k = !1);
      P = k;
    }
    if (!1 === P) throw new Error('Type of text must be string or Array. "' + e + '" is not recognized.');
    "string" == typeof e && (e = e.match(/[\r?\n]/) ? e.split(/\r\n|\r|\n/g) : [e]);
    var j = gt / g.internal.scaleFactor,
      B = j * (w - 1);
    switch (i.baseline) {
      case "bottom":
        n -= B;
        break;
      case "top":
        n += j - B;
        break;
      case "hanging":
        n += j - 2 * B;
        break;
      case "middle":
        n += j / 2 - B;
    }
    if ((l = i.maxWidth || 0) > 0 && ("string" == typeof e ? e = g.splitTextToSize(e, l) : "[object Array]" === Object.prototype.toString.call(e) && (e = e.reduce(function (t, e) {
      return t.concat(g.splitTextToSize(e, l));
    }, []))), o = {
      text: e,
      x: r,
      y: n,
      options: i,
      mutex: {
        pdfEscape: Ce,
        activeFontKey: St,
        fonts: Ft,
        activeFontSize: gt
      }
    }, Tt.publish("preProcessText", o), e = o.text, c = (i = o.options).angle, p instanceof Vt == !1 && c && "number" == typeof c) {
      c *= Math.PI / 180, 0 === i.rotationDirection && (c = -c), S === x.ADVANCED && (c = -c);
      var M = Math.cos(c),
        E = Math.sin(c);
      p = new Vt(M, E, -E, M, 0, 0);
    } else c && c instanceof Vt && (p = c);
    S !== x.ADVANCED || p || (p = Yt), void 0 !== (h = i.charSpace || _r) && (v += O(U(h)) + " Tc\n", this.setCharSpace(this.getCharSpace() || 0)), void 0 !== (d = i.horizontalScale) && (v += O(100 * d) + " Tz\n");
    i.lang;
    var D = -1,
      R = void 0 !== i.renderingMode ? i.renderingMode : i.stroke,
      T = g.internal.getCurrentPageInfo().pageContext;
    switch (R) {
      case 0:
      case !1:
      case "fill":
        D = 0;
        break;
      case 1:
      case !0:
      case "stroke":
        D = 1;
        break;
      case 2:
      case "fillThenStroke":
        D = 2;
        break;
      case 3:
      case "invisible":
        D = 3;
        break;
      case 4:
      case "fillAndAddForClipping":
        D = 4;
        break;
      case 5:
      case "strokeAndAddPathForClipping":
        D = 5;
        break;
      case 6:
      case "fillThenStrokeAndAddToPathForClipping":
        D = 6;
        break;
      case 7:
      case "addToPathForClipping":
        D = 7;
    }
    var z = void 0 !== T.usedRenderingMode ? T.usedRenderingMode : -1;
    -1 !== D ? v += D + " Tr\n" : -1 !== z && (v += "0 Tr\n"), -1 !== D && (T.usedRenderingMode = D), u = i.align || "left";
    var H,
      W = gt * w,
      V = g.internal.pageSize.getWidth(),
      G = Ft[St];
    h = i.charSpace || _r, l = i.maxWidth || 0, f = Object.assign({
      autoencode: !0,
      noBOM: !0
    }, i.flags);
    var Y = [];
    if ("[object Array]" === Object.prototype.toString.call(e)) {
      var J;
      s = A(e), "left" !== u && (H = s.map(function (t) {
        return g.getStringUnitWidth(t, {
          font: G,
          charSpace: h,
          fontSize: gt,
          doKerning: !1
        }) * gt / N;
      }));
      var X,
        K = 0;
      if ("right" === u) {
        r -= H[0], e = [], C = s.length;
        for (var Z = 0; Z < C; Z++) 0 === Z ? (X = br(r), J = yr(n)) : (X = U(K - H[Z]), J = -W), e.push([s[Z], X, J]), K = H[Z];
      } else if ("center" === u) {
        r -= H[0] / 2, e = [], C = s.length;
        for (var $ = 0; $ < C; $++) 0 === $ ? (X = br(r), J = yr(n)) : (X = U((K - H[$]) / 2), J = -W), e.push([s[$], X, J]), K = H[$];
      } else if ("left" === u) {
        e = [], C = s.length;
        for (var Q = 0; Q < C; Q++) e.push(s[Q]);
      } else {
        if ("justify" !== u) throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');
        e = [], C = s.length, l = 0 !== l ? l : V;
        for (var tt = 0; tt < C; tt++) J = 0 === tt ? yr(n) : -W, X = 0 === tt ? br(r) : 0, tt < C - 1 ? Y.push(O(U((l - H[tt]) / (s[tt].split(" ").length - 1)))) : Y.push(0), e.push([s[tt], X, J]);
      }
    }
    var et = "boolean" == typeof i.R2L ? i.R2L : bt;
    !0 === et && (e = _(e, function (t, e, r) {
      return [t.split("").reverse().join(""), e, r];
    })), o = {
      text: e,
      x: r,
      y: n,
      options: i,
      mutex: {
        pdfEscape: Ce,
        activeFontKey: St,
        fonts: Ft,
        activeFontSize: gt
      }
    }, Tt.publish("postProcessText", o), e = o.text, y = o.mutex.isHex || !1;
    var rt = Ft[St].encoding;
    "WinAnsiEncoding" !== rt && "StandardEncoding" !== rt || (e = _(e, function (t, e, r) {
      return [L(t), e, r];
    })), s = A(e), e = [];
    for (var nt, it, at, ot = 0, st = 1, ct = Array.isArray(s[0]) ? st : ot, ut = "", ht = function (t, e, r) {
        var n = "";
        return r instanceof Vt ? (r = "number" == typeof i.angle ? Gt(r, new Vt(1, 0, 0, 1, t, e)) : Gt(new Vt(1, 0, 0, 1, t, e), r), S === x.ADVANCED && (r = Gt(new Vt(1, 0, 0, -1, 0, 0), r)), n = r.join(" ") + " Tm\n") : n = O(t) + " " + O(e) + " Td\n", n;
      }, ft = 0; ft < s.length; ft++) {
      switch (ut = "", ct) {
        case st:
          at = (y ? "<" : "(") + s[ft][0] + (y ? ">" : ")"), nt = parseFloat(s[ft][1]), it = parseFloat(s[ft][2]);
          break;
        case ot:
          at = (y ? "<" : "(") + s[ft] + (y ? ">" : ")"), nt = br(r), it = yr(n);
      }
      void 0 !== Y && void 0 !== Y[ft] && (ut = Y[ft] + " Tw\n"), 0 === ft ? e.push(ut + ht(nt, it, p) + at) : ct === ot ? e.push(ut + at) : ct === st && e.push(ut + ht(nt, it, p) + at);
    }
    e = ct === ot ? e.join(" Tj\nT* ") : e.join(" Tj\n"), e += " Tj\n";
    var dt = "BT\n/";
    return dt += St + " " + gt + " Tf\n", dt += O(gt * w) + " TL\n", dt += xr + "\n", dt += v, dt += e, lt(dt += "ET"), b[St] = !0, g;
  };
  var $e = y.__private__.clip = y.clip = function (t) {
    return lt("evenodd" === t ? "W*" : "W"), this;
  };
  y.clipEvenOdd = function () {
    return $e("evenodd");
  }, y.__private__.discardPath = y.discardPath = function () {
    return lt("n"), this;
  };
  var Qe = y.__private__.isValidStyle = function (t) {
    var e = !1;
    return -1 !== [void 0, null, "S", "D", "F", "DF", "FD", "f", "f*", "B", "B*", "n"].indexOf(t) && (e = !0), e;
  };
  y.__private__.setDefaultPathOperation = y.setDefaultPathOperation = function (t) {
    return Qe(t) && (g = t), this;
  };
  var tr = y.__private__.getStyle = y.getStyle = function (t) {
      var e = g;
      switch (t) {
        case "D":
        case "S":
          e = "S";
          break;
        case "F":
          e = "f";
          break;
        case "FD":
        case "DF":
          e = "B";
          break;
        case "f":
        case "f*":
        case "B":
        case "B*":
          e = t;
      }
      return e;
    },
    er = y.close = function () {
      return lt("h"), this;
    };
  y.stroke = function () {
    return lt("S"), this;
  }, y.fill = function (t) {
    return rr("f", t), this;
  }, y.fillEvenOdd = function (t) {
    return rr("f*", t), this;
  }, y.fillStroke = function (t) {
    return rr("B", t), this;
  }, y.fillStrokeEvenOdd = function (t) {
    return rr("B*", t), this;
  };
  var rr = function (e, r) {
      "object" === (0, _typeof.default)(r) ? ar(r, e) : lt(e);
    },
    nr = function (t) {
      null === t || S === x.ADVANCED && void 0 === t || (t = tr(t), lt(t));
    };
  function ir(t, e, r, n, i) {
    var a = new M(e || this.boundingBox, r || this.xStep, n || this.yStep, this.gState, i || this.matrix);
    a.stream = this.stream;
    var o = t + "$$" + this.cloneIndex++ + "$$";
    return Jt(o, a), a;
  }
  var ar = function (t, e) {
      var r = Bt[t.key],
        n = Ot[r];
      if (n instanceof B) lt("q"), lt(or(e)), n.gState && y.setGState(n.gState), lt(t.matrix.toString() + " cm"), lt("/" + r + " sh"), lt("Q");else if (n instanceof M) {
        var i = new Vt(1, 0, 0, -1, 0, Rr());
        t.matrix && (i = i.multiply(t.matrix || Yt), r = ir.call(n, t.key, t.boundingBox, t.xStep, t.yStep, i).id), lt("q"), lt("/Pattern cs"), lt("/" + r + " scn"), n.gState && y.setGState(n.gState), lt(e), lt("Q");
      }
    },
    or = function (t) {
      switch (t) {
        case "f":
        case "F":
          return "W n";
        case "f*":
          return "W* n";
        case "B":
          return "W S";
        case "B*":
          return "W* S";
        case "S":
          return "W S";
        case "n":
          return "W n";
      }
    },
    sr = y.moveTo = function (t, e) {
      return lt(O(U(t)) + " " + O(H(e)) + " m"), this;
    },
    cr = y.lineTo = function (t, e) {
      return lt(O(U(t)) + " " + O(H(e)) + " l"), this;
    },
    ur = y.curveTo = function (t, e, r, n, i, a) {
      return lt([O(U(t)), O(H(e)), O(U(r)), O(H(n)), O(U(i)), O(H(a)), "c"].join(" ")), this;
    };
  y.__private__.line = y.line = function (t, e, r, n, i) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i)) throw new Error("Invalid arguments passed to jsPDF.line");
    return S === x.COMPAT ? this.lines([[r - t, n - e]], t, e, [1, 1], i || "S") : this.lines([[r - t, n - e]], t, e, [1, 1]).stroke();
  }, y.__private__.lines = y.lines = function (t, e, r, n, i, a) {
    var o, s, c, u, h, l, f, d, p, g, m, v;
    if ("number" == typeof t && (v = r, r = e, e = t, t = v), n = n || [1, 1], a = a || !1, isNaN(e) || isNaN(r) || !Array.isArray(t) || !Array.isArray(n) || !Qe(i) || "boolean" != typeof a) throw new Error("Invalid arguments passed to jsPDF.lines");
    for (sr(e, r), o = n[0], s = n[1], u = t.length, g = e, m = r, c = 0; c < u; c++) 2 === (h = t[c]).length ? (g = h[0] * o + g, m = h[1] * s + m, cr(g, m)) : (l = h[0] * o + g, f = h[1] * s + m, d = h[2] * o + g, p = h[3] * s + m, g = h[4] * o + g, m = h[5] * s + m, ur(l, f, d, p, g, m));
    return a && er(), nr(i), this;
  }, y.path = function (t) {
    for (var e = 0; e < t.length; e++) {
      var r = t[e],
        n = r.c;
      switch (r.op) {
        case "m":
          sr(n[0], n[1]);
          break;
        case "l":
          cr(n[0], n[1]);
          break;
        case "c":
          ur.apply(this, n);
          break;
        case "h":
          er();
      }
    }
    return this;
  }, y.__private__.rect = y.rect = function (t, e, r, n, i) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i)) throw new Error("Invalid arguments passed to jsPDF.rect");
    return S === x.COMPAT && (n = -n), lt([O(U(t)), O(H(e)), O(U(r)), O(U(n)), "re"].join(" ")), nr(i), this;
  }, y.__private__.triangle = y.triangle = function (t, e, r, n, i, a, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(a) || !Qe(o)) throw new Error("Invalid arguments passed to jsPDF.triangle");
    return this.lines([[r - t, n - e], [i - r, a - n], [t - i, e - a]], t, e, [1, 1], o, !0), this;
  }, y.__private__.roundedRect = y.roundedRect = function (t, e, r, n, i, a, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(a) || !Qe(o)) throw new Error("Invalid arguments passed to jsPDF.roundedRect");
    var s = 4 / 3 * (Math.SQRT2 - 1);
    return i = Math.min(i, .5 * r), a = Math.min(a, .5 * n), this.lines([[r - 2 * i, 0], [i * s, 0, i, a - a * s, i, a], [0, n - 2 * a], [0, a * s, -i * s, a, -i, a], [2 * i - r, 0], [-i * s, 0, -i, -a * s, -i, -a], [0, 2 * a - n], [0, -a * s, i * s, -a, i, -a]], t + i, e, [1, 1], o, !0), this;
  }, y.__private__.ellipse = y.ellipse = function (t, e, r, n, i) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i)) throw new Error("Invalid arguments passed to jsPDF.ellipse");
    var a = 4 / 3 * (Math.SQRT2 - 1) * r,
      o = 4 / 3 * (Math.SQRT2 - 1) * n;
    return sr(t + r, e), ur(t + r, e - o, t + a, e - n, t, e - n), ur(t - a, e - n, t - r, e - o, t - r, e), ur(t - r, e + o, t - a, e + n, t, e + n), ur(t + a, e + n, t + r, e + o, t + r, e), nr(i), this;
  }, y.__private__.circle = y.circle = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || !Qe(n)) throw new Error("Invalid arguments passed to jsPDF.circle");
    return this.ellipse(t, e, r, r, n);
  }, y.setFont = function (t, e, r) {
    return r && (e = k(e, r)), St = qe(t, e, {
      disableWarning: !1
    }), this;
  };
  var hr = y.__private__.getFont = y.getFont = function () {
    return Ft[qe.apply(y, arguments)];
  };
  y.__private__.getFontList = y.getFontList = function () {
    var t,
      e,
      r = {};
    for (t in Ct) if (Ct.hasOwnProperty(t)) for (e in r[t] = [], Ct[t]) Ct[t].hasOwnProperty(e) && r[t].push(e);
    return r;
  }, y.addFont = function (t, e, r, n, i) {
    var a = ["StandardEncoding", "MacRomanEncoding", "Identity-H", "WinAnsiEncoding"];
    return arguments[3] && -1 !== a.indexOf(arguments[3]) ? i = arguments[3] : arguments[3] && -1 == a.indexOf(arguments[3]) && (r = k(r, n)), i = i || "Identity-H", Pe.call(this, t, e, r, i);
  };
  var lr,
    fr = e.lineWidth || .200025,
    dr = y.__private__.getLineWidth = y.getLineWidth = function () {
      return fr;
    },
    pr = y.__private__.setLineWidth = y.setLineWidth = function (t) {
      return fr = t, lt(O(U(t)) + " w"), this;
    };
  y.__private__.setLineDash = E.API.setLineDash = E.API.setLineDashPattern = function (t, e) {
    if (t = t || [], e = e || 0, isNaN(e) || !Array.isArray(t)) throw new Error("Invalid arguments passed to jsPDF.setLineDash");
    return t = t.map(function (t) {
      return O(U(t));
    }).join(" "), e = O(U(e)), lt("[" + t + "] " + e + " d"), this;
  };
  var gr = y.__private__.getLineHeight = y.getLineHeight = function () {
    return gt * lr;
  };
  y.__private__.getLineHeight = y.getLineHeight = function () {
    return gt * lr;
  };
  var mr = y.__private__.setLineHeightFactor = y.setLineHeightFactor = function (t) {
      return "number" == typeof (t = t || 1.15) && (lr = t), this;
    },
    vr = y.__private__.getLineHeightFactor = y.getLineHeightFactor = function () {
      return lr;
    };
  mr(e.lineHeight);
  var br = y.__private__.getHorizontalCoordinate = function (t) {
      return U(t);
    },
    yr = y.__private__.getVerticalCoordinate = function (t) {
      return S === x.ADVANCED ? t : Rt[$].mediaBox.topRightY - Rt[$].mediaBox.bottomLeftY - U(t);
    },
    wr = y.__private__.getHorizontalCoordinateString = y.getHorizontalCoordinateString = function (t) {
      return O(br(t));
    },
    Nr = y.__private__.getVerticalCoordinateString = y.getVerticalCoordinateString = function (t) {
      return O(yr(t));
    },
    Lr = e.strokeColor || "0 G";
  y.__private__.getStrokeColor = y.getDrawColor = function () {
    return ee(Lr);
  }, y.__private__.setStrokeColor = y.setDrawColor = function (t, e, r, n) {
    return Lr = re({
      ch1: t,
      ch2: e,
      ch3: r,
      ch4: n,
      pdfColorType: "draw",
      precision: 2
    }), lt(Lr), this;
  };
  var Ar = e.fillColor || "0 g";
  y.__private__.getFillColor = y.getFillColor = function () {
    return ee(Ar);
  }, y.__private__.setFillColor = y.setFillColor = function (t, e, r, n) {
    return Ar = re({
      ch1: t,
      ch2: e,
      ch3: r,
      ch4: n,
      pdfColorType: "fill",
      precision: 2
    }), lt(Ar), this;
  };
  var xr = e.textColor || "0 g",
    Sr = y.__private__.getTextColor = y.getTextColor = function () {
      return ee(xr);
    };
  y.__private__.setTextColor = y.setTextColor = function (t, e, r, n) {
    return xr = re({
      ch1: t,
      ch2: e,
      ch3: r,
      ch4: n,
      pdfColorType: "text",
      precision: 3
    }), this;
  };
  var _r = e.charSpace,
    Pr = y.__private__.getCharSpace = y.getCharSpace = function () {
      return parseFloat(_r || 0);
    };
  y.__private__.setCharSpace = y.setCharSpace = function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setCharSpace");
    return _r = t, this;
  };
  var kr = 0;
  y.CapJoinStyles = {
    0: 0,
    butt: 0,
    but: 0,
    miter: 0,
    1: 1,
    round: 1,
    rounded: 1,
    circle: 1,
    2: 2,
    projecting: 2,
    project: 2,
    square: 2,
    bevel: 2
  }, y.__private__.setLineCap = y.setLineCap = function (t) {
    var e = y.CapJoinStyles[t];
    if (void 0 === e) throw new Error("Line cap style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
    return kr = e, lt(e + " J"), this;
  };
  var Ir = 0;
  y.__private__.setLineJoin = y.setLineJoin = function (t) {
    var e = y.CapJoinStyles[t];
    if (void 0 === e) throw new Error("Line join style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
    return Ir = e, lt(e + " j"), this;
  }, y.__private__.setLineMiterLimit = y.__private__.setMiterLimit = y.setLineMiterLimit = y.setMiterLimit = function (t) {
    if (t = t || 0, isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");
    return lt(O(U(t)) + " M"), this;
  }, y.GState = j, y.setGState = function (t) {
    (t = "string" == typeof t ? Mt[Et[t]] : Fr(null, t)).equals(qt) || (lt("/" + t.id + " gs"), qt = t);
  };
  var Fr = function (t, e) {
    if (!t || !Et[t]) {
      var r = !1;
      for (var n in Mt) if (Mt.hasOwnProperty(n) && Mt[n].equals(e)) {
        r = !0;
        break;
      }
      if (r) e = Mt[n];else {
        var i = "GS" + (Object.keys(Mt).length + 1).toString(10);
        Mt[i] = e, e.id = i;
      }
      return t && (Et[t] = e.id), Tt.publish("addGState", e), e;
    }
  };
  y.addGState = function (t, e) {
    return Fr(t, e), this;
  }, y.saveGraphicsState = function () {
    return lt("q"), jt.push({
      key: St,
      size: gt,
      color: xr
    }), this;
  }, y.restoreGraphicsState = function () {
    lt("Q");
    var t = jt.pop();
    return St = t.key, gt = t.size, xr = t.color, qt = null, this;
  }, y.setCurrentTransformationMatrix = function (t) {
    return lt(t.toString() + " cm"), this;
  }, y.comment = function (t) {
    return lt("#" + t), this;
  };
  var Cr = function (t, e) {
      var r = t || 0;
      Object.defineProperty(this, "x", {
        enumerable: !0,
        get: function () {
          return r;
        },
        set: function (t) {
          isNaN(t) || (r = parseFloat(t));
        }
      });
      var n = e || 0;
      Object.defineProperty(this, "y", {
        enumerable: !0,
        get: function () {
          return n;
        },
        set: function (t) {
          isNaN(t) || (n = parseFloat(t));
        }
      });
      var i = "pt";
      return Object.defineProperty(this, "type", {
        enumerable: !0,
        get: function () {
          return i;
        },
        set: function (t) {
          i = t.toString();
        }
      }), this;
    },
    jr = function (t, e, r, n) {
      Cr.call(this, t, e), this.type = "rect";
      var i = r || 0;
      Object.defineProperty(this, "w", {
        enumerable: !0,
        get: function () {
          return i;
        },
        set: function (t) {
          isNaN(t) || (i = parseFloat(t));
        }
      });
      var a = n || 0;
      return Object.defineProperty(this, "h", {
        enumerable: !0,
        get: function () {
          return a;
        },
        set: function (t) {
          isNaN(t) || (a = parseFloat(t));
        }
      }), this;
    },
    Or = function () {
      this.page = Dt, this.currentPage = $, this.pages = ot.slice(0), this.pagesContext = Rt.slice(0), this.x = Pt, this.y = kt, this.matrix = It, this.width = qr($), this.height = Rr($), this.outputDestination = ct, this.id = "", this.objectNumber = -1;
    };
  Or.prototype.restore = function () {
    Dt = this.page, $ = this.currentPage, Rt = this.pagesContext, ot = this.pages, Pt = this.x, kt = this.y, It = this.matrix, Dr($, this.width), Tr($, this.height), ct = this.outputDestination;
  };
  var Br = function (t, e, r, n, i) {
      Wt.push(new Or()), Dt = $ = 0, ot = [], Pt = t, kt = e, It = i, je([r, n]);
    },
    Mr = function (t) {
      if (Ht[t]) Wt.pop().restore();else {
        var e = new Or(),
          r = "Xo" + (Object.keys(zt).length + 1).toString(10);
        e.id = r, Ht[t] = r, zt[r] = e, Tt.publish("addFormObject", e), Wt.pop().restore();
      }
    };
  for (var Er in y.beginFormObject = function (t, e, r, n, i) {
    return Br(t, e, r, n, i), this;
  }, y.endFormObject = function (t) {
    return Mr(t), this;
  }, y.doFormObject = function (t, e) {
    var r = zt[Ht[t]];
    return lt("q"), lt(e.toString() + " cm"), lt("/" + r.id + " Do"), lt("Q"), this;
  }, y.getFormObject = function (t) {
    var e = zt[Ht[t]];
    return {
      x: e.x,
      y: e.y,
      width: e.width,
      height: e.height,
      matrix: e.matrix
    };
  }, y.save = function (t, e) {
    return t = t || "generated.pdf", (e = e || {}).returnPromise = e.returnPromise || !1, !1 === e.returnPromise ? (l(We(He()), t), "function" == typeof l.unload && n.setTimeout && setTimeout(l.unload, 911), this) : new Promise(function (e, r) {
      try {
        var i = l(We(He()), t);
        "function" == typeof l.unload && n.setTimeout && setTimeout(l.unload, 911), e(i);
      } catch (t) {
        r(t.message);
      }
    });
  }, E.API) E.API.hasOwnProperty(Er) && ("events" === Er && E.API.events.length ? function (t, e) {
    var r, n, i;
    for (i = e.length - 1; -1 !== i; i--) r = e[i][0], n = e[i][1], t.subscribe.apply(t, [r].concat("function" == typeof n ? [n] : n));
  }(Tt, E.API.events) : y[Er] = E.API[Er]);
  var qr = y.getPageWidth = function (t) {
      return (Rt[t = t || $].mediaBox.topRightX - Rt[t].mediaBox.bottomLeftX) / _t;
    },
    Dr = y.setPageWidth = function (t, e) {
      Rt[t].mediaBox.topRightX = e * _t + Rt[t].mediaBox.bottomLeftX;
    },
    Rr = y.getPageHeight = function (t) {
      return (Rt[t = t || $].mediaBox.topRightY - Rt[t].mediaBox.bottomLeftY) / _t;
    },
    Tr = y.setPageHeight = function (t, e) {
      Rt[t].mediaBox.topRightY = e * _t + Rt[t].mediaBox.bottomLeftY;
    };
  return y.internal = {
    pdfEscape: Ce,
    getStyle: tr,
    getFont: hr,
    getFontSize: vt,
    getCharSpace: Pr,
    getTextColor: Sr,
    getLineHeight: gr,
    getLineHeightFactor: vr,
    getLineWidth: dr,
    write: ft,
    getHorizontalCoordinate: br,
    getVerticalCoordinate: yr,
    getCoordinateString: wr,
    getVerticalCoordinateString: Nr,
    collections: {},
    newObject: Xt,
    newAdditionalObject: $t,
    newObjectDeferred: Kt,
    newObjectDeferredBegin: Zt,
    getFilters: ne,
    putStream: ie,
    events: Tt,
    scaleFactor: _t,
    pageSize: {
      getWidth: function () {
        return qr($);
      },
      setWidth: function (t) {
        Dr($, t);
      },
      getHeight: function () {
        return Rr($);
      },
      setHeight: function (t) {
        Tr($, t);
      }
    },
    encryptionOptions: m,
    encryption: Ye,
    getEncryptor: Je,
    output: Ve,
    getNumberOfPages: Ee,
    pages: ot,
    out: lt,
    f2: R,
    f3: T,
    getPageInfo: Xe,
    getPageInfoByObjId: Ke,
    getCurrentPageInfo: Ze,
    getPDFVersion: N,
    Point: Cr,
    Rectangle: jr,
    Matrix: Vt,
    hasHotfix: Ge
  }, Object.defineProperty(y.internal.pageSize, "width", {
    get: function () {
      return qr($);
    },
    set: function (t) {
      Dr($, t);
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(y.internal.pageSize, "height", {
    get: function () {
      return Rr($);
    },
    set: function (t) {
      Tr($, t);
    },
    enumerable: !0,
    configurable: !0
  }), ke.call(y, pt), St = "F1", Oe(s, i), Tt.publish("initialized"), y;
}
I.prototype.lsbFirstWord = function (t) {
  return String.fromCharCode(t >> 0 & 255, t >> 8 & 255, t >> 16 & 255, t >> 24 & 255);
}, I.prototype.toHexString = function (t) {
  return t.split("").map(function (t) {
    return ("0" + (255 & t.charCodeAt(0)).toString(16)).slice(-2);
  }).join("");
}, I.prototype.hexToBytes = function (t) {
  for (var e = [], r = 0; r < t.length; r += 2) e.push(String.fromCharCode(parseInt(t.substr(r, 2), 16)));
  return e.join("");
}, I.prototype.processOwnerPassword = function (t, e) {
  return P(x(e).substr(0, 5), t);
}, I.prototype.encryptor = function (t, e) {
  var r = x(this.encryptionKey + String.fromCharCode(255 & t, t >> 8 & 255, t >> 16 & 255, 255 & e, e >> 8 & 255)).substr(0, 10);
  return function (t) {
    return P(r, t);
  };
}, j.prototype.equals = function (e) {
  var r,
    n = "id,objectNumber,equals";
  if (!e || (0, _typeof.default)(e) !== (0, _typeof.default)(this)) return !1;
  var i = 0;
  for (r in this) if (!(n.indexOf(r) >= 0)) {
    if (this.hasOwnProperty(r) && !e.hasOwnProperty(r)) return !1;
    if (this[r] !== e[r]) return !1;
    i++;
  }
  for (r in e) e.hasOwnProperty(r) && n.indexOf(r) < 0 && i--;
  return 0 === i;
}, E.API = {
  events: []
}, E.version = "2.5.1";
var q = E.API,
  D = 1,
  R = function (t) {
    return t.replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
  },
  T = function (t) {
    return t.replace(/\\\\/g, "\\").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
  },
  U = function (t) {
    return t.toFixed(2);
  },
  z = function (t) {
    return t.toFixed(5);
  };
q.__acroform__ = {};
var H = function (t, e) {
    t.prototype = Object.create(e.prototype), t.prototype.constructor = t;
  },
  W = function (t) {
    return t * D;
  },
  V = function (t) {
    var e = new ut(),
      r = At.internal.getHeight(t) || 0,
      n = At.internal.getWidth(t) || 0;
    return e.BBox = [0, 0, Number(U(n)), Number(U(r))], e;
  },
  G = q.__acroform__.setBit = function (t, e) {
    if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");
    return t |= 1 << e;
  },
  Y = q.__acroform__.clearBit = function (t, e) {
    if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");
    return t &= ~(1 << e);
  },
  J = q.__acroform__.getBit = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");
    return 0 == (t & 1 << e) ? 0 : 1;
  },
  X = q.__acroform__.getBitForPdf = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");
    return J(t, e - 1);
  },
  K = q.__acroform__.setBitForPdf = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");
    return G(t, e - 1);
  },
  Z = q.__acroform__.clearBitForPdf = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");
    return Y(t, e - 1);
  },
  $ = q.__acroform__.calculateCoordinates = function (t, e) {
    var r = e.internal.getHorizontalCoordinate,
      n = e.internal.getVerticalCoordinate,
      i = t[0],
      a = t[1],
      o = t[2],
      s = t[3],
      c = {};
    return c.lowerLeft_X = r(i) || 0, c.lowerLeft_Y = n(a + s) || 0, c.upperRight_X = r(i + o) || 0, c.upperRight_Y = n(a) || 0, [Number(U(c.lowerLeft_X)), Number(U(c.lowerLeft_Y)), Number(U(c.upperRight_X)), Number(U(c.upperRight_Y))];
  },
  Q = function (t) {
    if (t.appearanceStreamContent) return t.appearanceStreamContent;
    if (t.V || t.DV) {
      var e = [],
        r = t._V || t.DV,
        n = tt(t, r),
        i = t.scope.internal.getFont(t.fontName, t.fontStyle).id;
      e.push("/Tx BMC"), e.push("q"), e.push("BT"), e.push(t.scope.__private__.encodeColorString(t.color)), e.push("/" + i + " " + U(n.fontSize) + " Tf"), e.push("1 0 0 1 0 0 Tm"), e.push(n.text), e.push("ET"), e.push("Q"), e.push("EMC");
      var a = V(t);
      return a.scope = t.scope, a.stream = e.join("\n"), a;
    }
  },
  tt = function (t, e) {
    var r = 0 === t.fontSize ? t.maxFontSize : t.fontSize,
      n = {
        text: "",
        fontSize: ""
      },
      i = (e = ")" == (e = "(" == e.substr(0, 1) ? e.substr(1) : e).substr(e.length - 1) ? e.substr(0, e.length - 1) : e).split(" ");
    i = t.multiline ? i.map(function (t) {
      return t.split("\n");
    }) : i.map(function (t) {
      return [t];
    });
    var a = r,
      o = At.internal.getHeight(t) || 0;
    o = o < 0 ? -o : o;
    var s = At.internal.getWidth(t) || 0;
    s = s < 0 ? -s : s;
    var c = function (e, r, n) {
      if (e + 1 < i.length) {
        var a = r + " " + i[e + 1][0];
        return et(a, t, n).width <= s - 4;
      }
      return !1;
    };
    a++;
    t: for (; a > 0;) {
      e = "", a--;
      var u,
        h,
        l = et("3", t, a).height,
        f = t.multiline ? o - a : (o - l) / 2,
        d = f += 2,
        p = 0,
        g = 0,
        m = 0;
      if (a <= 0) {
        e = "(...) Tj\n", e += "% Width of Text: " + et(e, t, a = 12).width + ", FieldWidth:" + s + "\n";
        break;
      }
      for (var v = "", b = 0, y = 0; y < i.length; y++) if (i.hasOwnProperty(y)) {
        var w = !1;
        if (1 !== i[y].length && m !== i[y].length - 1) {
          if ((l + 2) * (b + 2) + 2 > o) continue t;
          v += i[y][m], w = !0, g = y, y--;
        } else {
          v = " " == (v += i[y][m] + " ").substr(v.length - 1) ? v.substr(0, v.length - 1) : v;
          var N = parseInt(y),
            L = c(N, v, a),
            A = y >= i.length - 1;
          if (L && !A) {
            v += " ", m = 0;
            continue;
          }
          if (L || A) {
            if (A) g = N;else if (t.multiline && (l + 2) * (b + 2) + 2 > o) continue t;
          } else {
            if (!t.multiline) continue t;
            if ((l + 2) * (b + 2) + 2 > o) continue t;
            g = N;
          }
        }
        for (var x = "", S = p; S <= g; S++) {
          var _ = i[S];
          if (t.multiline) {
            if (S === g) {
              x += _[m] + " ", m = (m + 1) % _.length;
              continue;
            }
            if (S === p) {
              x += _[_.length - 1] + " ";
              continue;
            }
          }
          x += _[0] + " ";
        }
        switch (x = " " == x.substr(x.length - 1) ? x.substr(0, x.length - 1) : x, h = et(x, t, a).width, t.textAlign) {
          case "right":
            u = s - h - 2;
            break;
          case "center":
            u = (s - h) / 2;
            break;
          case "left":
          default:
            u = 2;
        }
        e += U(u) + " " + U(d) + " Td\n", e += "(" + R(x) + ") Tj\n", e += -U(u) + " 0 Td\n", d = -(a + 2), h = 0, p = w ? g : g + 1, b++, v = "";
      } else ;
      break;
    }
    return n.text = e, n.fontSize = a, n;
  },
  et = function (t, e, r) {
    var n = e.scope.internal.getFont(e.fontName, e.fontStyle),
      i = e.scope.getStringUnitWidth(t, {
        font: n,
        fontSize: parseFloat(r),
        charSpace: 0
      }) * parseFloat(r);
    return {
      height: e.scope.getStringUnitWidth("3", {
        font: n,
        fontSize: parseFloat(r),
        charSpace: 0
      }) * parseFloat(r) * 1.5,
      width: i
    };
  },
  rt = {
    fields: [],
    xForms: [],
    acroFormDictionaryRoot: null,
    printedOut: !1,
    internal: null,
    isInitialized: !1
  },
  nt = function (t, e) {
    var r = {
      type: "reference",
      object: t
    };
    void 0 === e.internal.getPageInfo(t.page).pageContext.annotations.find(function (t) {
      return t.type === r.type && t.object === r.object;
    }) && e.internal.getPageInfo(t.page).pageContext.annotations.push(r);
  },
  it = function (e, r) {
    for (var n in e) if (e.hasOwnProperty(n)) {
      var i = n,
        a = e[n];
      r.internal.newObjectDeferredBegin(a.objId, !0), "object" === (0, _typeof.default)(a) && "function" == typeof a.putStream && a.putStream(), delete e[i];
    }
  },
  at = function (e, r) {
    if (r.scope = e, void 0 !== e.internal && (void 0 === e.internal.acroformPlugin || !1 === e.internal.acroformPlugin.isInitialized)) {
      if (lt.FieldNum = 0, e.internal.acroformPlugin = JSON.parse(JSON.stringify(rt)), e.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("Exception while creating AcroformDictionary");
      D = e.internal.scaleFactor, e.internal.acroformPlugin.acroFormDictionaryRoot = new ht(), e.internal.acroformPlugin.acroFormDictionaryRoot.scope = e, e.internal.acroformPlugin.acroFormDictionaryRoot._eventID = e.internal.events.subscribe("postPutResources", function () {
        !function (t) {
          t.internal.events.unsubscribe(t.internal.acroformPlugin.acroFormDictionaryRoot._eventID), delete t.internal.acroformPlugin.acroFormDictionaryRoot._eventID, t.internal.acroformPlugin.printedOut = !0;
        }(e);
      }), e.internal.events.subscribe("buildDocument", function () {
        !function (t) {
          t.internal.acroformPlugin.acroFormDictionaryRoot.objId = void 0;
          var e = t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;
          for (var r in e) if (e.hasOwnProperty(r)) {
            var n = e[r];
            n.objId = void 0, n.hasAnnotation && nt(n, t);
          }
        }(e);
      }), e.internal.events.subscribe("putCatalog", function () {
        !function (t) {
          if (void 0 === t.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("putCatalogCallback: Root missing.");
          t.internal.write("/AcroForm " + t.internal.acroformPlugin.acroFormDictionaryRoot.objId + " 0 R");
        }(e);
      }), e.internal.events.subscribe("postPutPages", function (r) {
        !function (e, r) {
          var n = !e;
          for (var i in e || (r.internal.newObjectDeferredBegin(r.internal.acroformPlugin.acroFormDictionaryRoot.objId, !0), r.internal.acroformPlugin.acroFormDictionaryRoot.putStream()), e = e || r.internal.acroformPlugin.acroFormDictionaryRoot.Kids) if (e.hasOwnProperty(i)) {
            var a = e[i],
              o = [],
              s = a.Rect;
            if (a.Rect && (a.Rect = $(a.Rect, r)), r.internal.newObjectDeferredBegin(a.objId, !0), a.DA = At.createDefaultAppearanceStream(a), "object" === (0, _typeof.default)(a) && "function" == typeof a.getKeyValueListForStream && (o = a.getKeyValueListForStream()), a.Rect = s, a.hasAppearanceStream && !a.appearanceStreamContent) {
              var c = Q(a);
              o.push({
                key: "AP",
                value: "<</N " + c + ">>"
              }), r.internal.acroformPlugin.xForms.push(c);
            }
            if (a.appearanceStreamContent) {
              var u = "";
              for (var h in a.appearanceStreamContent) if (a.appearanceStreamContent.hasOwnProperty(h)) {
                var l = a.appearanceStreamContent[h];
                if (u += "/" + h + " ", u += "<<", Object.keys(l).length >= 1 || Array.isArray(l)) {
                  for (var i in l) if (l.hasOwnProperty(i)) {
                    var f = l[i];
                    "function" == typeof f && (f = f.call(r, a)), u += "/" + i + " " + f + " ", r.internal.acroformPlugin.xForms.indexOf(f) >= 0 || r.internal.acroformPlugin.xForms.push(f);
                  }
                } else "function" == typeof (f = l) && (f = f.call(r, a)), u += "/" + i + " " + f, r.internal.acroformPlugin.xForms.indexOf(f) >= 0 || r.internal.acroformPlugin.xForms.push(f);
                u += ">>";
              }
              o.push({
                key: "AP",
                value: "<<\n" + u + ">>"
              });
            }
            r.internal.putStream({
              additionalKeyValues: o,
              objectId: a.objId
            }), r.internal.out("endobj");
          }
          n && it(r.internal.acroformPlugin.xForms, r);
        }(r, e);
      }), e.internal.acroformPlugin.isInitialized = !0;
    }
  },
  ot = q.__acroform__.arrayToPdfArray = function (e, r, n) {
    var i = function (t) {
      return t;
    };
    if (Array.isArray(e)) {
      for (var a = "[", o = 0; o < e.length; o++) switch (0 !== o && (a += " "), (0, _typeof.default)(e[o])) {
        case "boolean":
        case "number":
        case "object":
          a += e[o].toString();
          break;
        case "string":
          "/" !== e[o].substr(0, 1) ? (void 0 !== r && n && (i = n.internal.getEncryptor(r)), a += "(" + R(i(e[o].toString())) + ")") : a += e[o].toString();
      }
      return a += "]";
    }
    throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray");
  };
var st = function (t, e, r) {
    var n = function (t) {
      return t;
    };
    return void 0 !== e && r && (n = r.internal.getEncryptor(e)), (t = t || "").toString(), t = "(" + R(n(t)) + ")";
  },
  ct = function () {
    this._objId = void 0, this._scope = void 0, Object.defineProperty(this, "objId", {
      get: function () {
        if (void 0 === this._objId) {
          if (void 0 === this.scope) return;
          this._objId = this.scope.internal.newObjectDeferred();
        }
        return this._objId;
      },
      set: function (t) {
        this._objId = t;
      }
    }), Object.defineProperty(this, "scope", {
      value: this._scope,
      writable: !0
    });
  };
ct.prototype.toString = function () {
  return this.objId + " 0 R";
}, ct.prototype.putStream = function () {
  var t = this.getKeyValueListForStream();
  this.scope.internal.putStream({
    data: this.stream,
    additionalKeyValues: t,
    objectId: this.objId
  }), this.scope.internal.out("endobj");
}, ct.prototype.getKeyValueListForStream = function () {
  var t = [],
    e = Object.getOwnPropertyNames(this).filter(function (t) {
      return "content" != t && "appearanceStreamContent" != t && "scope" != t && "objId" != t && "_" != t.substring(0, 1);
    });
  for (var r in e) if (!1 === Object.getOwnPropertyDescriptor(this, e[r]).configurable) {
    var n = e[r],
      i = this[n];
    i && (Array.isArray(i) ? t.push({
      key: n,
      value: ot(i, this.objId, this.scope)
    }) : i instanceof ct ? (i.scope = this.scope, t.push({
      key: n,
      value: i.objId + " 0 R"
    })) : "function" != typeof i && t.push({
      key: n,
      value: i
    }));
  }
  return t;
};
var ut = function () {
  ct.call(this), Object.defineProperty(this, "Type", {
    value: "/XObject",
    configurable: !1,
    writable: !0
  }), Object.defineProperty(this, "Subtype", {
    value: "/Form",
    configurable: !1,
    writable: !0
  }), Object.defineProperty(this, "FormType", {
    value: 1,
    configurable: !1,
    writable: !0
  });
  var t,
    e = [];
  Object.defineProperty(this, "BBox", {
    configurable: !1,
    get: function () {
      return e;
    },
    set: function (t) {
      e = t;
    }
  }), Object.defineProperty(this, "Resources", {
    value: "2 0 R",
    configurable: !1,
    writable: !0
  }), Object.defineProperty(this, "stream", {
    enumerable: !1,
    configurable: !0,
    set: function (e) {
      t = e.trim();
    },
    get: function () {
      return t || null;
    }
  });
};
H(ut, ct);
var ht = function () {
  ct.call(this);
  var t,
    e = [];
  Object.defineProperty(this, "Kids", {
    enumerable: !1,
    configurable: !0,
    get: function () {
      return e.length > 0 ? e : void 0;
    }
  }), Object.defineProperty(this, "Fields", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return e;
    }
  }), Object.defineProperty(this, "DA", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (t) {
        var e = function (t) {
          return t;
        };
        return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), "(" + R(e(t)) + ")";
      }
    },
    set: function (e) {
      t = e;
    }
  });
};
H(ht, ct);
var lt = function t() {
  ct.call(this);
  var e = 4;
  Object.defineProperty(this, "F", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return e;
    },
    set: function (t) {
      if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute F supplied.');
      e = t;
    }
  }), Object.defineProperty(this, "showWhenPrinted", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(e, 3));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.F = K(e, 3) : this.F = Z(e, 3);
    }
  });
  var r = 0;
  Object.defineProperty(this, "Ff", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return r;
    },
    set: function (t) {
      if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute Ff supplied.');
      r = t;
    }
  });
  var n = [];
  Object.defineProperty(this, "Rect", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (0 !== n.length) return n;
    },
    set: function (t) {
      n = void 0 !== t ? t : [];
    }
  }), Object.defineProperty(this, "x", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !n || isNaN(n[0]) ? 0 : n[0];
    },
    set: function (t) {
      n[0] = t;
    }
  }), Object.defineProperty(this, "y", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !n || isNaN(n[1]) ? 0 : n[1];
    },
    set: function (t) {
      n[1] = t;
    }
  }), Object.defineProperty(this, "width", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !n || isNaN(n[2]) ? 0 : n[2];
    },
    set: function (t) {
      n[2] = t;
    }
  }), Object.defineProperty(this, "height", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !n || isNaN(n[3]) ? 0 : n[3];
    },
    set: function (t) {
      n[3] = t;
    }
  });
  var i = "";
  Object.defineProperty(this, "FT", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return i;
    },
    set: function (t) {
      switch (t) {
        case "/Btn":
        case "/Tx":
        case "/Ch":
        case "/Sig":
          i = t;
          break;
        default:
          throw new Error('Invalid value "' + t + '" for attribute FT supplied.');
      }
    }
  });
  var a = null;
  Object.defineProperty(this, "T", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      if (!a || a.length < 1) {
        if (this instanceof yt) return;
        a = "FieldObject" + t.FieldNum++;
      }
      var e = function (t) {
        return t;
      };
      return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), "(" + R(e(a)) + ")";
    },
    set: function (t) {
      a = t.toString();
    }
  }), Object.defineProperty(this, "fieldName", {
    configurable: !0,
    enumerable: !0,
    get: function () {
      return a;
    },
    set: function (t) {
      a = t;
    }
  });
  var o = "helvetica";
  Object.defineProperty(this, "fontName", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return o;
    },
    set: function (t) {
      o = t;
    }
  });
  var s = "normal";
  Object.defineProperty(this, "fontStyle", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return s;
    },
    set: function (t) {
      s = t;
    }
  });
  var c = 0;
  Object.defineProperty(this, "fontSize", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return c;
    },
    set: function (t) {
      c = t;
    }
  });
  var u = void 0;
  Object.defineProperty(this, "maxFontSize", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return void 0 === u ? 50 / D : u;
    },
    set: function (t) {
      u = t;
    }
  });
  var h = "black";
  Object.defineProperty(this, "color", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return h;
    },
    set: function (t) {
      h = t;
    }
  });
  var l = "/F1 0 Tf 0 g";
  Object.defineProperty(this, "DA", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      if (!(!l || this instanceof yt || this instanceof Nt)) return st(l, this.objId, this.scope);
    },
    set: function (t) {
      t = t.toString(), l = t;
    }
  });
  var f = null;
  Object.defineProperty(this, "DV", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (f) return this instanceof mt == !1 ? st(f, this.objId, this.scope) : f;
    },
    set: function (t) {
      t = t.toString(), f = this instanceof mt == !1 ? "(" === t.substr(0, 1) ? T(t.substr(1, t.length - 2)) : T(t) : t;
    }
  }), Object.defineProperty(this, "defaultValue", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this instanceof mt == !0 ? T(f.substr(1, f.length - 1)) : f;
    },
    set: function (t) {
      t = t.toString(), f = this instanceof mt == !0 ? "/" + t : t;
    }
  });
  var d = null;
  Object.defineProperty(this, "_V", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (d) return d;
    },
    set: function (t) {
      this.V = t;
    }
  }), Object.defineProperty(this, "V", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (d) return this instanceof mt == !1 ? st(d, this.objId, this.scope) : d;
    },
    set: function (t) {
      t = t.toString(), d = this instanceof mt == !1 ? "(" === t.substr(0, 1) ? T(t.substr(1, t.length - 2)) : T(t) : t;
    }
  }), Object.defineProperty(this, "value", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this instanceof mt == !0 ? T(d.substr(1, d.length - 1)) : d;
    },
    set: function (t) {
      t = t.toString(), d = this instanceof mt == !0 ? "/" + t : t;
    }
  }), Object.defineProperty(this, "hasAnnotation", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this.Rect;
    }
  }), Object.defineProperty(this, "Type", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return this.hasAnnotation ? "/Annot" : null;
    }
  }), Object.defineProperty(this, "Subtype", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return this.hasAnnotation ? "/Widget" : null;
    }
  });
  var p,
    g = !1;
  Object.defineProperty(this, "hasAppearanceStream", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return g;
    },
    set: function (t) {
      t = Boolean(t), g = t;
    }
  }), Object.defineProperty(this, "page", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      if (p) return p;
    },
    set: function (t) {
      p = t;
    }
  }), Object.defineProperty(this, "readOnly", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 1));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 1) : this.Ff = Z(this.Ff, 1);
    }
  }), Object.defineProperty(this, "required", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 2));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 2) : this.Ff = Z(this.Ff, 2);
    }
  }), Object.defineProperty(this, "noExport", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 3));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 3) : this.Ff = Z(this.Ff, 3);
    }
  });
  var m = null;
  Object.defineProperty(this, "Q", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      if (null !== m) return m;
    },
    set: function (t) {
      if (-1 === [0, 1, 2].indexOf(t)) throw new Error('Invalid value "' + t + '" for attribute Q supplied.');
      m = t;
    }
  }), Object.defineProperty(this, "textAlign", {
    get: function () {
      var t;
      switch (m) {
        case 0:
        default:
          t = "left";
          break;
        case 1:
          t = "center";
          break;
        case 2:
          t = "right";
      }
      return t;
    },
    configurable: !0,
    enumerable: !0,
    set: function (t) {
      switch (t) {
        case "right":
        case 2:
          m = 2;
          break;
        case "center":
        case 1:
          m = 1;
          break;
        case "left":
        case 0:
        default:
          m = 0;
      }
    }
  });
};
H(lt, ct);
var ft = function () {
  lt.call(this), this.FT = "/Ch", this.V = "()", this.fontName = "zapfdingbats";
  var t = 0;
  Object.defineProperty(this, "TI", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  }), Object.defineProperty(this, "topIndex", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  });
  var e = [];
  Object.defineProperty(this, "Opt", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return ot(e, this.objId, this.scope);
    },
    set: function (t) {
      var r, n;
      n = [], "string" == typeof (r = t) && (n = function (t, e, r) {
        r || (r = 1);
        for (var n, i = []; n = e.exec(t);) i.push(n[r]);
        return i;
      }(r, /\((.*?)\)/g)), e = n;
    }
  }), this.getOptions = function () {
    return e;
  }, this.setOptions = function (t) {
    e = t, this.sort && e.sort();
  }, this.addOption = function (t) {
    t = (t = t || "").toString(), e.push(t), this.sort && e.sort();
  }, this.removeOption = function (t, r) {
    for (r = r || !1, t = (t = t || "").toString(); -1 !== e.indexOf(t) && (e.splice(e.indexOf(t), 1), !1 !== r););
  }, Object.defineProperty(this, "combo", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 18));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 18) : this.Ff = Z(this.Ff, 18);
    }
  }), Object.defineProperty(this, "edit", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 19));
    },
    set: function (t) {
      !0 === this.combo && (!0 === Boolean(t) ? this.Ff = K(this.Ff, 19) : this.Ff = Z(this.Ff, 19));
    }
  }), Object.defineProperty(this, "sort", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 20));
    },
    set: function (t) {
      !0 === Boolean(t) ? (this.Ff = K(this.Ff, 20), e.sort()) : this.Ff = Z(this.Ff, 20);
    }
  }), Object.defineProperty(this, "multiSelect", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 22));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 22) : this.Ff = Z(this.Ff, 22);
    }
  }), Object.defineProperty(this, "doNotSpellCheck", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 23));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 23) : this.Ff = Z(this.Ff, 23);
    }
  }), Object.defineProperty(this, "commitOnSelChange", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 27));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 27) : this.Ff = Z(this.Ff, 27);
    }
  }), this.hasAppearanceStream = !1;
};
exports.AcroFormChoiceField = ft;
H(ft, lt);
var dt = function () {
  ft.call(this), this.fontName = "helvetica", this.combo = !1;
};
exports.AcroFormListBox = dt;
H(dt, ft);
var pt = function () {
  dt.call(this), this.combo = !0;
};
exports.AcroFormComboBox = pt;
H(pt, dt);
var gt = function () {
  pt.call(this), this.edit = !0;
};
exports.AcroFormEditBox = gt;
H(gt, pt);
var mt = function () {
  lt.call(this), this.FT = "/Btn", Object.defineProperty(this, "noToggleToOff", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 15));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 15) : this.Ff = Z(this.Ff, 15);
    }
  }), Object.defineProperty(this, "radio", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 16));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 16) : this.Ff = Z(this.Ff, 16);
    }
  }), Object.defineProperty(this, "pushButton", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 17));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 17) : this.Ff = Z(this.Ff, 17);
    }
  }), Object.defineProperty(this, "radioIsUnison", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 26));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 26) : this.Ff = Z(this.Ff, 26);
    }
  });
  var e,
    r = {};
  Object.defineProperty(this, "MK", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      var t = function (t) {
        return t;
      };
      if (this.scope && (t = this.scope.internal.getEncryptor(this.objId)), 0 !== Object.keys(r).length) {
        var e,
          n = [];
        for (e in n.push("<<"), r) n.push("/" + e + " (" + R(t(r[e])) + ")");
        return n.push(">>"), n.join("\n");
      }
    },
    set: function (e) {
      "object" === (0, _typeof.default)(e) && (r = e);
    }
  }), Object.defineProperty(this, "caption", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return r.CA || "";
    },
    set: function (t) {
      "string" == typeof t && (r.CA = t);
    }
  }), Object.defineProperty(this, "AS", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return e;
    },
    set: function (t) {
      e = t;
    }
  }), Object.defineProperty(this, "appearanceState", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return e.substr(1, e.length - 1);
    },
    set: function (t) {
      e = "/" + t;
    }
  });
};
exports.AcroFormButton = mt;
H(mt, lt);
var vt = function () {
  mt.call(this), this.pushButton = !0;
};
exports.AcroFormPushButton = vt;
H(vt, mt);
var bt = function () {
  mt.call(this), this.radio = !0, this.pushButton = !1;
  var t = [];
  Object.defineProperty(this, "Kids", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = void 0 !== e ? e : [];
    }
  });
};
exports.AcroFormRadioButton = bt;
H(bt, mt);
var yt = function () {
  var e, r;
  lt.call(this), Object.defineProperty(this, "Parent", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return e;
    },
    set: function (t) {
      e = t;
    }
  }), Object.defineProperty(this, "optionName", {
    enumerable: !1,
    configurable: !0,
    get: function () {
      return r;
    },
    set: function (t) {
      r = t;
    }
  });
  var n,
    i = {};
  Object.defineProperty(this, "MK", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      var t = function (t) {
        return t;
      };
      this.scope && (t = this.scope.internal.getEncryptor(this.objId));
      var e,
        r = [];
      for (e in r.push("<<"), i) r.push("/" + e + " (" + R(t(i[e])) + ")");
      return r.push(">>"), r.join("\n");
    },
    set: function (e) {
      "object" === (0, _typeof.default)(e) && (i = e);
    }
  }), Object.defineProperty(this, "caption", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return i.CA || "";
    },
    set: function (t) {
      "string" == typeof t && (i.CA = t);
    }
  }), Object.defineProperty(this, "AS", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return n;
    },
    set: function (t) {
      n = t;
    }
  }), Object.defineProperty(this, "appearanceState", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return n.substr(1, n.length - 1);
    },
    set: function (t) {
      n = "/" + t;
    }
  }), this.caption = "l", this.appearanceState = "Off", this._AppearanceType = At.RadioButton.Circle, this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(this.optionName);
};
H(yt, lt), bt.prototype.setAppearance = function (t) {
  if (!("createAppearanceStream" in t) || !("getCA" in t)) throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");
  for (var e in this.Kids) if (this.Kids.hasOwnProperty(e)) {
    var r = this.Kids[e];
    r.appearanceStreamContent = t.createAppearanceStream(r.optionName), r.caption = t.getCA();
  }
}, bt.prototype.createOption = function (t) {
  var e = new yt();
  return e.Parent = this, e.optionName = t, this.Kids.push(e), xt.call(this.scope, e), e;
};
var wt = function () {
  mt.call(this), this.fontName = "zapfdingbats", this.caption = "3", this.appearanceState = "On", this.value = "On", this.textAlign = "center", this.appearanceStreamContent = At.CheckBox.createAppearanceStream();
};
exports.AcroFormCheckBox = wt;
H(wt, mt);
var Nt = function () {
  lt.call(this), this.FT = "/Tx", Object.defineProperty(this, "multiline", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 13));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 13) : this.Ff = Z(this.Ff, 13);
    }
  }), Object.defineProperty(this, "fileSelect", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 21));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 21) : this.Ff = Z(this.Ff, 21);
    }
  }), Object.defineProperty(this, "doNotSpellCheck", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 23));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 23) : this.Ff = Z(this.Ff, 23);
    }
  }), Object.defineProperty(this, "doNotScroll", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 24));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 24) : this.Ff = Z(this.Ff, 24);
    }
  }), Object.defineProperty(this, "comb", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 25));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 25) : this.Ff = Z(this.Ff, 25);
    }
  }), Object.defineProperty(this, "richText", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 26));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 26) : this.Ff = Z(this.Ff, 26);
    }
  });
  var t = null;
  Object.defineProperty(this, "MaxLen", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  }), Object.defineProperty(this, "maxLength", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return t;
    },
    set: function (e) {
      Number.isInteger(e) && (t = e);
    }
  }), Object.defineProperty(this, "hasAppearanceStream", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this.V || this.DV;
    }
  });
};
exports.AcroFormTextField = Nt;
H(Nt, lt);
var Lt = function () {
  Nt.call(this), Object.defineProperty(this, "password", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 14));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 14) : this.Ff = Z(this.Ff, 14);
    }
  }), this.password = !0;
};
exports.AcroFormPasswordField = Lt;
H(Lt, Nt);
var At = {
  CheckBox: {
    createAppearanceStream: function () {
      return {
        N: {
          On: At.CheckBox.YesNormal
        },
        D: {
          On: At.CheckBox.YesPushDown,
          Off: At.CheckBox.OffPushDown
        }
      };
    },
    YesPushDown: function (t) {
      var e = V(t);
      e.scope = t.scope;
      var r = [],
        n = t.scope.internal.getFont(t.fontName, t.fontStyle).id,
        i = t.scope.__private__.encodeColorString(t.color),
        a = tt(t, t.caption);
      return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), r.push("BMC"), r.push("q"), r.push("0 0 1 rg"), r.push("/" + n + " " + U(a.fontSize) + " Tf " + i), r.push("BT"), r.push(a.text), r.push("ET"), r.push("Q"), r.push("EMC"), e.stream = r.join("\n"), e;
    },
    YesNormal: function (t) {
      var e = V(t);
      e.scope = t.scope;
      var r = t.scope.internal.getFont(t.fontName, t.fontStyle).id,
        n = t.scope.__private__.encodeColorString(t.color),
        i = [],
        a = At.internal.getHeight(t),
        o = At.internal.getWidth(t),
        s = tt(t, t.caption);
      return i.push("1 g"), i.push("0 0 " + U(o) + " " + U(a) + " re"), i.push("f"), i.push("q"), i.push("0 0 1 rg"), i.push("0 0 " + U(o - 1) + " " + U(a - 1) + " re"), i.push("W"), i.push("n"), i.push("0 g"), i.push("BT"), i.push("/" + r + " " + U(s.fontSize) + " Tf " + n), i.push(s.text), i.push("ET"), i.push("Q"), e.stream = i.join("\n"), e;
    },
    OffPushDown: function (t) {
      var e = V(t);
      e.scope = t.scope;
      var r = [];
      return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), e.stream = r.join("\n"), e;
    }
  },
  RadioButton: {
    Circle: {
      createAppearanceStream: function (t) {
        var e = {
          D: {
            Off: At.RadioButton.Circle.OffPushDown
          },
          N: {}
        };
        return e.N[t] = At.RadioButton.Circle.YesNormal, e.D[t] = At.RadioButton.Circle.YesPushDown, e;
      },
      getCA: function () {
        return "l";
      },
      YesNormal: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = [],
          n = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
        n = Number((.9 * n).toFixed(5));
        var i = At.internal.Bezier_C,
          a = Number((n * i).toFixed(5));
        return r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(n + " 0 m"), r.push(n + " " + a + " " + a + " " + n + " 0 " + n + " c"), r.push("-" + a + " " + n + " -" + n + " " + a + " -" + n + " 0 c"), r.push("-" + n + " -" + a + " -" + a + " -" + n + " 0 -" + n + " c"), r.push(a + " -" + n + " " + n + " -" + a + " " + n + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
      },
      YesPushDown: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = [],
          n = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
        n = Number((.9 * n).toFixed(5));
        var i = Number((2 * n).toFixed(5)),
          a = Number((i * At.internal.Bezier_C).toFixed(5)),
          o = Number((n * At.internal.Bezier_C).toFixed(5));
        return r.push("0.749023 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(i + " 0 m"), r.push(i + " " + a + " " + a + " " + i + " 0 " + i + " c"), r.push("-" + a + " " + i + " -" + i + " " + a + " -" + i + " 0 c"), r.push("-" + i + " -" + a + " -" + a + " -" + i + " 0 -" + i + " c"), r.push(a + " -" + i + " " + i + " -" + a + " " + i + " 0 c"), r.push("f"), r.push("Q"), r.push("0 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(n + " 0 m"), r.push(n + " " + o + " " + o + " " + n + " 0 " + n + " c"), r.push("-" + o + " " + n + " -" + n + " " + o + " -" + n + " 0 c"), r.push("-" + n + " -" + o + " -" + o + " -" + n + " 0 -" + n + " c"), r.push(o + " -" + n + " " + n + " -" + o + " " + n + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
      },
      OffPushDown: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = [],
          n = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
        n = Number((.9 * n).toFixed(5));
        var i = Number((2 * n).toFixed(5)),
          a = Number((i * At.internal.Bezier_C).toFixed(5));
        return r.push("0.749023 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(i + " 0 m"), r.push(i + " " + a + " " + a + " " + i + " 0 " + i + " c"), r.push("-" + a + " " + i + " -" + i + " " + a + " -" + i + " 0 c"), r.push("-" + i + " -" + a + " -" + a + " -" + i + " 0 -" + i + " c"), r.push(a + " -" + i + " " + i + " -" + a + " " + i + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
      }
    },
    Cross: {
      createAppearanceStream: function (t) {
        var e = {
          D: {
            Off: At.RadioButton.Cross.OffPushDown
          },
          N: {}
        };
        return e.N[t] = At.RadioButton.Cross.YesNormal, e.D[t] = At.RadioButton.Cross.YesPushDown, e;
      },
      getCA: function () {
        return "8";
      },
      YesNormal: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = [],
          n = At.internal.calculateCross(t);
        return r.push("q"), r.push("1 1 " + U(At.internal.getWidth(t) - 2) + " " + U(At.internal.getHeight(t) - 2) + " re"), r.push("W"), r.push("n"), r.push(U(n.x1.x) + " " + U(n.x1.y) + " m"), r.push(U(n.x2.x) + " " + U(n.x2.y) + " l"), r.push(U(n.x4.x) + " " + U(n.x4.y) + " m"), r.push(U(n.x3.x) + " " + U(n.x3.y) + " l"), r.push("s"), r.push("Q"), e.stream = r.join("\n"), e;
      },
      YesPushDown: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = At.internal.calculateCross(t),
          n = [];
        return n.push("0.749023 g"), n.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), n.push("f"), n.push("q"), n.push("1 1 " + U(At.internal.getWidth(t) - 2) + " " + U(At.internal.getHeight(t) - 2) + " re"), n.push("W"), n.push("n"), n.push(U(r.x1.x) + " " + U(r.x1.y) + " m"), n.push(U(r.x2.x) + " " + U(r.x2.y) + " l"), n.push(U(r.x4.x) + " " + U(r.x4.y) + " m"), n.push(U(r.x3.x) + " " + U(r.x3.y) + " l"), n.push("s"), n.push("Q"), e.stream = n.join("\n"), e;
      },
      OffPushDown: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = [];
        return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), e.stream = r.join("\n"), e;
      }
    }
  },
  createDefaultAppearanceStream: function (t) {
    var e = t.scope.internal.getFont(t.fontName, t.fontStyle).id,
      r = t.scope.__private__.encodeColorString(t.color);
    return "/" + e + " " + t.fontSize + " Tf " + r;
  }
};
exports.AcroFormAppearance = At;
At.internal = {
  Bezier_C: .551915024494,
  calculateCross: function (t) {
    var e = At.internal.getWidth(t),
      r = At.internal.getHeight(t),
      n = Math.min(e, r);
    return {
      x1: {
        x: (e - n) / 2,
        y: (r - n) / 2 + n
      },
      x2: {
        x: (e - n) / 2 + n,
        y: (r - n) / 2
      },
      x3: {
        x: (e - n) / 2,
        y: (r - n) / 2
      },
      x4: {
        x: (e - n) / 2 + n,
        y: (r - n) / 2 + n
      }
    };
  }
}, At.internal.getWidth = function (e) {
  var r = 0;
  return "object" === (0, _typeof.default)(e) && (r = W(e.Rect[2])), r;
}, At.internal.getHeight = function (e) {
  var r = 0;
  return "object" === (0, _typeof.default)(e) && (r = W(e.Rect[3])), r;
};
var xt = q.addField = function (t) {
  if (at(this, t), !(t instanceof lt)) throw new Error("Invalid argument passed to jsPDF.addField.");
  var e;
  return (e = t).scope.internal.acroformPlugin.printedOut && (e.scope.internal.acroformPlugin.printedOut = !1, e.scope.internal.acroformPlugin.acroFormDictionaryRoot = null), e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e), t.page = t.scope.internal.getCurrentPageInfo().pageNumber, this;
};
q.AcroFormChoiceField = ft, q.AcroFormListBox = dt, q.AcroFormComboBox = pt, q.AcroFormEditBox = gt, q.AcroFormButton = mt, q.AcroFormPushButton = vt, q.AcroFormRadioButton = bt, q.AcroFormCheckBox = wt, q.AcroFormTextField = Nt, q.AcroFormPasswordField = Lt, q.AcroFormAppearance = At, q.AcroForm = {
  ChoiceField: ft,
  ListBox: dt,
  ComboBox: pt,
  EditBox: gt,
  Button: mt,
  PushButton: vt,
  RadioButton: bt,
  CheckBox: wt,
  TextField: Nt,
  PasswordField: Lt,
  Appearance: At
}, E.AcroForm = {
  ChoiceField: ft,
  ListBox: dt,
  ComboBox: pt,
  EditBox: gt,
  Button: mt,
  PushButton: vt,
  RadioButton: bt,
  CheckBox: wt,
  TextField: Nt,
  PasswordField: Lt,
  Appearance: At
};
var St = E.AcroForm;
exports.AcroForm = St;
function _t(t) {
  return t.reduce(function (t, e, r) {
    return t[e] = r, t;
  }, {});
}
!function (e) {
  e.__addimage__ = {};
  var r = "UNKNOWN",
    n = {
      PNG: [[137, 80, 78, 71]],
      TIFF: [[77, 77, 0, 42], [73, 73, 42, 0]],
      JPEG: [[255, 216, 255, 224, void 0, void 0, 74, 70, 73, 70, 0], [255, 216, 255, 225, void 0, void 0, 69, 120, 105, 102, 0, 0], [255, 216, 255, 219], [255, 216, 255, 238]],
      JPEG2000: [[0, 0, 0, 12, 106, 80, 32, 32]],
      GIF87a: [[71, 73, 70, 56, 55, 97]],
      GIF89a: [[71, 73, 70, 56, 57, 97]],
      WEBP: [[82, 73, 70, 70, void 0, void 0, void 0, void 0, 87, 69, 66, 80]],
      BMP: [[66, 77], [66, 65], [67, 73], [67, 80], [73, 67], [80, 84]]
    },
    i = e.__addimage__.getImageFileTypeByImageData = function (t, e) {
      var i,
        a,
        o,
        s,
        c,
        u = r;
      if ("RGBA" === (e = e || r) || void 0 !== t.data && t.data instanceof Uint8ClampedArray && "height" in t && "width" in t) return "RGBA";
      if (x(t)) for (c in n) for (o = n[c], i = 0; i < o.length; i += 1) {
        for (s = !0, a = 0; a < o[i].length; a += 1) if (void 0 !== o[i][a] && o[i][a] !== t[a]) {
          s = !1;
          break;
        }
        if (!0 === s) {
          u = c;
          break;
        }
      } else for (c in n) for (o = n[c], i = 0; i < o.length; i += 1) {
        for (s = !0, a = 0; a < o[i].length; a += 1) if (void 0 !== o[i][a] && o[i][a] !== t.charCodeAt(a)) {
          s = !1;
          break;
        }
        if (!0 === s) {
          u = c;
          break;
        }
      }
      return u === r && e !== r && (u = e), u;
    },
    a = function t(e) {
      for (var r = this.internal.write, n = this.internal.putStream, i = (0, this.internal.getFilters)(); -1 !== i.indexOf("FlateEncode");) i.splice(i.indexOf("FlateEncode"), 1);
      e.objectId = this.internal.newObject();
      var a = [];
      if (a.push({
        key: "Type",
        value: "/XObject"
      }), a.push({
        key: "Subtype",
        value: "/Image"
      }), a.push({
        key: "Width",
        value: e.width
      }), a.push({
        key: "Height",
        value: e.height
      }), e.colorSpace === b.INDEXED ? a.push({
        key: "ColorSpace",
        value: "[/Indexed /DeviceRGB " + (e.palette.length / 3 - 1) + " " + ("sMask" in e && void 0 !== e.sMask ? e.objectId + 2 : e.objectId + 1) + " 0 R]"
      }) : (a.push({
        key: "ColorSpace",
        value: "/" + e.colorSpace
      }), e.colorSpace === b.DEVICE_CMYK && a.push({
        key: "Decode",
        value: "[1 0 1 0 1 0 1 0]"
      })), a.push({
        key: "BitsPerComponent",
        value: e.bitsPerComponent
      }), "decodeParameters" in e && void 0 !== e.decodeParameters && a.push({
        key: "DecodeParms",
        value: "<<" + e.decodeParameters + ">>"
      }), "transparency" in e && Array.isArray(e.transparency)) {
        for (var o = "", s = 0, c = e.transparency.length; s < c; s++) o += e.transparency[s] + " " + e.transparency[s] + " ";
        a.push({
          key: "Mask",
          value: "[" + o + "]"
        });
      }
      void 0 !== e.sMask && a.push({
        key: "SMask",
        value: e.objectId + 1 + " 0 R"
      });
      var u = void 0 !== e.filter ? ["/" + e.filter] : void 0;
      if (n({
        data: e.data,
        additionalKeyValues: a,
        alreadyAppliedFilters: u,
        objectId: e.objectId
      }), r("endobj"), "sMask" in e && void 0 !== e.sMask) {
        var h = "/Predictor " + e.predictor + " /Colors 1 /BitsPerComponent " + e.bitsPerComponent + " /Columns " + e.width,
          l = {
            width: e.width,
            height: e.height,
            colorSpace: "DeviceGray",
            bitsPerComponent: e.bitsPerComponent,
            decodeParameters: h,
            data: e.sMask
          };
        "filter" in e && (l.filter = e.filter), t.call(this, l);
      }
      if (e.colorSpace === b.INDEXED) {
        var f = this.internal.newObject();
        n({
          data: _(new Uint8Array(e.palette)),
          objectId: f
        }), r("endobj");
      }
    },
    o = function () {
      var t = this.internal.collections.addImage_images;
      for (var e in t) a.call(this, t[e]);
    },
    s = function () {
      var t,
        e = this.internal.collections.addImage_images,
        r = this.internal.write;
      for (var n in e) r("/I" + (t = e[n]).index, t.objectId, "0", "R");
    },
    c = function () {
      this.internal.collections.addImage_images || (this.internal.collections.addImage_images = {}, this.internal.events.subscribe("putResources", o), this.internal.events.subscribe("putXobjectDict", s));
    },
    h = function () {
      var t = this.internal.collections.addImage_images;
      return c.call(this), t;
    },
    l = function () {
      return Object.keys(this.internal.collections.addImage_images).length;
    },
    f = function (t) {
      return "function" == typeof e["process" + t.toUpperCase()];
    },
    d = function (e) {
      return "object" === (0, _typeof.default)(e) && 1 === e.nodeType;
    },
    p = function (t, r) {
      if ("IMG" === t.nodeName && t.hasAttribute("src")) {
        var n = "" + t.getAttribute("src");
        if (0 === n.indexOf("data:image/")) return u(unescape(n).split("base64,").pop());
        var i = e.loadFile(n, !0);
        if (void 0 !== i) return i;
      }
      if ("CANVAS" === t.nodeName) {
        if (0 === t.width || 0 === t.height) throw new Error("Given canvas must have data. Canvas width: " + t.width + ", height: " + t.height);
        var a;
        switch (r) {
          case "PNG":
            a = "image/png";
            break;
          case "WEBP":
            a = "image/webp";
            break;
          case "JPEG":
          case "JPG":
          default:
            a = "image/jpeg";
        }
        return u(t.toDataURL(a, 1).split("base64,").pop());
      }
    },
    g = function (t) {
      var e = this.internal.collections.addImage_images;
      if (e) for (var r in e) if (t === e[r].alias) return e[r];
    },
    m = function (t, e, r) {
      return t || e || (t = -96, e = -96), t < 0 && (t = -1 * r.width * 72 / t / this.internal.scaleFactor), e < 0 && (e = -1 * r.height * 72 / e / this.internal.scaleFactor), 0 === t && (t = e * r.width / r.height), 0 === e && (e = t * r.height / r.width), [t, e];
    },
    v = function (t, e, r, n, i, a) {
      var o = m.call(this, r, n, i),
        s = this.internal.getCoordinateString,
        c = this.internal.getVerticalCoordinateString,
        u = h.call(this);
      if (r = o[0], n = o[1], u[i.index] = i, a) {
        a *= Math.PI / 180;
        var l = Math.cos(a),
          f = Math.sin(a),
          d = function (t) {
            return t.toFixed(4);
          },
          p = [d(l), d(f), d(-1 * f), d(l), 0, 0, "cm"];
      }
      this.internal.write("q"), a ? (this.internal.write([1, "0", "0", 1, s(t), c(e + n), "cm"].join(" ")), this.internal.write(p.join(" ")), this.internal.write([s(r), "0", "0", s(n), "0", "0", "cm"].join(" "))) : this.internal.write([s(r), "0", "0", s(n), s(t), c(e + n), "cm"].join(" ")), this.isAdvancedAPI() && this.internal.write([1, 0, 0, -1, 0, 0, "cm"].join(" ")), this.internal.write("/I" + i.index + " Do"), this.internal.write("Q");
    },
    b = e.color_spaces = {
      DEVICE_RGB: "DeviceRGB",
      DEVICE_GRAY: "DeviceGray",
      DEVICE_CMYK: "DeviceCMYK",
      CAL_GREY: "CalGray",
      CAL_RGB: "CalRGB",
      LAB: "Lab",
      ICC_BASED: "ICCBased",
      INDEXED: "Indexed",
      PATTERN: "Pattern",
      SEPARATION: "Separation",
      DEVICE_N: "DeviceN"
    };
  e.decode = {
    DCT_DECODE: "DCTDecode",
    FLATE_DECODE: "FlateDecode",
    LZW_DECODE: "LZWDecode",
    JPX_DECODE: "JPXDecode",
    JBIG2_DECODE: "JBIG2Decode",
    ASCII85_DECODE: "ASCII85Decode",
    ASCII_HEX_DECODE: "ASCIIHexDecode",
    RUN_LENGTH_DECODE: "RunLengthDecode",
    CCITT_FAX_DECODE: "CCITTFaxDecode"
  };
  var y = e.image_compression = {
      NONE: "NONE",
      FAST: "FAST",
      MEDIUM: "MEDIUM",
      SLOW: "SLOW"
    },
    w = e.__addimage__.sHashCode = function (t) {
      var e,
        r,
        n = 0;
      if ("string" == typeof t) for (r = t.length, e = 0; e < r; e++) n = (n << 5) - n + t.charCodeAt(e), n |= 0;else if (x(t)) for (r = t.byteLength / 2, e = 0; e < r; e++) n = (n << 5) - n + t[e], n |= 0;
      return n;
    },
    N = e.__addimage__.validateStringAsBase64 = function (t) {
      (t = t || "").toString().trim();
      var e = !0;
      return 0 === t.length && (e = !1), t.length % 4 != 0 && (e = !1), !1 === /^[A-Za-z0-9+/]+$/.test(t.substr(0, t.length - 2)) && (e = !1), !1 === /^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2)) && (e = !1), e;
    },
    L = e.__addimage__.extractImageFromDataUrl = function (t) {
      var e = (t = t || "").split("base64,"),
        r = null;
      if (2 === e.length) {
        var n = /^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(e[0]);
        Array.isArray(n) && (r = {
          mimeType: n[1],
          charset: n[2],
          data: e[1]
        });
      }
      return r;
    },
    A = e.__addimage__.supportsArrayBuffer = function () {
      return "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array;
    };
  e.__addimage__.isArrayBuffer = function (t) {
    return A() && t instanceof ArrayBuffer;
  };
  var x = e.__addimage__.isArrayBufferView = function (t) {
      return A() && "undefined" != typeof Uint32Array && (t instanceof Int8Array || t instanceof Uint8Array || "undefined" != typeof Uint8ClampedArray && t instanceof Uint8ClampedArray || t instanceof Int16Array || t instanceof Uint16Array || t instanceof Int32Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array);
    },
    S = e.__addimage__.binaryStringToUint8Array = function (t) {
      for (var e = t.length, r = new Uint8Array(e), n = 0; n < e; n++) r[n] = t.charCodeAt(n);
      return r;
    },
    _ = e.__addimage__.arrayBufferToBinaryString = function (t) {
      for (var e = "", r = x(t) ? t : new Uint8Array(t), n = 0; n < r.length; n += 8192) e += String.fromCharCode.apply(null, r.subarray(n, n + 8192));
      return e;
    };
  e.addImage = function () {
    var e, n, i, a, o, s, u, h, l;
    if ("number" == typeof arguments[1] ? (n = r, i = arguments[1], a = arguments[2], o = arguments[3], s = arguments[4], u = arguments[5], h = arguments[6], l = arguments[7]) : (n = arguments[1], i = arguments[2], a = arguments[3], o = arguments[4], s = arguments[5], u = arguments[6], h = arguments[7], l = arguments[8]), "object" === (0, _typeof.default)(e = arguments[0]) && !d(e) && "imageData" in e) {
      var f = e;
      e = f.imageData, n = f.format || n || r, i = f.x || i || 0, a = f.y || a || 0, o = f.w || f.width || o, s = f.h || f.height || s, u = f.alias || u, h = f.compression || h, l = f.rotation || f.angle || l;
    }
    var p = this.internal.getFilters();
    if (void 0 === h && -1 !== p.indexOf("FlateEncode") && (h = "SLOW"), isNaN(i) || isNaN(a)) throw new Error("Invalid coordinates passed to jsPDF.addImage");
    c.call(this);
    var g = P.call(this, e, n, u, h);
    return v.call(this, i, a, o, s, g, l), this;
  };
  var P = function (t, n, a, o) {
      var s, c, u;
      if ("string" == typeof t && i(t) === r) {
        t = unescape(t);
        var h = k(t, !1);
        ("" !== h || void 0 !== (h = e.loadFile(t, !0))) && (t = h);
      }
      if (d(t) && (t = p(t, n)), n = i(t, n), !f(n)) throw new Error("addImage does not support files of type '" + n + "', please ensure that a plugin for '" + n + "' support is added.");
      if ((null == (u = a) || 0 === u.length) && (a = function (t) {
        return "string" == typeof t || x(t) ? w(t) : x(t.data) ? w(t.data) : null;
      }(t)), (s = g.call(this, a)) || (A() && (t instanceof Uint8Array || "RGBA" === n || (c = t, t = S(t))), s = this["process" + n.toUpperCase()](t, l.call(this), a, function (t) {
        return t && "string" == typeof t && (t = t.toUpperCase()), t in e.image_compression ? t : y.NONE;
      }(o), c)), !s) throw new Error("An unknown error occurred whilst processing the image.");
      return s;
    },
    k = e.__addimage__.convertBase64ToBinaryString = function (t, e) {
      var r;
      e = "boolean" != typeof e || e;
      var n,
        i = "";
      if ("string" == typeof t) {
        n = null !== (r = L(t)) ? r.data : t;
        try {
          i = u(n);
        } catch (t) {
          if (e) throw N(n) ? new Error("atob-Error in jsPDF.convertBase64ToBinaryString " + t.message) : new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ");
        }
      }
      return i;
    };
  e.getImageProperties = function (t) {
    var n,
      a,
      o = "";
    if (d(t) && (t = p(t)), "string" == typeof t && i(t) === r && ("" === (o = k(t, !1)) && (o = e.loadFile(t) || ""), t = o), a = i(t), !f(a)) throw new Error("addImage does not support files of type '" + a + "', please ensure that a plugin for '" + a + "' support is added.");
    if (!A() || t instanceof Uint8Array || (t = S(t)), !(n = this["process" + a.toUpperCase()](t))) throw new Error("An unknown error occurred whilst processing the image");
    return n.fileType = a, n;
  };
}(E.API),
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function (t) {
    if (void 0 !== t && "" != t) return !0;
  };
  E.API.events.push(["addPage", function (t) {
    this.internal.getPageInfo(t.pageNumber).pageContext.annotations = [];
  }]), t.events.push(["putPage", function (t) {
    for (var r, n, i, a = this.internal.getCoordinateString, o = this.internal.getVerticalCoordinateString, s = this.internal.getPageInfoByObjId(t.objId), c = t.pageContext.annotations, u = !1, h = 0; h < c.length && !u; h++) switch ((r = c[h]).type) {
      case "link":
        (e(r.options.url) || e(r.options.pageNumber)) && (u = !0);
        break;
      case "reference":
      case "text":
      case "freetext":
        u = !0;
    }
    if (0 != u) {
      this.internal.write("/Annots [");
      for (var l = 0; l < c.length; l++) {
        r = c[l];
        var f = this.internal.pdfEscape,
          d = this.internal.getEncryptor(t.objId);
        switch (r.type) {
          case "reference":
            this.internal.write(" " + r.object.objId + " 0 R ");
            break;
          case "text":
            var p = this.internal.newAdditionalObject(),
              g = this.internal.newAdditionalObject(),
              m = this.internal.getEncryptor(p.objId),
              v = r.title || "Note";
            i = "<</Type /Annot /Subtype /Text " + (n = "/Rect [" + a(r.bounds.x) + " " + o(r.bounds.y + r.bounds.h) + " " + a(r.bounds.x + r.bounds.w) + " " + o(r.bounds.y) + "] ") + "/Contents (" + f(m(r.contents)) + ")", i += " /Popup " + g.objId + " 0 R", i += " /P " + s.objId + " 0 R", i += " /T (" + f(m(v)) + ") >>", p.content = i;
            var b = p.objId + " 0 R";
            i = "<</Type /Annot /Subtype /Popup " + (n = "/Rect [" + a(r.bounds.x + 30) + " " + o(r.bounds.y + r.bounds.h) + " " + a(r.bounds.x + r.bounds.w + 30) + " " + o(r.bounds.y) + "] ") + " /Parent " + b, r.open && (i += " /Open true"), i += " >>", g.content = i, this.internal.write(p.objId, "0 R", g.objId, "0 R");
            break;
          case "freetext":
            n = "/Rect [" + a(r.bounds.x) + " " + o(r.bounds.y) + " " + a(r.bounds.x + r.bounds.w) + " " + o(r.bounds.y + r.bounds.h) + "] ";
            var y = r.color || "#000000";
            i = "<</Type /Annot /Subtype /FreeText " + n + "/Contents (" + f(d(r.contents)) + ")", i += " /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#" + y + ")", i += " /Border [0 0 0]", i += " >>", this.internal.write(i);
            break;
          case "link":
            if (r.options.name) {
              var w = this.annotations._nameMap[r.options.name];
              r.options.pageNumber = w.page, r.options.top = w.y;
            } else r.options.top || (r.options.top = 0);
            if (n = "/Rect [" + r.finalBounds.x + " " + r.finalBounds.y + " " + r.finalBounds.w + " " + r.finalBounds.h + "] ", i = "", r.options.url) i = "<</Type /Annot /Subtype /Link " + n + "/Border [0 0 0] /A <</S /URI /URI (" + f(d(r.options.url)) + ") >>";else if (r.options.pageNumber) {
              switch (i = "<</Type /Annot /Subtype /Link " + n + "/Border [0 0 0] /Dest [" + this.internal.getPageInfo(r.options.pageNumber).objId + " 0 R", r.options.magFactor = r.options.magFactor || "XYZ", r.options.magFactor) {
                case "Fit":
                  i += " /Fit]";
                  break;
                case "FitH":
                  i += " /FitH " + r.options.top + "]";
                  break;
                case "FitV":
                  r.options.left = r.options.left || 0, i += " /FitV " + r.options.left + "]";
                  break;
                case "XYZ":
                default:
                  var N = o(r.options.top);
                  r.options.left = r.options.left || 0, void 0 === r.options.zoom && (r.options.zoom = 0), i += " /XYZ " + r.options.left + " " + N + " " + r.options.zoom + "]";
              }
            }
            "" != i && (i += " >>", this.internal.write(i));
        }
      }
      this.internal.write("]");
    }
  }]), t.createAnnotation = function (t) {
    var e = this.internal.getCurrentPageInfo();
    switch (t.type) {
      case "link":
        this.link(t.bounds.x, t.bounds.y, t.bounds.w, t.bounds.h, t);
        break;
      case "text":
      case "freetext":
        e.pageContext.annotations.push(t);
    }
  }, t.link = function (t, e, r, n, i) {
    var a = this.internal.getCurrentPageInfo(),
      o = this.internal.getCoordinateString,
      s = this.internal.getVerticalCoordinateString;
    a.pageContext.annotations.push({
      finalBounds: {
        x: o(t),
        y: s(e),
        w: o(t + r),
        h: s(e + n)
      },
      options: i,
      type: "link"
    });
  }, t.textWithLink = function (t, e, r, n) {
    var i,
      a,
      o = this.getTextWidth(t),
      s = this.internal.getLineHeight() / this.internal.scaleFactor;
    if (void 0 !== n.maxWidth) {
      a = n.maxWidth;
      var c = this.splitTextToSize(t, a).length;
      i = Math.ceil(s * c);
    } else a = o, i = s;
    return this.text(t, e, r, n), r += .2 * s, "center" === n.align && (e -= o / 2), "right" === n.align && (e -= o), this.link(e, r - s, a, i, n), o;
  }, t.getTextWidth = function (t) {
    var e = this.internal.getFontSize();
    return this.getStringUnitWidth(t) * e / this.internal.scaleFactor;
  };
}(E.API),
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = {
      1569: [65152],
      1570: [65153, 65154],
      1571: [65155, 65156],
      1572: [65157, 65158],
      1573: [65159, 65160],
      1574: [65161, 65162, 65163, 65164],
      1575: [65165, 65166],
      1576: [65167, 65168, 65169, 65170],
      1577: [65171, 65172],
      1578: [65173, 65174, 65175, 65176],
      1579: [65177, 65178, 65179, 65180],
      1580: [65181, 65182, 65183, 65184],
      1581: [65185, 65186, 65187, 65188],
      1582: [65189, 65190, 65191, 65192],
      1583: [65193, 65194],
      1584: [65195, 65196],
      1585: [65197, 65198],
      1586: [65199, 65200],
      1587: [65201, 65202, 65203, 65204],
      1588: [65205, 65206, 65207, 65208],
      1589: [65209, 65210, 65211, 65212],
      1590: [65213, 65214, 65215, 65216],
      1591: [65217, 65218, 65219, 65220],
      1592: [65221, 65222, 65223, 65224],
      1593: [65225, 65226, 65227, 65228],
      1594: [65229, 65230, 65231, 65232],
      1601: [65233, 65234, 65235, 65236],
      1602: [65237, 65238, 65239, 65240],
      1603: [65241, 65242, 65243, 65244],
      1604: [65245, 65246, 65247, 65248],
      1605: [65249, 65250, 65251, 65252],
      1606: [65253, 65254, 65255, 65256],
      1607: [65257, 65258, 65259, 65260],
      1608: [65261, 65262],
      1609: [65263, 65264, 64488, 64489],
      1610: [65265, 65266, 65267, 65268],
      1649: [64336, 64337],
      1655: [64477],
      1657: [64358, 64359, 64360, 64361],
      1658: [64350, 64351, 64352, 64353],
      1659: [64338, 64339, 64340, 64341],
      1662: [64342, 64343, 64344, 64345],
      1663: [64354, 64355, 64356, 64357],
      1664: [64346, 64347, 64348, 64349],
      1667: [64374, 64375, 64376, 64377],
      1668: [64370, 64371, 64372, 64373],
      1670: [64378, 64379, 64380, 64381],
      1671: [64382, 64383, 64384, 64385],
      1672: [64392, 64393],
      1676: [64388, 64389],
      1677: [64386, 64387],
      1678: [64390, 64391],
      1681: [64396, 64397],
      1688: [64394, 64395],
      1700: [64362, 64363, 64364, 64365],
      1702: [64366, 64367, 64368, 64369],
      1705: [64398, 64399, 64400, 64401],
      1709: [64467, 64468, 64469, 64470],
      1711: [64402, 64403, 64404, 64405],
      1713: [64410, 64411, 64412, 64413],
      1715: [64406, 64407, 64408, 64409],
      1722: [64414, 64415],
      1723: [64416, 64417, 64418, 64419],
      1726: [64426, 64427, 64428, 64429],
      1728: [64420, 64421],
      1729: [64422, 64423, 64424, 64425],
      1733: [64480, 64481],
      1734: [64473, 64474],
      1735: [64471, 64472],
      1736: [64475, 64476],
      1737: [64482, 64483],
      1739: [64478, 64479],
      1740: [64508, 64509, 64510, 64511],
      1744: [64484, 64485, 64486, 64487],
      1746: [64430, 64431],
      1747: [64432, 64433]
    },
    r = {
      65247: {
        65154: 65269,
        65156: 65271,
        65160: 65273,
        65166: 65275
      },
      65248: {
        65154: 65270,
        65156: 65272,
        65160: 65274,
        65166: 65276
      },
      65165: {
        65247: {
          65248: {
            65258: 65010
          }
        }
      },
      1617: {
        1612: 64606,
        1613: 64607,
        1614: 64608,
        1615: 64609,
        1616: 64610
      }
    },
    n = {
      1612: 64606,
      1613: 64607,
      1614: 64608,
      1615: 64609,
      1616: 64610
    },
    i = [1570, 1571, 1573, 1575];
  t.__arabicParser__ = {};
  var a = t.__arabicParser__.isInArabicSubstitutionA = function (t) {
      return void 0 !== e[t.charCodeAt(0)];
    },
    o = t.__arabicParser__.isArabicLetter = function (t) {
      return "string" == typeof t && /^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t);
    },
    s = t.__arabicParser__.isArabicEndLetter = function (t) {
      return o(t) && a(t) && e[t.charCodeAt(0)].length <= 2;
    },
    c = t.__arabicParser__.isArabicAlfLetter = function (t) {
      return o(t) && i.indexOf(t.charCodeAt(0)) >= 0;
    };
  t.__arabicParser__.arabicLetterHasIsolatedForm = function (t) {
    return o(t) && a(t) && e[t.charCodeAt(0)].length >= 1;
  };
  var u = t.__arabicParser__.arabicLetterHasFinalForm = function (t) {
    return o(t) && a(t) && e[t.charCodeAt(0)].length >= 2;
  };
  t.__arabicParser__.arabicLetterHasInitialForm = function (t) {
    return o(t) && a(t) && e[t.charCodeAt(0)].length >= 3;
  };
  var h = t.__arabicParser__.arabicLetterHasMedialForm = function (t) {
      return o(t) && a(t) && 4 == e[t.charCodeAt(0)].length;
    },
    l = t.__arabicParser__.resolveLigatures = function (t) {
      var e = 0,
        n = r,
        i = "",
        a = 0;
      for (e = 0; e < t.length; e += 1) void 0 !== n[t.charCodeAt(e)] ? (a++, "number" == typeof (n = n[t.charCodeAt(e)]) && (i += String.fromCharCode(n), n = r, a = 0), e === t.length - 1 && (n = r, i += t.charAt(e - (a - 1)), e -= a - 1, a = 0)) : (n = r, i += t.charAt(e - a), e -= a, a = 0);
      return i;
    };
  t.__arabicParser__.isArabicDiacritic = function (t) {
    return void 0 !== t && void 0 !== n[t.charCodeAt(0)];
  };
  var f = t.__arabicParser__.getCorrectForm = function (t, e, r) {
      return o(t) ? !1 === a(t) ? -1 : !u(t) || !o(e) && !o(r) || !o(r) && s(e) || s(t) && !o(e) || s(t) && c(e) || s(t) && s(e) ? 0 : h(t) && o(e) && !s(e) && o(r) && u(r) ? 3 : s(t) || !o(r) ? 1 : 2 : -1;
    },
    d = function (t) {
      var r = 0,
        n = 0,
        i = 0,
        a = "",
        s = "",
        c = "",
        u = (t = t || "").split("\\s+"),
        h = [];
      for (r = 0; r < u.length; r += 1) {
        for (h.push(""), n = 0; n < u[r].length; n += 1) a = u[r][n], s = u[r][n - 1], c = u[r][n + 1], o(a) ? (i = f(a, s, c), h[r] += -1 !== i ? String.fromCharCode(e[a.charCodeAt(0)][i]) : a) : h[r] += a;
        h[r] = l(h[r]);
      }
      return h.join(" ");
    },
    p = t.__arabicParser__.processArabic = t.processArabic = function () {
      var t,
        e = "string" == typeof arguments[0] ? arguments[0] : arguments[0].text,
        r = [];
      if (Array.isArray(e)) {
        var n = 0;
        for (r = [], n = 0; n < e.length; n += 1) Array.isArray(e[n]) ? r.push([d(e[n][0]), e[n][1], e[n][2]]) : r.push([d(e[n])]);
        t = r;
      } else t = d(e);
      return "string" == typeof arguments[0] ? t : (arguments[0].text = t, arguments[0]);
    };
  t.events.push(["preProcessText", p]);
}(E.API), E.API.autoPrint = function (t) {
  var e;
  switch ((t = t || {}).variant = t.variant || "non-conform", t.variant) {
    case "javascript":
      this.addJS("print({});");
      break;
    case "non-conform":
    default:
      this.internal.events.subscribe("postPutResources", function () {
        e = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /Named"), this.internal.out("/Type /Action"), this.internal.out("/N /Print"), this.internal.out(">>"), this.internal.out("endobj");
      }), this.internal.events.subscribe("putCatalog", function () {
        this.internal.out("/OpenAction " + e + " 0 R");
      });
  }
  return this;
},
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function () {
    var t = void 0;
    Object.defineProperty(this, "pdf", {
      get: function () {
        return t;
      },
      set: function (e) {
        t = e;
      }
    });
    var e = 150;
    Object.defineProperty(this, "width", {
      get: function () {
        return e;
      },
      set: function (t) {
        e = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 150 : t, this.getContext("2d").pageWrapXEnabled && (this.getContext("2d").pageWrapX = e + 1);
      }
    });
    var r = 300;
    Object.defineProperty(this, "height", {
      get: function () {
        return r;
      },
      set: function (t) {
        r = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 300 : t, this.getContext("2d").pageWrapYEnabled && (this.getContext("2d").pageWrapY = r + 1);
      }
    });
    var n = [];
    Object.defineProperty(this, "childNodes", {
      get: function () {
        return n;
      },
      set: function (t) {
        n = t;
      }
    });
    var i = {};
    Object.defineProperty(this, "style", {
      get: function () {
        return i;
      },
      set: function (t) {
        i = t;
      }
    }), Object.defineProperty(this, "parentNode", {});
  };
  e.prototype.getContext = function (t, e) {
    var r;
    if ("2d" !== (t = t || "2d")) return null;
    for (r in e) this.pdf.context2d.hasOwnProperty(r) && (this.pdf.context2d[r] = e[r]);
    return this.pdf.context2d._canvas = this, this.pdf.context2d;
  }, e.prototype.toDataURL = function () {
    throw new Error("toDataURL is not implemented.");
  }, t.events.push(["initialized", function () {
    this.canvas = new e(), this.canvas.pdf = this;
  }]);
}(E.API), function (e) {
  var r = {
      left: 0,
      top: 0,
      bottom: 0,
      right: 0
    },
    n = !1,
    i = function () {
      void 0 === this.internal.__cell__ && (this.internal.__cell__ = {}, this.internal.__cell__.padding = 3, this.internal.__cell__.headerFunction = void 0, this.internal.__cell__.margins = Object.assign({}, r), this.internal.__cell__.margins.width = this.getPageWidth(), a.call(this));
    },
    a = function () {
      this.internal.__cell__.lastCell = new o(), this.internal.__cell__.pages = 1;
    },
    o = function () {
      var t = arguments[0];
      Object.defineProperty(this, "x", {
        enumerable: !0,
        get: function () {
          return t;
        },
        set: function (e) {
          t = e;
        }
      });
      var e = arguments[1];
      Object.defineProperty(this, "y", {
        enumerable: !0,
        get: function () {
          return e;
        },
        set: function (t) {
          e = t;
        }
      });
      var r = arguments[2];
      Object.defineProperty(this, "width", {
        enumerable: !0,
        get: function () {
          return r;
        },
        set: function (t) {
          r = t;
        }
      });
      var n = arguments[3];
      Object.defineProperty(this, "height", {
        enumerable: !0,
        get: function () {
          return n;
        },
        set: function (t) {
          n = t;
        }
      });
      var i = arguments[4];
      Object.defineProperty(this, "text", {
        enumerable: !0,
        get: function () {
          return i;
        },
        set: function (t) {
          i = t;
        }
      });
      var a = arguments[5];
      Object.defineProperty(this, "lineNumber", {
        enumerable: !0,
        get: function () {
          return a;
        },
        set: function (t) {
          a = t;
        }
      });
      var o = arguments[6];
      return Object.defineProperty(this, "align", {
        enumerable: !0,
        get: function () {
          return o;
        },
        set: function (t) {
          o = t;
        }
      }), this;
    };
  o.prototype.clone = function () {
    return new o(this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align);
  }, o.prototype.toArray = function () {
    return [this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align];
  }, e.setHeaderFunction = function (t) {
    return i.call(this), this.internal.__cell__.headerFunction = "function" == typeof t ? t : void 0, this;
  }, e.getTextDimensions = function (t, e) {
    i.call(this);
    var r = (e = e || {}).fontSize || this.getFontSize(),
      n = e.font || this.getFont(),
      a = e.scaleFactor || this.internal.scaleFactor,
      o = 0,
      s = 0,
      c = 0,
      u = this;
    if (!Array.isArray(t) && "string" != typeof t) {
      if ("number" != typeof t) throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");
      t = String(t);
    }
    var h = e.maxWidth;
    h > 0 ? "string" == typeof t ? t = this.splitTextToSize(t, h) : "[object Array]" === Object.prototype.toString.call(t) && (t = t.reduce(function (t, e) {
      return t.concat(u.splitTextToSize(e, h));
    }, [])) : t = Array.isArray(t) ? t : [t];
    for (var l = 0; l < t.length; l++) o < (c = this.getStringUnitWidth(t[l], {
      font: n
    }) * r) && (o = c);
    return 0 !== o && (s = t.length), {
      w: o /= a,
      h: Math.max((s * r * this.getLineHeightFactor() - r * (this.getLineHeightFactor() - 1)) / a, 0)
    };
  }, e.cellAddPage = function () {
    i.call(this), this.addPage();
    var t = this.internal.__cell__.margins || r;
    return this.internal.__cell__.lastCell = new o(t.left, t.top, void 0, void 0), this.internal.__cell__.pages += 1, this;
  };
  var s = e.cell = function () {
    var t;
    t = arguments[0] instanceof o ? arguments[0] : new o(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]), i.call(this);
    var e = this.internal.__cell__.lastCell,
      a = this.internal.__cell__.padding,
      s = this.internal.__cell__.margins || r,
      c = this.internal.__cell__.tableHeaderRow,
      u = this.internal.__cell__.printHeaders;
    return void 0 !== e.lineNumber && (e.lineNumber === t.lineNumber ? (t.x = (e.x || 0) + (e.width || 0), t.y = e.y || 0) : e.y + e.height + t.height + s.bottom > this.getPageHeight() ? (this.cellAddPage(), t.y = s.top, u && c && (this.printHeaderRow(t.lineNumber, !0), t.y += c[0].height)) : t.y = e.y + e.height || t.y), void 0 !== t.text[0] && (this.rect(t.x, t.y, t.width, t.height, !0 === n ? "FD" : void 0), "right" === t.align ? this.text(t.text, t.x + t.width - a, t.y + a, {
      align: "right",
      baseline: "top"
    }) : "center" === t.align ? this.text(t.text, t.x + t.width / 2, t.y + a, {
      align: "center",
      baseline: "top",
      maxWidth: t.width - a - a
    }) : this.text(t.text, t.x + a, t.y + a, {
      align: "left",
      baseline: "top",
      maxWidth: t.width - a - a
    })), this.internal.__cell__.lastCell = t, this;
  };
  e.table = function (e, n, u, h, l) {
    if (i.call(this), !u) throw new Error("No data for PDF table.");
    var f,
      d,
      p,
      g,
      m = [],
      v = [],
      b = [],
      y = {},
      w = {},
      N = [],
      L = [],
      A = (l = l || {}).autoSize || !1,
      x = !1 !== l.printHeaders,
      S = l.css && void 0 !== l.css["font-size"] ? 16 * l.css["font-size"] : l.fontSize || 12,
      _ = l.margins || Object.assign({
        width: this.getPageWidth()
      }, r),
      P = "number" == typeof l.padding ? l.padding : 3,
      k = l.headerBackgroundColor || "#c8c8c8",
      I = l.headerTextColor || "#000";
    if (a.call(this), this.internal.__cell__.printHeaders = x, this.internal.__cell__.margins = _, this.internal.__cell__.table_font_size = S, this.internal.__cell__.padding = P, this.internal.__cell__.headerBackgroundColor = k, this.internal.__cell__.headerTextColor = I, this.setFontSize(S), null == h) v = m = Object.keys(u[0]), b = m.map(function () {
      return "left";
    });else if (Array.isArray(h) && "object" === (0, _typeof.default)(h[0])) for (m = h.map(function (t) {
      return t.name;
    }), v = h.map(function (t) {
      return t.prompt || t.name || "";
    }), b = h.map(function (t) {
      return t.align || "left";
    }), f = 0; f < h.length; f += 1) w[h[f].name] = h[f].width * (19.049976 / 25.4);else Array.isArray(h) && "string" == typeof h[0] && (v = m = h, b = m.map(function () {
      return "left";
    }));
    if (A || Array.isArray(h) && "string" == typeof h[0]) for (f = 0; f < m.length; f += 1) {
      for (y[g = m[f]] = u.map(function (t) {
        return t[g];
      }), this.setFont(void 0, "bold"), N.push(this.getTextDimensions(v[f], {
        fontSize: this.internal.__cell__.table_font_size,
        scaleFactor: this.internal.scaleFactor
      }).w), d = y[g], this.setFont(void 0, "normal"), p = 0; p < d.length; p += 1) N.push(this.getTextDimensions(d[p], {
        fontSize: this.internal.__cell__.table_font_size,
        scaleFactor: this.internal.scaleFactor
      }).w);
      w[g] = Math.max.apply(null, N) + P + P, N = [];
    }
    if (x) {
      var F = {};
      for (f = 0; f < m.length; f += 1) F[m[f]] = {}, F[m[f]].text = v[f], F[m[f]].align = b[f];
      var C = c.call(this, F, w);
      L = m.map(function (t) {
        return new o(e, n, w[t], C, F[t].text, void 0, F[t].align);
      }), this.setTableHeaderRow(L), this.printHeaderRow(1, !1);
    }
    var j = h.reduce(function (t, e) {
      return t[e.name] = e.align, t;
    }, {});
    for (f = 0; f < u.length; f += 1) {
      "rowStart" in l && l.rowStart instanceof Function && l.rowStart({
        row: f,
        data: u[f]
      }, this);
      var O = c.call(this, u[f], w);
      for (p = 0; p < m.length; p += 1) {
        var B = u[f][m[p]];
        "cellStart" in l && l.cellStart instanceof Function && l.cellStart({
          row: f,
          col: p,
          data: B
        }, this), s.call(this, new o(e, n, w[m[p]], O, B, f + 2, j[m[p]]));
      }
    }
    return this.internal.__cell__.table_x = e, this.internal.__cell__.table_y = n, this;
  };
  var c = function (t, e) {
    var r = this.internal.__cell__.padding,
      n = this.internal.__cell__.table_font_size,
      i = this.internal.scaleFactor;
    return Object.keys(t).map(function (n) {
      var i = t[n];
      return this.splitTextToSize(i.hasOwnProperty("text") ? i.text : i, e[n] - r - r);
    }, this).map(function (t) {
      return this.getLineHeightFactor() * t.length * n / i + r + r;
    }, this).reduce(function (t, e) {
      return Math.max(t, e);
    }, 0);
  };
  e.setTableHeaderRow = function (t) {
    i.call(this), this.internal.__cell__.tableHeaderRow = t;
  }, e.printHeaderRow = function (t, e) {
    if (i.call(this), !this.internal.__cell__.tableHeaderRow) throw new Error("Property tableHeaderRow does not exist.");
    var r;
    if (n = !0, "function" == typeof this.internal.__cell__.headerFunction) {
      var a = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);
      this.internal.__cell__.lastCell = new o(a[0], a[1], a[2], a[3], void 0, -1);
    }
    this.setFont(void 0, "bold");
    for (var c = [], u = 0; u < this.internal.__cell__.tableHeaderRow.length; u += 1) {
      r = this.internal.__cell__.tableHeaderRow[u].clone(), e && (r.y = this.internal.__cell__.margins.top || 0, c.push(r)), r.lineNumber = t;
      var h = this.getTextColor();
      this.setTextColor(this.internal.__cell__.headerTextColor), this.setFillColor(this.internal.__cell__.headerBackgroundColor), s.call(this, r), this.setTextColor(h);
    }
    c.length > 0 && this.setTableHeaderRow(c), this.setFont(void 0, "normal"), n = !1;
  };
}(E.API);
var Pt = {
    italic: ["italic", "oblique", "normal"],
    oblique: ["oblique", "italic", "normal"],
    normal: ["normal", "oblique", "italic"]
  },
  kt = ["ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "normal", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded"],
  It = _t(kt),
  Ft = [100, 200, 300, 400, 500, 600, 700, 800, 900],
  Ct = _t(Ft);
function jt(t) {
  var e = t.family.replace(/"|'/g, "").toLowerCase(),
    r = function (t) {
      return Pt[t = t || "normal"] ? t : "normal";
    }(t.style),
    n = function (t) {
      if (!t) return 400;
      if ("number" == typeof t) return t >= 100 && t <= 900 && t % 100 == 0 ? t : 400;
      if (/^\d00$/.test(t)) return parseInt(t);
      switch (t) {
        case "bold":
          return 700;
        case "normal":
        default:
          return 400;
      }
    }(t.weight),
    i = function (t) {
      return "number" == typeof It[t = t || "normal"] ? t : "normal";
    }(t.stretch);
  return {
    family: e,
    style: r,
    weight: n,
    stretch: i,
    src: t.src || [],
    ref: t.ref || {
      name: e,
      style: [i, r, n].join(" ")
    }
  };
}
function Ot(t, e, r, n) {
  var i;
  for (i = r; i >= 0 && i < e.length; i += n) if (t[e[i]]) return t[e[i]];
  for (i = r; i >= 0 && i < e.length; i -= n) if (t[e[i]]) return t[e[i]];
}
var Bt = {
    "sans-serif": "helvetica",
    fixed: "courier",
    monospace: "courier",
    terminal: "courier",
    cursive: "times",
    fantasy: "times",
    serif: "times"
  },
  Mt = {
    caption: "times",
    icon: "times",
    menu: "times",
    "message-box": "times",
    "small-caption": "times",
    "status-bar": "times"
  };
function Et(t) {
  return [t.stretch, t.style, t.weight, t.family].join(" ");
}
function qt(t, e, r) {
  for (var n = (r = r || {}).defaultFontFamily || "times", i = Object.assign({}, Bt, r.genericFontFamilies || {}), a = null, o = null, s = 0; s < e.length; ++s) if (i[(a = jt(e[s])).family] && (a.family = i[a.family]), t.hasOwnProperty(a.family)) {
    o = t[a.family];
    break;
  }
  if (!(o = o || t[n])) throw new Error("Could not find a font-family for the rule '" + Et(a) + "' and default family '" + n + "'.");
  if (o = function (t, e) {
    if (e[t]) return e[t];
    var r = It[t],
      n = r <= It.normal ? -1 : 1,
      i = Ot(e, kt, r, n);
    if (!i) throw new Error("Could not find a matching font-stretch value for " + t);
    return i;
  }(a.stretch, o), o = function (t, e) {
    if (e[t]) return e[t];
    for (var r = Pt[t], n = 0; n < r.length; ++n) if (e[r[n]]) return e[r[n]];
    throw new Error("Could not find a matching font-style for " + t);
  }(a.style, o), !(o = function (t, e) {
    if (e[t]) return e[t];
    if (400 === t && e[500]) return e[500];
    if (500 === t && e[400]) return e[400];
    var r = Ct[t],
      n = Ot(e, Ft, r, t < 400 ? -1 : 1);
    if (!n) throw new Error("Could not find a matching font-weight for value " + t);
    return n;
  }(a.weight, o))) throw new Error("Failed to resolve a font for the rule '" + Et(a) + "'.");
  return o;
}
function Dt(t) {
  return t.trimLeft();
}
function Rt(t, e) {
  for (var r = 0; r < t.length;) {
    if (t.charAt(r) === e) return [t.substring(0, r), t.substring(r + 1)];
    r += 1;
  }
  return null;
}
function Tt(t) {
  var e = t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);
  return null === e ? null : [e[0], t.substring(e[0].length)];
}
var Ut,
  zt,
  Ht,
  Wt = ["times"];
!function (e) {
  var r,
    n,
    i,
    o,
    s,
    c,
    u,
    h,
    l,
    d = function (t) {
      return t = t || {}, this.isStrokeTransparent = t.isStrokeTransparent || !1, this.strokeOpacity = t.strokeOpacity || 1, this.strokeStyle = t.strokeStyle || "#000000", this.fillStyle = t.fillStyle || "#000000", this.isFillTransparent = t.isFillTransparent || !1, this.fillOpacity = t.fillOpacity || 1, this.font = t.font || "10px sans-serif", this.textBaseline = t.textBaseline || "alphabetic", this.textAlign = t.textAlign || "left", this.lineWidth = t.lineWidth || 1, this.lineJoin = t.lineJoin || "miter", this.lineCap = t.lineCap || "butt", this.path = t.path || [], this.transform = void 0 !== t.transform ? t.transform.clone() : new h(), this.globalCompositeOperation = t.globalCompositeOperation || "normal", this.globalAlpha = t.globalAlpha || 1, this.clip_path = t.clip_path || [], this.currentPoint = t.currentPoint || new c(), this.miterLimit = t.miterLimit || 10, this.lastPoint = t.lastPoint || new c(), this.lineDashOffset = t.lineDashOffset || 0, this.lineDash = t.lineDash || [], this.margin = t.margin || [0, 0, 0, 0], this.prevPageLastElemOffset = t.prevPageLastElemOffset || 0, this.ignoreClearRect = "boolean" != typeof t.ignoreClearRect || t.ignoreClearRect, this;
    };
  e.events.push(["initialized", function () {
    this.context2d = new p(this), r = this.internal.f2, n = this.internal.getCoordinateString, i = this.internal.getVerticalCoordinateString, o = this.internal.getHorizontalCoordinate, s = this.internal.getVerticalCoordinate, c = this.internal.Point, u = this.internal.Rectangle, h = this.internal.Matrix, l = new d();
  }]);
  var p = function (t) {
    Object.defineProperty(this, "canvas", {
      get: function () {
        return {
          parentNode: !1,
          style: !1
        };
      }
    });
    var e = t;
    Object.defineProperty(this, "pdf", {
      get: function () {
        return e;
      }
    });
    var r = !1;
    Object.defineProperty(this, "pageWrapXEnabled", {
      get: function () {
        return r;
      },
      set: function (t) {
        r = Boolean(t);
      }
    });
    var n = !1;
    Object.defineProperty(this, "pageWrapYEnabled", {
      get: function () {
        return n;
      },
      set: function (t) {
        n = Boolean(t);
      }
    });
    var i = 0;
    Object.defineProperty(this, "posX", {
      get: function () {
        return i;
      },
      set: function (t) {
        isNaN(t) || (i = t);
      }
    });
    var a = 0;
    Object.defineProperty(this, "posY", {
      get: function () {
        return a;
      },
      set: function (t) {
        isNaN(t) || (a = t);
      }
    }), Object.defineProperty(this, "margin", {
      get: function () {
        return l.margin;
      },
      set: function (t) {
        var e;
        "number" == typeof t ? e = [t, t, t, t] : ((e = new Array(4))[0] = t[0], e[1] = t.length >= 2 ? t[1] : e[0], e[2] = t.length >= 3 ? t[2] : e[0], e[3] = t.length >= 4 ? t[3] : e[1]), l.margin = e;
      }
    });
    var o = !1;
    Object.defineProperty(this, "autoPaging", {
      get: function () {
        return o;
      },
      set: function (t) {
        o = t;
      }
    });
    var s = 0;
    Object.defineProperty(this, "lastBreak", {
      get: function () {
        return s;
      },
      set: function (t) {
        s = t;
      }
    });
    var c = [];
    Object.defineProperty(this, "pageBreaks", {
      get: function () {
        return c;
      },
      set: function (t) {
        c = t;
      }
    }), Object.defineProperty(this, "ctx", {
      get: function () {
        return l;
      },
      set: function (t) {
        t instanceof d && (l = t);
      }
    }), Object.defineProperty(this, "path", {
      get: function () {
        return l.path;
      },
      set: function (t) {
        l.path = t;
      }
    });
    var u = [];
    Object.defineProperty(this, "ctxStack", {
      get: function () {
        return u;
      },
      set: function (t) {
        u = t;
      }
    }), Object.defineProperty(this, "fillStyle", {
      get: function () {
        return this.ctx.fillStyle;
      },
      set: function (t) {
        var e;
        e = g(t), this.ctx.fillStyle = e.style, this.ctx.isFillTransparent = 0 === e.a, this.ctx.fillOpacity = e.a, this.pdf.setFillColor(e.r, e.g, e.b, {
          a: e.a
        }), this.pdf.setTextColor(e.r, e.g, e.b, {
          a: e.a
        });
      }
    }), Object.defineProperty(this, "strokeStyle", {
      get: function () {
        return this.ctx.strokeStyle;
      },
      set: function (t) {
        var e = g(t);
        this.ctx.strokeStyle = e.style, this.ctx.isStrokeTransparent = 0 === e.a, this.ctx.strokeOpacity = e.a, 0 === e.a ? this.pdf.setDrawColor(255, 255, 255) : (e.a, this.pdf.setDrawColor(e.r, e.g, e.b));
      }
    }), Object.defineProperty(this, "lineCap", {
      get: function () {
        return this.ctx.lineCap;
      },
      set: function (t) {
        -1 !== ["butt", "round", "square"].indexOf(t) && (this.ctx.lineCap = t, this.pdf.setLineCap(t));
      }
    }), Object.defineProperty(this, "lineWidth", {
      get: function () {
        return this.ctx.lineWidth;
      },
      set: function (t) {
        isNaN(t) || (this.ctx.lineWidth = t, this.pdf.setLineWidth(t));
      }
    }), Object.defineProperty(this, "lineJoin", {
      get: function () {
        return this.ctx.lineJoin;
      },
      set: function (t) {
        -1 !== ["bevel", "round", "miter"].indexOf(t) && (this.ctx.lineJoin = t, this.pdf.setLineJoin(t));
      }
    }), Object.defineProperty(this, "miterLimit", {
      get: function () {
        return this.ctx.miterLimit;
      },
      set: function (t) {
        isNaN(t) || (this.ctx.miterLimit = t, this.pdf.setMiterLimit(t));
      }
    }), Object.defineProperty(this, "textBaseline", {
      get: function () {
        return this.ctx.textBaseline;
      },
      set: function (t) {
        this.ctx.textBaseline = t;
      }
    }), Object.defineProperty(this, "textAlign", {
      get: function () {
        return this.ctx.textAlign;
      },
      set: function (t) {
        -1 !== ["right", "end", "center", "left", "start"].indexOf(t) && (this.ctx.textAlign = t);
      }
    });
    var h = null;
    function f(t, e) {
      if (null === h) {
        var r = function (t) {
          var e = [];
          return Object.keys(t).forEach(function (r) {
            t[r].forEach(function (t) {
              var n = null;
              switch (t) {
                case "bold":
                  n = {
                    family: r,
                    weight: "bold"
                  };
                  break;
                case "italic":
                  n = {
                    family: r,
                    style: "italic"
                  };
                  break;
                case "bolditalic":
                  n = {
                    family: r,
                    weight: "bold",
                    style: "italic"
                  };
                  break;
                case "":
                case "normal":
                  n = {
                    family: r
                  };
              }
              null !== n && (n.ref = {
                name: r,
                style: t
              }, e.push(n));
            });
          }), e;
        }(t.getFontList());
        h = function (t) {
          for (var e = {}, r = 0; r < t.length; ++r) {
            var n = jt(t[r]),
              i = n.family,
              a = n.stretch,
              o = n.style,
              s = n.weight;
            e[i] = e[i] || {}, e[i][a] = e[i][a] || {}, e[i][a][o] = e[i][a][o] || {}, e[i][a][o][s] = n;
          }
          return e;
        }(r.concat(e));
      }
      return h;
    }
    var p = null;
    Object.defineProperty(this, "fontFaces", {
      get: function () {
        return p;
      },
      set: function (t) {
        h = null, p = t;
      }
    }), Object.defineProperty(this, "font", {
      get: function () {
        return this.ctx.font;
      },
      set: function (t) {
        var e;
        if (this.ctx.font = t, null !== (e = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t))) {
          var r = e[1],
            n = (e[2], e[3]),
            i = e[4],
            a = (e[5], e[6]),
            o = /^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i)[2];
          i = "px" === o ? Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor) : "em" === o ? Math.floor(parseFloat(i) * this.pdf.getFontSize()) : Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor), this.pdf.setFontSize(i);
          var s = function (t) {
            var e,
              r,
              n = [],
              i = t.trim();
            if ("" === i) return Wt;
            if (i in Mt) return [Mt[i]];
            for (; "" !== i;) {
              switch (r = null, e = (i = Dt(i)).charAt(0)) {
                case '"':
                case "'":
                  r = Rt(i.substring(1), e);
                  break;
                default:
                  r = Tt(i);
              }
              if (null === r) return Wt;
              if (n.push(r[0]), "" !== (i = Dt(r[1])) && "," !== i.charAt(0)) return Wt;
              i = i.replace(/^,/, "");
            }
            return n;
          }(a);
          if (this.fontFaces) {
            var c = qt(f(this.pdf, this.fontFaces), s.map(function (t) {
              return {
                family: t,
                stretch: "normal",
                weight: n,
                style: r
              };
            }));
            this.pdf.setFont(c.ref.name, c.ref.style);
          } else {
            var u = "";
            ("bold" === n || parseInt(n, 10) >= 700 || "bold" === r) && (u = "bold"), "italic" === r && (u += "italic"), 0 === u.length && (u = "normal");
            for (var h = "", l = {
                arial: "Helvetica",
                Arial: "Helvetica",
                verdana: "Helvetica",
                Verdana: "Helvetica",
                helvetica: "Helvetica",
                Helvetica: "Helvetica",
                "sans-serif": "Helvetica",
                fixed: "Courier",
                monospace: "Courier",
                terminal: "Courier",
                cursive: "Times",
                fantasy: "Times",
                serif: "Times"
              }, d = 0; d < s.length; d++) {
              if (void 0 !== this.pdf.internal.getFont(s[d], u, {
                noFallback: !0,
                disableWarning: !0
              })) {
                h = s[d];
                break;
              }
              if ("bolditalic" === u && void 0 !== this.pdf.internal.getFont(s[d], "bold", {
                noFallback: !0,
                disableWarning: !0
              })) h = s[d], u = "bold";else if (void 0 !== this.pdf.internal.getFont(s[d], "normal", {
                noFallback: !0,
                disableWarning: !0
              })) {
                h = s[d], u = "normal";
                break;
              }
            }
            if ("" === h) for (var p = 0; p < s.length; p++) if (l[s[p]]) {
              h = l[s[p]];
              break;
            }
            h = "" === h ? "Times" : h, this.pdf.setFont(h, u);
          }
        }
      }
    }), Object.defineProperty(this, "globalCompositeOperation", {
      get: function () {
        return this.ctx.globalCompositeOperation;
      },
      set: function (t) {
        this.ctx.globalCompositeOperation = t;
      }
    }), Object.defineProperty(this, "globalAlpha", {
      get: function () {
        return this.ctx.globalAlpha;
      },
      set: function (t) {
        this.ctx.globalAlpha = t;
      }
    }), Object.defineProperty(this, "lineDashOffset", {
      get: function () {
        return this.ctx.lineDashOffset;
      },
      set: function (t) {
        this.ctx.lineDashOffset = t, T.call(this);
      }
    }), Object.defineProperty(this, "lineDash", {
      get: function () {
        return this.ctx.lineDash;
      },
      set: function (t) {
        this.ctx.lineDash = t, T.call(this);
      }
    }), Object.defineProperty(this, "ignoreClearRect", {
      get: function () {
        return this.ctx.ignoreClearRect;
      },
      set: function (t) {
        this.ctx.ignoreClearRect = Boolean(t);
      }
    });
  };
  p.prototype.setLineDash = function (t) {
    this.lineDash = t;
  }, p.prototype.getLineDash = function () {
    return this.lineDash.length % 2 ? this.lineDash.concat(this.lineDash) : this.lineDash.slice();
  }, p.prototype.fill = function () {
    A.call(this, "fill", !1);
  }, p.prototype.stroke = function () {
    A.call(this, "stroke", !1);
  }, p.prototype.beginPath = function () {
    this.path = [{
      type: "begin"
    }];
  }, p.prototype.moveTo = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.moveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.moveTo");
    var r = this.ctx.transform.applyToPoint(new c(t, e));
    this.path.push({
      type: "mt",
      x: r.x,
      y: r.y
    }), this.ctx.lastPoint = new c(t, e);
  }, p.prototype.closePath = function () {
    var e = new c(0, 0),
      r = 0;
    for (r = this.path.length - 1; -1 !== r; r--) if ("begin" === this.path[r].type && "object" === (0, _typeof.default)(this.path[r + 1]) && "number" == typeof this.path[r + 1].x) {
      e = new c(this.path[r + 1].x, this.path[r + 1].y);
      break;
    }
    this.path.push({
      type: "close"
    }), this.ctx.lastPoint = new c(e.x, e.y);
  }, p.prototype.lineTo = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.lineTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.lineTo");
    var r = this.ctx.transform.applyToPoint(new c(t, e));
    this.path.push({
      type: "lt",
      x: r.x,
      y: r.y
    }), this.ctx.lastPoint = new c(r.x, r.y);
  }, p.prototype.clip = function () {
    this.ctx.clip_path = JSON.parse(JSON.stringify(this.path)), A.call(this, null, !0);
  }, p.prototype.quadraticCurveTo = function (t, e, r, n) {
    if (isNaN(r) || isNaN(n) || isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");
    var i = this.ctx.transform.applyToPoint(new c(r, n)),
      o = this.ctx.transform.applyToPoint(new c(t, e));
    this.path.push({
      type: "qct",
      x1: o.x,
      y1: o.y,
      x: i.x,
      y: i.y
    }), this.ctx.lastPoint = new c(i.x, i.y);
  }, p.prototype.bezierCurveTo = function (t, e, r, n, i, o) {
    if (isNaN(i) || isNaN(o) || isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.bezierCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");
    var s = this.ctx.transform.applyToPoint(new c(i, o)),
      u = this.ctx.transform.applyToPoint(new c(t, e)),
      h = this.ctx.transform.applyToPoint(new c(r, n));
    this.path.push({
      type: "bct",
      x1: u.x,
      y1: u.y,
      x2: h.x,
      y2: h.y,
      x: s.x,
      y: s.y
    }), this.ctx.lastPoint = new c(s.x, s.y);
  }, p.prototype.arc = function (t, e, r, n, i, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i)) throw a.error("jsPDF.context2d.arc: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.arc");
    if (o = Boolean(o), !this.ctx.transform.isIdentity) {
      var s = this.ctx.transform.applyToPoint(new c(t, e));
      t = s.x, e = s.y;
      var u = this.ctx.transform.applyToPoint(new c(0, r)),
        h = this.ctx.transform.applyToPoint(new c(0, 0));
      r = Math.sqrt(Math.pow(u.x - h.x, 2) + Math.pow(u.y - h.y, 2));
    }
    Math.abs(i - n) >= 2 * Math.PI && (n = 0, i = 2 * Math.PI), this.path.push({
      type: "arc",
      x: t,
      y: e,
      radius: r,
      startAngle: n,
      endAngle: i,
      counterclockwise: o
    });
  }, p.prototype.arcTo = function (t, e, r, n, i) {
    throw new Error("arcTo not implemented.");
  }, p.prototype.rect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.rect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rect");
    this.moveTo(t, e), this.lineTo(t + r, e), this.lineTo(t + r, e + n), this.lineTo(t, e + n), this.lineTo(t, e), this.lineTo(t + r, e), this.lineTo(t, e);
  }, p.prototype.fillRect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.fillRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillRect");
    if (!m.call(this)) {
      var i = {};
      "butt" !== this.lineCap && (i.lineCap = this.lineCap, this.lineCap = "butt"), "miter" !== this.lineJoin && (i.lineJoin = this.lineJoin, this.lineJoin = "miter"), this.beginPath(), this.rect(t, e, r, n), this.fill(), i.hasOwnProperty("lineCap") && (this.lineCap = i.lineCap), i.hasOwnProperty("lineJoin") && (this.lineJoin = i.lineJoin);
    }
  }, p.prototype.strokeRect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.strokeRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");
    v.call(this) || (this.beginPath(), this.rect(t, e, r, n), this.stroke());
  }, p.prototype.clearRect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.clearRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.clearRect");
    this.ignoreClearRect || (this.fillStyle = "#ffffff", this.fillRect(t, e, r, n));
  }, p.prototype.save = function (t) {
    t = "boolean" != typeof t || t;
    for (var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++) this.pdf.setPage(r + 1), this.pdf.internal.out("q");
    if (this.pdf.setPage(e), t) {
      this.ctx.fontSize = this.pdf.internal.getFontSize();
      var n = new d(this.ctx);
      this.ctxStack.push(this.ctx), this.ctx = n;
    }
  }, p.prototype.restore = function (t) {
    t = "boolean" != typeof t || t;
    for (var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++) this.pdf.setPage(r + 1), this.pdf.internal.out("Q");
    this.pdf.setPage(e), t && 0 !== this.ctxStack.length && (this.ctx = this.ctxStack.pop(), this.fillStyle = this.ctx.fillStyle, this.strokeStyle = this.ctx.strokeStyle, this.font = this.ctx.font, this.lineCap = this.ctx.lineCap, this.lineWidth = this.ctx.lineWidth, this.lineJoin = this.ctx.lineJoin, this.lineDash = this.ctx.lineDash, this.lineDashOffset = this.ctx.lineDashOffset);
  }, p.prototype.toDataURL = function () {
    throw new Error("toDataUrl not implemented.");
  };
  var g = function (t) {
      var e, r, n, i;
      if (!0 === t.isCanvasGradient && (t = t.getColor()), !t) return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        style: t
      };
      if (/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t)) e = 0, r = 0, n = 0, i = 0;else {
        var a = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);
        if (null !== a) e = parseInt(a[1]), r = parseInt(a[2]), n = parseInt(a[3]), i = 1;else if (null !== (a = /rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/.exec(t))) e = parseInt(a[1]), r = parseInt(a[2]), n = parseInt(a[3]), i = parseFloat(a[4]);else {
          if (i = 1, "string" == typeof t && "#" !== t.charAt(0)) {
            var o = new f(t);
            t = o.ok ? o.toHex() : "#000000";
          }
          4 === t.length ? (e = t.substring(1, 2), e += e, r = t.substring(2, 3), r += r, n = t.substring(3, 4), n += n) : (e = t.substring(1, 3), r = t.substring(3, 5), n = t.substring(5, 7)), e = parseInt(e, 16), r = parseInt(r, 16), n = parseInt(n, 16);
        }
      }
      return {
        r: e,
        g: r,
        b: n,
        a: i,
        style: t
      };
    },
    m = function () {
      return this.ctx.isFillTransparent || 0 == this.globalAlpha;
    },
    v = function () {
      return Boolean(this.ctx.isStrokeTransparent || 0 == this.globalAlpha);
    };
  p.prototype.fillText = function (t, e, r, n) {
    if (isNaN(e) || isNaN(r) || "string" != typeof t) throw a.error("jsPDF.context2d.fillText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillText");
    if (n = isNaN(n) ? void 0 : n, !m.call(this)) {
      var i = q(this.ctx.transform.rotation),
        o = this.ctx.transform.scaleX;
      C.call(this, {
        text: t,
        x: e,
        y: r,
        scale: o,
        angle: i,
        align: this.textAlign,
        maxWidth: n
      });
    }
  }, p.prototype.strokeText = function (t, e, r, n) {
    if (isNaN(e) || isNaN(r) || "string" != typeof t) throw a.error("jsPDF.context2d.strokeText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeText");
    if (!v.call(this)) {
      n = isNaN(n) ? void 0 : n;
      var i = q(this.ctx.transform.rotation),
        o = this.ctx.transform.scaleX;
      C.call(this, {
        text: t,
        x: e,
        y: r,
        scale: o,
        renderingMode: "stroke",
        angle: i,
        align: this.textAlign,
        maxWidth: n
      });
    }
  }, p.prototype.measureText = function (t) {
    if ("string" != typeof t) throw a.error("jsPDF.context2d.measureText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.measureText");
    var e = this.pdf,
      r = this.pdf.internal.scaleFactor,
      n = e.internal.getFontSize(),
      i = e.getStringUnitWidth(t) * n / e.internal.scaleFactor,
      o = function (t) {
        var e = (t = t || {}).width || 0;
        return Object.defineProperty(this, "width", {
          get: function () {
            return e;
          }
        }), this;
      };
    return new o({
      width: i *= Math.round(96 * r / 72 * 1e4) / 1e4
    });
  }, p.prototype.scale = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.scale: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.scale");
    var r = new h(t, 0, 0, e, 0, 0);
    this.ctx.transform = this.ctx.transform.multiply(r);
  }, p.prototype.rotate = function (t) {
    if (isNaN(t)) throw a.error("jsPDF.context2d.rotate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rotate");
    var e = new h(Math.cos(t), Math.sin(t), -Math.sin(t), Math.cos(t), 0, 0);
    this.ctx.transform = this.ctx.transform.multiply(e);
  }, p.prototype.translate = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.translate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.translate");
    var r = new h(1, 0, 0, 1, t, e);
    this.ctx.transform = this.ctx.transform.multiply(r);
  }, p.prototype.transform = function (t, e, r, n, i, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(o)) throw a.error("jsPDF.context2d.transform: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.transform");
    var s = new h(t, e, r, n, i, o);
    this.ctx.transform = this.ctx.transform.multiply(s);
  }, p.prototype.setTransform = function (t, e, r, n, i, a) {
    t = isNaN(t) ? 1 : t, e = isNaN(e) ? 0 : e, r = isNaN(r) ? 0 : r, n = isNaN(n) ? 1 : n, i = isNaN(i) ? 0 : i, a = isNaN(a) ? 0 : a, this.ctx.transform = new h(t, e, r, n, i, a);
  };
  var b = function () {
    return this.margin[0] > 0 || this.margin[1] > 0 || this.margin[2] > 0 || this.margin[3] > 0;
  };
  p.prototype.drawImage = function (t, e, r, n, i, a, o, s, c) {
    var l = this.pdf.getImageProperties(t),
      f = 1,
      d = 1,
      p = 1,
      g = 1;
    void 0 !== n && void 0 !== s && (p = s / n, g = c / i, f = l.width / n * s / n, d = l.height / i * c / i), void 0 === a && (a = e, o = r, e = 0, r = 0), void 0 !== n && void 0 === s && (s = n, c = i), void 0 === n && void 0 === s && (s = l.width, c = l.height);
    for (var m, v = this.ctx.transform.decompose(), w = q(v.rotate.shx), A = new h(), S = (A = (A = (A = A.multiply(v.translate)).multiply(v.skew)).multiply(v.scale)).applyToRectangle(new u(a - e * p, o - r * g, n * f, i * d)), _ = y.call(this, S), P = [], k = 0; k < _.length; k += 1) -1 === P.indexOf(_[k]) && P.push(_[k]);
    if (L(P), this.autoPaging) for (var I = P[0], F = P[P.length - 1], C = I; C < F + 1; C++) {
      this.pdf.setPage(C);
      var j = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1],
        O = 1 === C ? this.posY + this.margin[0] : this.margin[0],
        B = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2],
        M = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2],
        E = 1 === C ? 0 : B + (C - 2) * M;
      if (0 !== this.ctx.clip_path.length) {
        var D = this.path;
        m = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(m, this.posX + this.margin[3], -E + O + this.ctx.prevPageLastElemOffset), x.call(this, "fill", !0), this.path = D;
      }
      var R = JSON.parse(JSON.stringify(S));
      R = N([R], this.posX + this.margin[3], -E + O + this.ctx.prevPageLastElemOffset)[0];
      var T = (C > I || C < F) && b.call(this);
      T && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], j, M, null).clip().discardPath()), this.pdf.addImage(t, "JPEG", R.x, R.y, R.w, R.h, null, null, w), T && this.pdf.restoreGraphicsState();
    } else this.pdf.addImage(t, "JPEG", S.x, S.y, S.w, S.h, null, null, w);
  };
  var y = function (t, e, r) {
      var n = [];
      e = e || this.pdf.internal.pageSize.width, r = r || this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2];
      var i = this.posY + this.ctx.prevPageLastElemOffset;
      switch (t.type) {
        default:
        case "mt":
        case "lt":
          n.push(Math.floor((t.y + i) / r) + 1);
          break;
        case "arc":
          n.push(Math.floor((t.y + i - t.radius) / r) + 1), n.push(Math.floor((t.y + i + t.radius) / r) + 1);
          break;
        case "qct":
          var a = D(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x, t.y);
          n.push(Math.floor((a.y + i) / r) + 1), n.push(Math.floor((a.y + a.h + i) / r) + 1);
          break;
        case "bct":
          var o = R(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x2, t.y2, t.x, t.y);
          n.push(Math.floor((o.y + i) / r) + 1), n.push(Math.floor((o.y + o.h + i) / r) + 1);
          break;
        case "rect":
          n.push(Math.floor((t.y + i) / r) + 1), n.push(Math.floor((t.y + t.h + i) / r) + 1);
      }
      for (var s = 0; s < n.length; s += 1) for (; this.pdf.internal.getNumberOfPages() < n[s];) w.call(this);
      return n;
    },
    w = function () {
      var t = this.fillStyle,
        e = this.strokeStyle,
        r = this.font,
        n = this.lineCap,
        i = this.lineWidth,
        a = this.lineJoin;
      this.pdf.addPage(), this.fillStyle = t, this.strokeStyle = e, this.font = r, this.lineCap = n, this.lineWidth = i, this.lineJoin = a;
    },
    N = function (t, e, r) {
      for (var n = 0; n < t.length; n++) switch (t[n].type) {
        case "bct":
          t[n].x2 += e, t[n].y2 += r;
        case "qct":
          t[n].x1 += e, t[n].y1 += r;
        case "mt":
        case "lt":
        case "arc":
        default:
          t[n].x += e, t[n].y += r;
      }
      return t;
    },
    L = function (t) {
      return t.sort(function (t, e) {
        return t - e;
      });
    },
    A = function (t, e) {
      for (var r, n, i = this.fillStyle, a = this.strokeStyle, o = this.lineCap, s = this.lineWidth, c = Math.abs(s * this.ctx.transform.scaleX), u = this.lineJoin, h = JSON.parse(JSON.stringify(this.path)), l = JSON.parse(JSON.stringify(this.path)), f = [], d = 0; d < l.length; d++) if (void 0 !== l[d].x) for (var p = y.call(this, l[d]), g = 0; g < p.length; g += 1) -1 === f.indexOf(p[g]) && f.push(p[g]);
      for (var m = 0; m < f.length; m++) for (; this.pdf.internal.getNumberOfPages() < f[m];) w.call(this);
      if (L(f), this.autoPaging) for (var v = f[0], A = f[f.length - 1], S = v; S < A + 1; S++) {
        this.pdf.setPage(S), this.fillStyle = i, this.strokeStyle = a, this.lineCap = o, this.lineWidth = c, this.lineJoin = u;
        var _ = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1],
          P = 1 === S ? this.posY + this.margin[0] : this.margin[0],
          k = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2],
          I = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2],
          F = 1 === S ? 0 : k + (S - 2) * I;
        if (0 !== this.ctx.clip_path.length) {
          var C = this.path;
          r = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(r, this.posX + this.margin[3], -F + P + this.ctx.prevPageLastElemOffset), x.call(this, t, !0), this.path = C;
        }
        if (n = JSON.parse(JSON.stringify(h)), this.path = N(n, this.posX + this.margin[3], -F + P + this.ctx.prevPageLastElemOffset), !1 === e || 0 === S) {
          var j = (S > v || S < A) && b.call(this);
          j && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], _, I, null).clip().discardPath()), x.call(this, t, e), j && this.pdf.restoreGraphicsState();
        }
        this.lineWidth = s;
      } else this.lineWidth = c, x.call(this, t, e), this.lineWidth = s;
      this.path = h;
    },
    x = function (t, e) {
      if (("stroke" !== t || e || !v.call(this)) && ("stroke" === t || e || !m.call(this))) {
        for (var r, n, i = [], a = this.path, o = 0; o < a.length; o++) {
          var s = a[o];
          switch (s.type) {
            case "begin":
              i.push({
                begin: !0
              });
              break;
            case "close":
              i.push({
                close: !0
              });
              break;
            case "mt":
              i.push({
                start: s,
                deltas: [],
                abs: []
              });
              break;
            case "lt":
              var c = i.length;
              if (a[o - 1] && !isNaN(a[o - 1].x) && (r = [s.x - a[o - 1].x, s.y - a[o - 1].y], c > 0)) for (; c >= 0; c--) if (!0 !== i[c - 1].close && !0 !== i[c - 1].begin) {
                i[c - 1].deltas.push(r), i[c - 1].abs.push(s);
                break;
              }
              break;
            case "bct":
              r = [s.x1 - a[o - 1].x, s.y1 - a[o - 1].y, s.x2 - a[o - 1].x, s.y2 - a[o - 1].y, s.x - a[o - 1].x, s.y - a[o - 1].y], i[i.length - 1].deltas.push(r);
              break;
            case "qct":
              var u = a[o - 1].x + 2 / 3 * (s.x1 - a[o - 1].x),
                h = a[o - 1].y + 2 / 3 * (s.y1 - a[o - 1].y),
                l = s.x + 2 / 3 * (s.x1 - s.x),
                f = s.y + 2 / 3 * (s.y1 - s.y),
                d = s.x,
                p = s.y;
              r = [u - a[o - 1].x, h - a[o - 1].y, l - a[o - 1].x, f - a[o - 1].y, d - a[o - 1].x, p - a[o - 1].y], i[i.length - 1].deltas.push(r);
              break;
            case "arc":
              i.push({
                deltas: [],
                abs: [],
                arc: !0
              }), Array.isArray(i[i.length - 1].abs) && i[i.length - 1].abs.push(s);
          }
        }
        n = e ? null : "stroke" === t ? "stroke" : "fill";
        for (var g = !1, b = 0; b < i.length; b++) if (i[b].arc) for (var y = i[b].abs, w = 0; w < y.length; w++) {
          var N = y[w];
          "arc" === N.type ? P.call(this, N.x, N.y, N.radius, N.startAngle, N.endAngle, N.counterclockwise, void 0, e, !g) : j.call(this, N.x, N.y), g = !0;
        } else if (!0 === i[b].close) this.pdf.internal.out("h"), g = !1;else if (!0 !== i[b].begin) {
          var L = i[b].start.x,
            A = i[b].start.y;
          O.call(this, i[b].deltas, L, A), g = !0;
        }
        n && k.call(this, n), e && I.call(this);
      }
    },
    S = function (t) {
      var e = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor,
        r = e * (this.pdf.internal.getLineHeightFactor() - 1);
      switch (this.ctx.textBaseline) {
        case "bottom":
          return t - r;
        case "top":
          return t + e - r;
        case "hanging":
          return t + e - 2 * r;
        case "middle":
          return t + e / 2 - r;
        case "ideographic":
          return t;
        case "alphabetic":
        default:
          return t;
      }
    },
    _ = function (t) {
      return t + this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor * (this.pdf.internal.getLineHeightFactor() - 1);
    };
  p.prototype.createLinearGradient = function () {
    var t = function () {};
    return t.colorStops = [], t.addColorStop = function (t, e) {
      this.colorStops.push([t, e]);
    }, t.getColor = function () {
      return 0 === this.colorStops.length ? "#000000" : this.colorStops[0][1];
    }, t.isCanvasGradient = !0, t;
  }, p.prototype.createPattern = function () {
    return this.createLinearGradient();
  }, p.prototype.createRadialGradient = function () {
    return this.createLinearGradient();
  };
  var P = function (t, e, r, n, i, a, o, s, c) {
      for (var u = M.call(this, r, n, i, a), h = 0; h < u.length; h++) {
        var l = u[h];
        0 === h && (c ? F.call(this, l.x1 + t, l.y1 + e) : j.call(this, l.x1 + t, l.y1 + e)), B.call(this, t, e, l.x2, l.y2, l.x3, l.y3, l.x4, l.y4);
      }
      s ? I.call(this) : k.call(this, o);
    },
    k = function (t) {
      switch (t) {
        case "stroke":
          this.pdf.internal.out("S");
          break;
        case "fill":
          this.pdf.internal.out("f");
      }
    },
    I = function () {
      this.pdf.clip(), this.pdf.discardPath();
    },
    F = function (t, e) {
      this.pdf.internal.out(n(t) + " " + i(e) + " m");
    },
    C = function (t) {
      var e;
      switch (t.align) {
        case "right":
        case "end":
          e = "right";
          break;
        case "center":
          e = "center";
          break;
        case "left":
        case "start":
        default:
          e = "left";
      }
      var r = this.pdf.getTextDimensions(t.text),
        n = S.call(this, t.y),
        i = _.call(this, n) - r.h,
        a = this.ctx.transform.applyToPoint(new c(t.x, n)),
        o = this.ctx.transform.decompose(),
        s = new h();
      s = (s = (s = s.multiply(o.translate)).multiply(o.skew)).multiply(o.scale);
      for (var l, f, d, p = this.ctx.transform.applyToRectangle(new u(t.x, n, r.w, r.h)), g = s.applyToRectangle(new u(t.x, i, r.w, r.h)), m = y.call(this, g), v = [], w = 0; w < m.length; w += 1) -1 === v.indexOf(m[w]) && v.push(m[w]);
      if (L(v), this.autoPaging) for (var A = v[0], P = v[v.length - 1], k = A; k < P + 1; k++) {
        this.pdf.setPage(k);
        var I = 1 === k ? this.posY + this.margin[0] : this.margin[0],
          F = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2],
          C = this.pdf.internal.pageSize.height - this.margin[2],
          j = C - this.margin[0],
          O = this.pdf.internal.pageSize.width - this.margin[1],
          B = O - this.margin[3],
          M = 1 === k ? 0 : F + (k - 2) * j;
        if (0 !== this.ctx.clip_path.length) {
          var E = this.path;
          l = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(l, this.posX + this.margin[3], -1 * M + I), x.call(this, "fill", !0), this.path = E;
        }
        var q = N([JSON.parse(JSON.stringify(g))], this.posX + this.margin[3], -M + I + this.ctx.prevPageLastElemOffset)[0];
        t.scale >= .01 && (f = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f * t.scale), d = this.lineWidth, this.lineWidth = d * t.scale);
        var D = "text" !== this.autoPaging;
        if (D || q.y + q.h <= C) {
          if (D || q.y >= I && q.x <= O) {
            var R = D ? t.text : this.pdf.splitTextToSize(t.text, t.maxWidth || O - q.x)[0],
              T = N([JSON.parse(JSON.stringify(p))], this.posX + this.margin[3], -M + I + this.ctx.prevPageLastElemOffset)[0],
              U = D && (k > A || k < P) && b.call(this);
            U && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], B, j, null).clip().discardPath()), this.pdf.text(R, T.x, T.y, {
              angle: t.angle,
              align: e,
              renderingMode: t.renderingMode
            }), U && this.pdf.restoreGraphicsState();
          }
        } else q.y < C && (this.ctx.prevPageLastElemOffset += C - q.y);
        t.scale >= .01 && (this.pdf.setFontSize(f), this.lineWidth = d);
      } else t.scale >= .01 && (f = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f * t.scale), d = this.lineWidth, this.lineWidth = d * t.scale), this.pdf.text(t.text, a.x + this.posX, a.y + this.posY, {
        angle: t.angle,
        align: e,
        renderingMode: t.renderingMode,
        maxWidth: t.maxWidth
      }), t.scale >= .01 && (this.pdf.setFontSize(f), this.lineWidth = d);
    },
    j = function (t, e, r, a) {
      r = r || 0, a = a || 0, this.pdf.internal.out(n(t + r) + " " + i(e + a) + " l");
    },
    O = function (t, e, r) {
      return this.pdf.lines(t, e, r, null, null);
    },
    B = function (t, e, n, i, a, c, u, h) {
      this.pdf.internal.out([r(o(n + t)), r(s(i + e)), r(o(a + t)), r(s(c + e)), r(o(u + t)), r(s(h + e)), "c"].join(" "));
    },
    M = function (t, e, r, n) {
      for (var i = 2 * Math.PI, a = Math.PI / 2; e > r;) e -= i;
      var o = Math.abs(r - e);
      o < i && n && (o = i - o);
      for (var s = [], c = n ? -1 : 1, u = e; o > 1e-5;) {
        var h = u + c * Math.min(o, a);
        s.push(E.call(this, t, u, h)), o -= Math.abs(h - u), u = h;
      }
      return s;
    },
    E = function (t, e, r) {
      var n = (r - e) / 2,
        i = t * Math.cos(n),
        a = t * Math.sin(n),
        o = i,
        s = -a,
        c = o * o + s * s,
        u = c + o * i + s * a,
        h = 4 / 3 * (Math.sqrt(2 * c * u) - u) / (o * a - s * i),
        l = o - h * s,
        f = s + h * o,
        d = l,
        p = -f,
        g = n + e,
        m = Math.cos(g),
        v = Math.sin(g);
      return {
        x1: t * Math.cos(e),
        y1: t * Math.sin(e),
        x2: l * m - f * v,
        y2: l * v + f * m,
        x3: d * m - p * v,
        y3: d * v + p * m,
        x4: t * Math.cos(r),
        y4: t * Math.sin(r)
      };
    },
    q = function (t) {
      return 180 * t / Math.PI;
    },
    D = function (t, e, r, n, i, a) {
      var o = t + .5 * (r - t),
        s = e + .5 * (n - e),
        c = i + .5 * (r - i),
        h = a + .5 * (n - a),
        l = Math.min(t, i, o, c),
        f = Math.max(t, i, o, c),
        d = Math.min(e, a, s, h),
        p = Math.max(e, a, s, h);
      return new u(l, d, f - l, p - d);
    },
    R = function (t, e, r, n, i, a, o, s) {
      var c,
        h,
        l,
        f,
        d,
        p,
        g,
        m,
        v,
        b,
        y,
        w,
        N,
        L,
        A = r - t,
        x = n - e,
        S = i - r,
        _ = a - n,
        P = o - i,
        k = s - a;
      for (h = 0; h < 41; h++) v = (g = (l = t + (c = h / 40) * A) + c * ((d = r + c * S) - l)) + c * (d + c * (i + c * P - d) - g), b = (m = (f = e + c * x) + c * ((p = n + c * _) - f)) + c * (p + c * (a + c * k - p) - m), 0 == h ? (y = v, w = b, N = v, L = b) : (y = Math.min(y, v), w = Math.min(w, b), N = Math.max(N, v), L = Math.max(L, b));
      return new u(Math.round(y), Math.round(w), Math.round(N - y), Math.round(L - w));
    },
    T = function () {
      if (this.prevLineDash || this.ctx.lineDash.length || this.ctx.lineDashOffset) {
        var t,
          e,
          r = (t = this.ctx.lineDash, e = this.ctx.lineDashOffset, JSON.stringify({
            lineDash: t,
            lineDashOffset: e
          }));
        this.prevLineDash !== r && (this.pdf.setLineDash(this.ctx.lineDash, this.ctx.lineDashOffset), this.prevLineDash = r);
      }
    };
}(E.API),
/**
 * @license
 * jsPDF filters PlugIn
 * Copyright (c) 2014 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var r = function (t) {
      var e, r, n, i, a, o, s, c, u, h;
      for (/[^\x00-\xFF]/.test(t), r = [], n = 0, i = (t += e = "\0\0\0\0".slice(t.length % 4 || 4)).length; i > n; n += 4) 0 !== (a = (t.charCodeAt(n) << 24) + (t.charCodeAt(n + 1) << 16) + (t.charCodeAt(n + 2) << 8) + t.charCodeAt(n + 3)) ? (o = (a = ((a = ((a = ((a = (a - (h = a % 85)) / 85) - (u = a % 85)) / 85) - (c = a % 85)) / 85) - (s = a % 85)) / 85) % 85, r.push(o + 33, s + 33, c + 33, u + 33, h + 33)) : r.push(122);
      return function (t, e) {
        for (var r = e; r > 0; r--) t.pop();
      }(r, e.length), String.fromCharCode.apply(String, r) + "~>";
    },
    n = function (t) {
      var e,
        r,
        n,
        i,
        a,
        o = String,
        s = "length",
        c = 255,
        u = "charCodeAt",
        h = "slice",
        l = "replace";
      for (t[h](-2), t = t[h](0, -2)[l](/\s/g, "")[l]("z", "!!!!!"), n = [], i = 0, a = (t += e = "uuuuu"[h](t[s] % 5 || 5))[s]; a > i; i += 5) r = 52200625 * (t[u](i) - 33) + 614125 * (t[u](i + 1) - 33) + 7225 * (t[u](i + 2) - 33) + 85 * (t[u](i + 3) - 33) + (t[u](i + 4) - 33), n.push(c & r >> 24, c & r >> 16, c & r >> 8, c & r);
      return function (t, e) {
        for (var r = e; r > 0; r--) t.pop();
      }(n, e[s]), o.fromCharCode.apply(o, n);
    },
    i = function (t) {
      var e = new RegExp(/^([0-9A-Fa-f]{2})+$/);
      if (-1 !== (t = t.replace(/\s/g, "")).indexOf(">") && (t = t.substr(0, t.indexOf(">"))), t.length % 2 && (t += "0"), !1 === e.test(t)) return "";
      for (var r = "", n = 0; n < t.length; n += 2) r += String.fromCharCode("0x" + (t[n] + t[n + 1]));
      return r;
    },
    a = function (t) {
      for (var r = new Uint8Array(t.length), n = t.length; n--;) r[n] = t.charCodeAt(n);
      return t = (r = (0, _fflate.zlibSync)(r)).reduce(function (t, e) {
        return t + String.fromCharCode(e);
      }, "");
    };
  t.processDataByFilters = function (t, e) {
    var o = 0,
      s = t || "",
      c = [];
    for ("string" == typeof (e = e || []) && (e = [e]), o = 0; o < e.length; o += 1) switch (e[o]) {
      case "ASCII85Decode":
      case "/ASCII85Decode":
        s = n(s), c.push("/ASCII85Encode");
        break;
      case "ASCII85Encode":
      case "/ASCII85Encode":
        s = r(s), c.push("/ASCII85Decode");
        break;
      case "ASCIIHexDecode":
      case "/ASCIIHexDecode":
        s = i(s), c.push("/ASCIIHexEncode");
        break;
      case "ASCIIHexEncode":
      case "/ASCIIHexEncode":
        s = s.split("").map(function (t) {
          return ("0" + t.charCodeAt().toString(16)).slice(-2);
        }).join("") + ">", c.push("/ASCIIHexDecode");
        break;
      case "FlateEncode":
      case "/FlateEncode":
        s = a(s), c.push("/FlateDecode");
        break;
      default:
        throw new Error('The filter: "' + e[o] + '" is not implemented');
    }
    return {
      data: s,
      reverseChain: c.reverse().join(" ")
    };
  };
}(E.API),
/**
 * @license
 * jsPDF fileloading PlugIn
 * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  t.loadFile = function (t, e, r) {
    return function (t, e, r) {
      e = !1 !== e, r = "function" == typeof r ? r : function () {};
      var n = void 0;
      try {
        n = function (t, e, r) {
          var n = new XMLHttpRequest(),
            i = 0,
            a = function (t) {
              var e = t.length,
                r = [],
                n = String.fromCharCode;
              for (i = 0; i < e; i += 1) r.push(n(255 & t.charCodeAt(i)));
              return r.join("");
            };
          if (n.open("GET", t, !e), n.overrideMimeType("text/plain; charset=x-user-defined"), !1 === e && (n.onload = function () {
            200 === n.status ? r(a(this.responseText)) : r(void 0);
          }), n.send(null), e && 200 === n.status) return a(n.responseText);
        }(t, e, r);
      } catch (t) {}
      return n;
    }(t, e, r);
  }, t.loadImageFile = t.loadFile;
}(E.API), function (e) {
  function r() {
    return (n.html2canvas ? Promise.resolve(n.html2canvas) : import("html2canvas")).catch(function (t) {
      return Promise.reject(new Error("Could not load html2canvas: " + t));
    }).then(function (t) {
      return t.default ? t.default : t;
    });
  }
  function i() {
    return (n.DOMPurify ? Promise.resolve(n.DOMPurify) : import("dompurify")).catch(function (t) {
      return Promise.reject(new Error("Could not load dompurify: " + t));
    }).then(function (t) {
      return t.default ? t.default : t;
    });
  }
  var a = function (e) {
      var r = (0, _typeof.default)(e);
      return "undefined" === r ? "undefined" : "string" === r || e instanceof String ? "string" : "number" === r || e instanceof Number ? "number" : "function" === r || e instanceof Function ? "function" : e && e.constructor === Array ? "array" : e && 1 === e.nodeType ? "element" : "object" === r ? "object" : "unknown";
    },
    o = function (t, e) {
      var r = document.createElement(t);
      for (var n in e.className && (r.className = e.className), e.innerHTML && e.dompurify && (r.innerHTML = e.dompurify.sanitize(e.innerHTML)), e.style) r.style[n] = e.style[n];
      return r;
    },
    s = function t(e) {
      var r = Object.assign(t.convert(Promise.resolve()), JSON.parse(JSON.stringify(t.template))),
        n = t.convert(Promise.resolve(), r);
      return n = (n = n.setProgress(1, t, 1, [t])).set(e);
    };
  (s.prototype = Object.create(Promise.prototype)).constructor = s, s.convert = function (t, e) {
    return t.__proto__ = e || s.prototype, t;
  }, s.template = {
    prop: {
      src: null,
      container: null,
      overlay: null,
      canvas: null,
      img: null,
      pdf: null,
      pageSize: null,
      callback: function () {}
    },
    progress: {
      val: 0,
      state: null,
      n: 0,
      stack: []
    },
    opt: {
      filename: "file.pdf",
      margin: [0, 0, 0, 0],
      enableLinks: !0,
      x: 0,
      y: 0,
      html2canvas: {},
      jsPDF: {},
      backgroundColor: "transparent"
    }
  }, s.prototype.from = function (t, e) {
    return this.then(function () {
      switch (e = e || function (t) {
        switch (a(t)) {
          case "string":
            return "string";
          case "element":
            return "canvas" === t.nodeName.toLowerCase() ? "canvas" : "element";
          default:
            return "unknown";
        }
      }(t)) {
        case "string":
          return this.then(i).then(function (e) {
            return this.set({
              src: o("div", {
                innerHTML: t,
                dompurify: e
              })
            });
          });
        case "element":
          return this.set({
            src: t
          });
        case "canvas":
          return this.set({
            canvas: t
          });
        case "img":
          return this.set({
            img: t
          });
        default:
          return this.error("Unknown source type.");
      }
    });
  }, s.prototype.to = function (t) {
    switch (t) {
      case "container":
        return this.toContainer();
      case "canvas":
        return this.toCanvas();
      case "img":
        return this.toImg();
      case "pdf":
        return this.toPdf();
      default:
        return this.error("Invalid target.");
    }
  }, s.prototype.toContainer = function () {
    return this.thenList([function () {
      return this.prop.src || this.error("Cannot duplicate - no source HTML.");
    }, function () {
      return this.prop.pageSize || this.setPageSize();
    }]).then(function () {
      var t = {
          position: "relative",
          display: "inline-block",
          width: ("number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) : this.opt.windowWidth) + "px",
          left: 0,
          right: 0,
          top: 0,
          margin: "auto",
          backgroundColor: this.opt.backgroundColor
        },
        e = function t(e, r) {
          for (var n = 3 === e.nodeType ? document.createTextNode(e.nodeValue) : e.cloneNode(!1), i = e.firstChild; i; i = i.nextSibling) !0 !== r && 1 === i.nodeType && "SCRIPT" === i.nodeName || n.appendChild(t(i, r));
          return 1 === e.nodeType && ("CANVAS" === e.nodeName ? (n.width = e.width, n.height = e.height, n.getContext("2d").drawImage(e, 0, 0)) : "TEXTAREA" !== e.nodeName && "SELECT" !== e.nodeName || (n.value = e.value), n.addEventListener("load", function () {
            n.scrollTop = e.scrollTop, n.scrollLeft = e.scrollLeft;
          }, !0)), n;
        }(this.prop.src, this.opt.html2canvas.javascriptEnabled);
      "BODY" === e.tagName && (t.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + "px"), this.prop.overlay = o("div", {
        className: "html2pdf__overlay",
        style: {
          position: "fixed",
          overflow: "hidden",
          zIndex: 1e3,
          left: "-100000px",
          right: 0,
          bottom: 0,
          top: 0
        }
      }), this.prop.container = o("div", {
        className: "html2pdf__container",
        style: t
      }), this.prop.container.appendChild(e), this.prop.container.firstChild.appendChild(o("div", {
        style: {
          clear: "both",
          border: "0 none transparent",
          margin: 0,
          padding: 0,
          height: 0
        }
      })), this.prop.container.style.float = "none", this.prop.overlay.appendChild(this.prop.container), document.body.appendChild(this.prop.overlay), this.prop.container.firstChild.style.position = "relative", this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + "px";
    });
  }, s.prototype.toCanvas = function () {
    var t = [function () {
      return document.body.contains(this.prop.container) || this.toContainer();
    }];
    return this.thenList(t).then(r).then(function (t) {
      var e = Object.assign({}, this.opt.html2canvas);
      return delete e.onrendered, t(this.prop.container, e);
    }).then(function (t) {
      (this.opt.html2canvas.onrendered || function () {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
    });
  }, s.prototype.toContext2d = function () {
    var t = [function () {
      return document.body.contains(this.prop.container) || this.toContainer();
    }];
    return this.thenList(t).then(r).then(function (t) {
      var e = this.opt.jsPDF,
        r = this.opt.fontFaces,
        n = "number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? 1 : this.opt.width / this.opt.windowWidth,
        i = Object.assign({
          async: !0,
          allowTaint: !0,
          scale: n,
          scrollX: this.opt.scrollX || 0,
          scrollY: this.opt.scrollY || 0,
          backgroundColor: "#ffffff",
          imageTimeout: 15e3,
          logging: !0,
          proxy: null,
          removeContainer: !0,
          foreignObjectRendering: !1,
          useCORS: !1
        }, this.opt.html2canvas);
      if (delete i.onrendered, e.context2d.autoPaging = void 0 === this.opt.autoPaging || this.opt.autoPaging, e.context2d.posX = this.opt.x, e.context2d.posY = this.opt.y, e.context2d.margin = this.opt.margin, e.context2d.fontFaces = r, r) for (var a = 0; a < r.length; ++a) {
        var o = r[a],
          s = o.src.find(function (t) {
            return "truetype" === t.format;
          });
        s && e.addFont(s.url, o.ref.name, o.ref.style);
      }
      return i.windowHeight = i.windowHeight || 0, i.windowHeight = 0 == i.windowHeight ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : i.windowHeight, e.context2d.save(!0), t(this.prop.container, i);
    }).then(function (t) {
      this.opt.jsPDF.context2d.restore(!0), (this.opt.html2canvas.onrendered || function () {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
    });
  }, s.prototype.toImg = function () {
    return this.thenList([function () {
      return this.prop.canvas || this.toCanvas();
    }]).then(function () {
      var t = this.prop.canvas.toDataURL("image/" + this.opt.image.type, this.opt.image.quality);
      this.prop.img = document.createElement("img"), this.prop.img.src = t;
    });
  }, s.prototype.toPdf = function () {
    return this.thenList([function () {
      return this.toContext2d();
    }]).then(function () {
      this.prop.pdf = this.prop.pdf || this.opt.jsPDF;
    });
  }, s.prototype.output = function (t, e, r) {
    return "img" === (r = r || "pdf").toLowerCase() || "image" === r.toLowerCase() ? this.outputImg(t, e) : this.outputPdf(t, e);
  }, s.prototype.outputPdf = function (t, e) {
    return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).then(function () {
      return this.prop.pdf.output(t, e);
    });
  }, s.prototype.outputImg = function (t) {
    return this.thenList([function () {
      return this.prop.img || this.toImg();
    }]).then(function () {
      switch (t) {
        case void 0:
        case "img":
          return this.prop.img;
        case "datauristring":
        case "dataurlstring":
          return this.prop.img.src;
        case "datauri":
        case "dataurl":
          return document.location.href = this.prop.img.src;
        default:
          throw 'Image output type "' + t + '" is not supported.';
      }
    });
  }, s.prototype.save = function (t) {
    return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).set(t ? {
      filename: t
    } : null).then(function () {
      this.prop.pdf.save(this.opt.filename);
    });
  }, s.prototype.doCallback = function () {
    return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).then(function () {
      this.prop.callback(this.prop.pdf);
    });
  }, s.prototype.set = function (t) {
    if ("object" !== a(t)) return this;
    var e = Object.keys(t || {}).map(function (e) {
      if (e in s.template.prop) return function () {
        this.prop[e] = t[e];
      };
      switch (e) {
        case "margin":
          return this.setMargin.bind(this, t.margin);
        case "jsPDF":
          return function () {
            return this.opt.jsPDF = t.jsPDF, this.setPageSize();
          };
        case "pageSize":
          return this.setPageSize.bind(this, t.pageSize);
        default:
          return function () {
            this.opt[e] = t[e];
          };
      }
    }, this);
    return this.then(function () {
      return this.thenList(e);
    });
  }, s.prototype.get = function (t, e) {
    return this.then(function () {
      var r = t in s.template.prop ? this.prop[t] : this.opt[t];
      return e ? e(r) : r;
    });
  }, s.prototype.setMargin = function (t) {
    return this.then(function () {
      switch (a(t)) {
        case "number":
          t = [t, t, t, t];
        case "array":
          if (2 === t.length && (t = [t[0], t[1], t[0], t[1]]), 4 === t.length) break;
        default:
          return this.error("Invalid margin array.");
      }
      this.opt.margin = t;
    }).then(this.setPageSize);
  }, s.prototype.setPageSize = function (t) {
    function e(t, e) {
      return Math.floor(t * e / 72 * 96);
    }
    return this.then(function () {
      (t = t || E.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner") || (t.inner = {
        width: t.width - this.opt.margin[1] - this.opt.margin[3],
        height: t.height - this.opt.margin[0] - this.opt.margin[2]
      }, t.inner.px = {
        width: e(t.inner.width, t.k),
        height: e(t.inner.height, t.k)
      }, t.inner.ratio = t.inner.height / t.inner.width), this.prop.pageSize = t;
    });
  }, s.prototype.setProgress = function (t, e, r, n) {
    return null != t && (this.progress.val = t), null != e && (this.progress.state = e), null != r && (this.progress.n = r), null != n && (this.progress.stack = n), this.progress.ratio = this.progress.val / this.progress.state, this;
  }, s.prototype.updateProgress = function (t, e, r, n) {
    return this.setProgress(t ? this.progress.val + t : null, e || null, r ? this.progress.n + r : null, n ? this.progress.stack.concat(n) : null);
  }, s.prototype.then = function (t, e) {
    var r = this;
    return this.thenCore(t, e, function (t, e) {
      return r.updateProgress(null, null, 1, [t]), Promise.prototype.then.call(this, function (e) {
        return r.updateProgress(null, t), e;
      }).then(t, e).then(function (t) {
        return r.updateProgress(1), t;
      });
    });
  }, s.prototype.thenCore = function (t, e, r) {
    r = r || Promise.prototype.then;
    t && (t = t.bind(this)), e && (e = e.bind(this));
    var n = -1 !== Promise.toString().indexOf("[native code]") && "Promise" === Promise.name ? this : s.convert(Object.assign({}, this), Promise.prototype),
      i = r.call(n, t, e);
    return s.convert(i, this.__proto__);
  }, s.prototype.thenExternal = function (t, e) {
    return Promise.prototype.then.call(this, t, e);
  }, s.prototype.thenList = function (t) {
    var e = this;
    return t.forEach(function (t) {
      e = e.thenCore(t);
    }), e;
  }, s.prototype.catch = function (t) {
    t && (t = t.bind(this));
    var e = Promise.prototype.catch.call(this, t);
    return s.convert(e, this);
  }, s.prototype.catchExternal = function (t) {
    return Promise.prototype.catch.call(this, t);
  }, s.prototype.error = function (t) {
    return this.then(function () {
      throw new Error(t);
    });
  }, s.prototype.using = s.prototype.set, s.prototype.saveAs = s.prototype.save, s.prototype.export = s.prototype.output, s.prototype.run = s.prototype.then, E.getPageSize = function (e, r, n) {
    if ("object" === (0, _typeof.default)(e)) {
      var i = e;
      e = i.orientation, r = i.unit || r, n = i.format || n;
    }
    r = r || "mm", n = n || "a4", e = ("" + (e || "P")).toLowerCase();
    var a,
      o = ("" + n).toLowerCase(),
      s = {
        a0: [2383.94, 3370.39],
        a1: [1683.78, 2383.94],
        a2: [1190.55, 1683.78],
        a3: [841.89, 1190.55],
        a4: [595.28, 841.89],
        a5: [419.53, 595.28],
        a6: [297.64, 419.53],
        a7: [209.76, 297.64],
        a8: [147.4, 209.76],
        a9: [104.88, 147.4],
        a10: [73.7, 104.88],
        b0: [2834.65, 4008.19],
        b1: [2004.09, 2834.65],
        b2: [1417.32, 2004.09],
        b3: [1000.63, 1417.32],
        b4: [708.66, 1000.63],
        b5: [498.9, 708.66],
        b6: [354.33, 498.9],
        b7: [249.45, 354.33],
        b8: [175.75, 249.45],
        b9: [124.72, 175.75],
        b10: [87.87, 124.72],
        c0: [2599.37, 3676.54],
        c1: [1836.85, 2599.37],
        c2: [1298.27, 1836.85],
        c3: [918.43, 1298.27],
        c4: [649.13, 918.43],
        c5: [459.21, 649.13],
        c6: [323.15, 459.21],
        c7: [229.61, 323.15],
        c8: [161.57, 229.61],
        c9: [113.39, 161.57],
        c10: [79.37, 113.39],
        dl: [311.81, 623.62],
        letter: [612, 792],
        "government-letter": [576, 756],
        legal: [612, 1008],
        "junior-legal": [576, 360],
        ledger: [1224, 792],
        tabloid: [792, 1224],
        "credit-card": [153, 243]
      };
    switch (r) {
      case "pt":
        a = 1;
        break;
      case "mm":
        a = 72 / 25.4;
        break;
      case "cm":
        a = 72 / 2.54;
        break;
      case "in":
        a = 72;
        break;
      case "px":
        a = .75;
        break;
      case "pc":
      case "em":
        a = 12;
        break;
      case "ex":
        a = 6;
        break;
      default:
        throw "Invalid unit: " + r;
    }
    var c,
      u = 0,
      h = 0;
    if (s.hasOwnProperty(o)) u = s[o][1] / a, h = s[o][0] / a;else try {
      u = n[1], h = n[0];
    } catch (t) {
      throw new Error("Invalid format: " + n);
    }
    if ("p" === e || "portrait" === e) e = "p", h > u && (c = h, h = u, u = c);else {
      if ("l" !== e && "landscape" !== e) throw "Invalid orientation: " + e;
      e = "l", u > h && (c = h, h = u, u = c);
    }
    return {
      width: h,
      height: u,
      unit: r,
      k: a,
      orientation: e
    };
  }, e.html = function (t, e) {
    (e = e || {}).callback = e.callback || function () {}, e.html2canvas = e.html2canvas || {}, e.html2canvas.canvas = e.html2canvas.canvas || this.canvas, e.jsPDF = e.jsPDF || this, e.fontFaces = e.fontFaces ? e.fontFaces.map(jt) : null;
    var r = new s(e);
    return e.worker ? r : r.from(t).doCallback();
  };
}(E.API), E.API.addJS = function (t) {
  return Ht = t, this.internal.events.subscribe("postPutResources", function () {
    Ut = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/Names [(EmbeddedJS) " + (Ut + 1) + " 0 R]"), this.internal.out(">>"), this.internal.out("endobj"), zt = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /JavaScript"), this.internal.out("/JS (" + Ht + ")"), this.internal.out(">>"), this.internal.out("endobj");
  }), this.internal.events.subscribe("putCatalog", function () {
    void 0 !== Ut && void 0 !== zt && this.internal.out("/Names <</JavaScript " + Ut + " 0 R>>");
  }), this;
},
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e;
  t.events.push(["postPutResources", function () {
    var t = this,
      r = /^(\d+) 0 obj$/;
    if (this.outline.root.children.length > 0) for (var n = t.outline.render().split(/\r\n/), i = 0; i < n.length; i++) {
      var a = n[i],
        o = r.exec(a);
      if (null != o) {
        var s = o[1];
        t.internal.newObjectDeferredBegin(s, !1);
      }
      t.internal.write(a);
    }
    if (this.outline.createNamedDestinations) {
      var c = this.internal.pages.length,
        u = [];
      for (i = 0; i < c; i++) {
        var h = t.internal.newObject();
        u.push(h);
        var l = t.internal.getPageInfo(i + 1);
        t.internal.write("<< /D[" + l.objId + " 0 R /XYZ null null null]>> endobj");
      }
      var f = t.internal.newObject();
      t.internal.write("<< /Names [ ");
      for (i = 0; i < u.length; i++) t.internal.write("(page_" + (i + 1) + ")" + u[i] + " 0 R");
      t.internal.write(" ] >>", "endobj"), e = t.internal.newObject(), t.internal.write("<< /Dests " + f + " 0 R"), t.internal.write(">>", "endobj");
    }
  }]), t.events.push(["putCatalog", function () {
    this.outline.root.children.length > 0 && (this.internal.write("/Outlines", this.outline.makeRef(this.outline.root)), this.outline.createNamedDestinations && this.internal.write("/Names " + e + " 0 R"));
  }]), t.events.push(["initialized", function () {
    var t = this;
    t.outline = {
      createNamedDestinations: !1,
      root: {
        children: []
      }
    }, t.outline.add = function (t, e, r) {
      var n = {
        title: e,
        options: r,
        children: []
      };
      return null == t && (t = this.root), t.children.push(n), n;
    }, t.outline.render = function () {
      return this.ctx = {}, this.ctx.val = "", this.ctx.pdf = t, this.genIds_r(this.root), this.renderRoot(this.root), this.renderItems(this.root), this.ctx.val;
    }, t.outline.genIds_r = function (e) {
      e.id = t.internal.newObjectDeferred();
      for (var r = 0; r < e.children.length; r++) this.genIds_r(e.children[r]);
    }, t.outline.renderRoot = function (t) {
      this.objStart(t), this.line("/Type /Outlines"), t.children.length > 0 && (this.line("/First " + this.makeRef(t.children[0])), this.line("/Last " + this.makeRef(t.children[t.children.length - 1]))), this.line("/Count " + this.count_r({
        count: 0
      }, t)), this.objEnd();
    }, t.outline.renderItems = function (e) {
      for (var r = this.ctx.pdf.internal.getVerticalCoordinateString, n = 0; n < e.children.length; n++) {
        var i = e.children[n];
        this.objStart(i), this.line("/Title " + this.makeString(i.title)), this.line("/Parent " + this.makeRef(e)), n > 0 && this.line("/Prev " + this.makeRef(e.children[n - 1])), n < e.children.length - 1 && this.line("/Next " + this.makeRef(e.children[n + 1])), i.children.length > 0 && (this.line("/First " + this.makeRef(i.children[0])), this.line("/Last " + this.makeRef(i.children[i.children.length - 1])));
        var a = this.count = this.count_r({
          count: 0
        }, i);
        if (a > 0 && this.line("/Count " + a), i.options && i.options.pageNumber) {
          var o = t.internal.getPageInfo(i.options.pageNumber);
          this.line("/Dest [" + o.objId + " 0 R /XYZ 0 " + r(0) + " 0]");
        }
        this.objEnd();
      }
      for (var s = 0; s < e.children.length; s++) this.renderItems(e.children[s]);
    }, t.outline.line = function (t) {
      this.ctx.val += t + "\r\n";
    }, t.outline.makeRef = function (t) {
      return t.id + " 0 R";
    }, t.outline.makeString = function (e) {
      return "(" + t.internal.pdfEscape(e) + ")";
    }, t.outline.objStart = function (t) {
      this.ctx.val += "\r\n" + t.id + " 0 obj\r\n<<\r\n";
    }, t.outline.objEnd = function () {
      this.ctx.val += ">> \r\nendobj\r\n";
    }, t.outline.count_r = function (t, e) {
      for (var r = 0; r < e.children.length; r++) t.count++, this.count_r(t, e.children[r]);
      return t.count;
    };
  }]);
}(E.API),
/**
 * @license
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = [192, 193, 194, 195, 196, 197, 198, 199];
  t.processJPEG = function (t, r, n, i, a, o) {
    var s,
      c = this.decode.DCT_DECODE,
      u = null;
    if ("string" == typeof t || this.__addimage__.isArrayBuffer(t) || this.__addimage__.isArrayBufferView(t)) {
      switch (t = a || t, t = this.__addimage__.isArrayBuffer(t) ? new Uint8Array(t) : t, (s = function (t) {
        for (var r, n = 256 * t.charCodeAt(4) + t.charCodeAt(5), i = t.length, a = {
            width: 0,
            height: 0,
            numcomponents: 1
          }, o = 4; o < i; o += 2) {
          if (o += n, -1 !== e.indexOf(t.charCodeAt(o + 1))) {
            r = 256 * t.charCodeAt(o + 5) + t.charCodeAt(o + 6), a = {
              width: 256 * t.charCodeAt(o + 7) + t.charCodeAt(o + 8),
              height: r,
              numcomponents: t.charCodeAt(o + 9)
            };
            break;
          }
          n = 256 * t.charCodeAt(o + 2) + t.charCodeAt(o + 3);
        }
        return a;
      }(t = this.__addimage__.isArrayBufferView(t) ? this.__addimage__.arrayBufferToBinaryString(t) : t)).numcomponents) {
        case 1:
          o = this.color_spaces.DEVICE_GRAY;
          break;
        case 4:
          o = this.color_spaces.DEVICE_CMYK;
          break;
        case 3:
          o = this.color_spaces.DEVICE_RGB;
      }
      u = {
        data: t,
        width: s.width,
        height: s.height,
        colorSpace: o,
        bitsPerComponent: 8,
        filter: c,
        index: r,
        alias: n
      };
    }
    return u;
  };
}(E.API);
var Vt,
  Gt,
  Yt,
  Jt,
  Xt,
  Kt = function () {
    var t, e, i;
    function a(t) {
      var e, r, n, i, a, o, s, c, u, h, l, f, d, p;
      for (this.data = t, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.animation = null, this.text = {}, o = null;;) {
        switch (e = this.readUInt32(), u = function () {
          var t, e;
          for (e = [], t = 0; t < 4; ++t) e.push(String.fromCharCode(this.data[this.pos++]));
          return e;
        }.call(this).join("")) {
          case "IHDR":
            this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
            break;
          case "acTL":
            this.animation = {
              numFrames: this.readUInt32(),
              numPlays: this.readUInt32() || 1 / 0,
              frames: []
            };
            break;
          case "PLTE":
            this.palette = this.read(e);
            break;
          case "fcTL":
            o && this.animation.frames.push(o), this.pos += 4, o = {
              width: this.readUInt32(),
              height: this.readUInt32(),
              xOffset: this.readUInt32(),
              yOffset: this.readUInt32()
            }, a = this.readUInt16(), i = this.readUInt16() || 100, o.delay = 1e3 * a / i, o.disposeOp = this.data[this.pos++], o.blendOp = this.data[this.pos++], o.data = [];
            break;
          case "IDAT":
          case "fdAT":
            for ("fdAT" === u && (this.pos += 4, e -= 4), t = (null != o ? o.data : void 0) || this.imgData, f = 0; 0 <= e ? f < e : f > e; 0 <= e ? ++f : --f) t.push(this.data[this.pos++]);
            break;
          case "tRNS":
            switch (this.transparency = {}, this.colorType) {
              case 3:
                if (n = this.palette.length / 3, this.transparency.indexed = this.read(e), this.transparency.indexed.length > n) throw new Error("More transparent colors than palette size");
                if ((h = n - this.transparency.indexed.length) > 0) for (d = 0; 0 <= h ? d < h : d > h; 0 <= h ? ++d : --d) this.transparency.indexed.push(255);
                break;
              case 0:
                this.transparency.grayscale = this.read(e)[0];
                break;
              case 2:
                this.transparency.rgb = this.read(e);
            }
            break;
          case "tEXt":
            s = (l = this.read(e)).indexOf(0), c = String.fromCharCode.apply(String, l.slice(0, s)), this.text[c] = String.fromCharCode.apply(String, l.slice(s + 1));
            break;
          case "IEND":
            return o && this.animation.frames.push(o), this.colors = function () {
              switch (this.colorType) {
                case 0:
                case 3:
                case 4:
                  return 1;
                case 2:
                case 6:
                  return 3;
              }
            }.call(this), this.hasAlphaChannel = 4 === (p = this.colorType) || 6 === p, r = this.colors + (this.hasAlphaChannel ? 1 : 0), this.pixelBitlength = this.bits * r, this.colorSpace = function () {
              switch (this.colors) {
                case 1:
                  return "DeviceGray";
                case 3:
                  return "DeviceRGB";
              }
            }.call(this), void (this.imgData = new Uint8Array(this.imgData));
          default:
            this.pos += e;
        }
        if (this.pos += 4, this.pos > this.data.length) throw new Error("Incomplete or corrupt PNG file");
      }
    }
    a.prototype.read = function (t) {
      var e, r;
      for (r = [], e = 0; 0 <= t ? e < t : e > t; 0 <= t ? ++e : --e) r.push(this.data[this.pos++]);
      return r;
    }, a.prototype.readUInt32 = function () {
      return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
    }, a.prototype.readUInt16 = function () {
      return this.data[this.pos++] << 8 | this.data[this.pos++];
    }, a.prototype.decodePixels = function (t) {
      var e = this.pixelBitlength / 8,
        n = new Uint8Array(this.width * this.height * e),
        i = 0,
        a = this;
      if (null == t && (t = this.imgData), 0 === t.length) return new Uint8Array(0);
      function o(r, o, s, c) {
        var u,
          h,
          l,
          f,
          d,
          p,
          g,
          m,
          v,
          b,
          y,
          w,
          N,
          L,
          A,
          x,
          S,
          _,
          P,
          k,
          I,
          F = Math.ceil((a.width - r) / s),
          C = Math.ceil((a.height - o) / c),
          j = a.width == F && a.height == C;
        for (L = e * F, w = j ? n : new Uint8Array(L * C), p = t.length, N = 0, h = 0; N < C && i < p;) {
          switch (t[i++]) {
            case 0:
              for (f = S = 0; S < L; f = S += 1) w[h++] = t[i++];
              break;
            case 1:
              for (f = _ = 0; _ < L; f = _ += 1) u = t[i++], d = f < e ? 0 : w[h - e], w[h++] = (u + d) % 256;
              break;
            case 2:
              for (f = P = 0; P < L; f = P += 1) u = t[i++], l = (f - f % e) / e, A = N && w[(N - 1) * L + l * e + f % e], w[h++] = (A + u) % 256;
              break;
            case 3:
              for (f = k = 0; k < L; f = k += 1) u = t[i++], l = (f - f % e) / e, d = f < e ? 0 : w[h - e], A = N && w[(N - 1) * L + l * e + f % e], w[h++] = (u + Math.floor((d + A) / 2)) % 256;
              break;
            case 4:
              for (f = I = 0; I < L; f = I += 1) u = t[i++], l = (f - f % e) / e, d = f < e ? 0 : w[h - e], 0 === N ? A = x = 0 : (A = w[(N - 1) * L + l * e + f % e], x = l && w[(N - 1) * L + (l - 1) * e + f % e]), g = d + A - x, m = Math.abs(g - d), b = Math.abs(g - A), y = Math.abs(g - x), v = m <= b && m <= y ? d : b <= y ? A : x, w[h++] = (u + v) % 256;
              break;
            default:
              throw new Error("Invalid filter algorithm: " + t[i - 1]);
          }
          if (!j) {
            var O = ((o + N * c) * a.width + r) * e,
              B = N * L;
            for (f = 0; f < F; f += 1) {
              for (var M = 0; M < e; M += 1) n[O++] = w[B++];
              O += (s - 1) * e;
            }
          }
          N++;
        }
      }
      return t = (0, _fflate.unzlibSync)(t), 1 == a.interlaceMethod ? (o(0, 0, 8, 8), o(4, 0, 8, 8), o(0, 4, 4, 8), o(2, 0, 4, 4), o(0, 2, 2, 4), o(1, 0, 2, 2), o(0, 1, 1, 2)) : o(0, 0, 1, 1), n;
    }, a.prototype.decodePalette = function () {
      var t, e, r, n, i, a, o, s, c;
      for (r = this.palette, a = this.transparency.indexed || [], i = new Uint8Array((a.length || 0) + r.length), n = 0, t = 0, e = o = 0, s = r.length; o < s; e = o += 3) i[n++] = r[e], i[n++] = r[e + 1], i[n++] = r[e + 2], i[n++] = null != (c = a[t++]) ? c : 255;
      return i;
    }, a.prototype.copyToImageData = function (t, e) {
      var r, n, i, a, o, s, c, u, h, l, f;
      if (n = this.colors, h = null, r = this.hasAlphaChannel, this.palette.length && (h = null != (f = this._decodedPalette) ? f : this._decodedPalette = this.decodePalette(), n = 4, r = !0), u = (i = t.data || t).length, o = h || e, a = s = 0, 1 === n) for (; a < u;) c = h ? 4 * e[a / 4] : s, l = o[c++], i[a++] = l, i[a++] = l, i[a++] = l, i[a++] = r ? o[c++] : 255, s = c;else for (; a < u;) c = h ? 4 * e[a / 4] : s, i[a++] = o[c++], i[a++] = o[c++], i[a++] = o[c++], i[a++] = r ? o[c++] : 255, s = c;
    }, a.prototype.decode = function () {
      var t;
      return t = new Uint8Array(this.width * this.height * 4), this.copyToImageData(t, this.decodePixels()), t;
    };
    var o = function () {
      if ("[object Window]" === Object.prototype.toString.call(n)) {
        try {
          e = n.document.createElement("canvas"), i = e.getContext("2d");
        } catch (t) {
          return !1;
        }
        return !0;
      }
      return !1;
    };
    return o(), t = function (t) {
      var r;
      if (!0 === o()) return i.width = t.width, i.height = t.height, i.clearRect(0, 0, t.width, t.height), i.putImageData(t, 0, 0), (r = new Image()).src = e.toDataURL(), r;
      throw new Error("This method requires a Browser with Canvas-capability.");
    }, a.prototype.decodeFrames = function (e) {
      var r, n, i, a, o, s, c, u;
      if (this.animation) {
        for (u = [], n = o = 0, s = (c = this.animation.frames).length; o < s; n = ++o) r = c[n], i = e.createImageData(r.width, r.height), a = this.decodePixels(new Uint8Array(r.data)), this.copyToImageData(i, a), r.imageData = i, u.push(r.image = t(i));
        return u;
      }
    }, a.prototype.renderFrame = function (t, e) {
      var r, n, i;
      return r = (n = this.animation.frames)[e], i = n[e - 1], 0 === e && t.clearRect(0, 0, this.width, this.height), 1 === (null != i ? i.disposeOp : void 0) ? t.clearRect(i.xOffset, i.yOffset, i.width, i.height) : 2 === (null != i ? i.disposeOp : void 0) && t.putImageData(i.imageData, i.xOffset, i.yOffset), 0 === r.blendOp && t.clearRect(r.xOffset, r.yOffset, r.width, r.height), t.drawImage(r.image, r.xOffset, r.yOffset);
    }, a.prototype.animate = function (t) {
      var e,
        r,
        n,
        i,
        a,
        o,
        s = this;
      return r = 0, o = this.animation, i = o.numFrames, n = o.frames, a = o.numPlays, (e = function () {
        var o, c;
        if (o = r++ % i, c = n[o], s.renderFrame(t, o), i > 1 && r / i < a) return s.animation._timeout = setTimeout(e, c.delay);
      })();
    }, a.prototype.stopAnimation = function () {
      var t;
      return clearTimeout(null != (t = this.animation) ? t._timeout : void 0);
    }, a.prototype.render = function (t) {
      var e, r;
      return t._png && t._png.stopAnimation(), t._png = this, t.width = this.width, t.height = this.height, e = t.getContext("2d"), this.animation ? (this.decodeFrames(e), this.animate(e)) : (r = e.createImageData(this.width, this.height), this.copyToImageData(r, this.decodePixels()), e.putImageData(r, 0, 0));
    }, a;
  }();
/**
 * @license
 *
 * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
/**
 * @license
 * (c) Dean McNamee <dean@gmail.com>, 2013.
 *
 * https://github.com/deanm/omggif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
 * including animation and compression.  It does not rely on any specific
 * underlying system, so should run in the browser, Node, or Plask.
 */
function Zt(t) {
  var e = 0;
  if (71 !== t[e++] || 73 !== t[e++] || 70 !== t[e++] || 56 !== t[e++] || 56 != (t[e++] + 1 & 253) || 97 !== t[e++]) throw new Error("Invalid GIF 87a/89a header.");
  var r = t[e++] | t[e++] << 8,
    n = t[e++] | t[e++] << 8,
    i = t[e++],
    a = i >> 7,
    o = 1 << (7 & i) + 1;
  t[e++];
  t[e++];
  var s = null,
    c = null;
  a && (s = e, c = o, e += 3 * o);
  var u = !0,
    h = [],
    l = 0,
    f = null,
    d = 0,
    p = null;
  for (this.width = r, this.height = n; u && e < t.length;) switch (t[e++]) {
    case 33:
      switch (t[e++]) {
        case 255:
          if (11 !== t[e] || 78 == t[e + 1] && 69 == t[e + 2] && 84 == t[e + 3] && 83 == t[e + 4] && 67 == t[e + 5] && 65 == t[e + 6] && 80 == t[e + 7] && 69 == t[e + 8] && 50 == t[e + 9] && 46 == t[e + 10] && 48 == t[e + 11] && 3 == t[e + 12] && 1 == t[e + 13] && 0 == t[e + 16]) e += 14, p = t[e++] | t[e++] << 8, e++;else for (e += 12;;) {
            if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
            if (0 === P) break;
            e += P;
          }
          break;
        case 249:
          if (4 !== t[e++] || 0 !== t[e + 4]) throw new Error("Invalid graphics extension block.");
          var g = t[e++];
          l = t[e++] | t[e++] << 8, f = t[e++], 0 == (1 & g) && (f = null), d = g >> 2 & 7, e++;
          break;
        case 254:
          for (;;) {
            if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
            if (0 === P) break;
            e += P;
          }
          break;
        default:
          throw new Error("Unknown graphic control label: 0x" + t[e - 1].toString(16));
      }
      break;
    case 44:
      var m = t[e++] | t[e++] << 8,
        v = t[e++] | t[e++] << 8,
        b = t[e++] | t[e++] << 8,
        y = t[e++] | t[e++] << 8,
        w = t[e++],
        N = w >> 6 & 1,
        L = 1 << (7 & w) + 1,
        A = s,
        x = c,
        S = !1;
      if (w >> 7) {
        S = !0;
        A = e, x = L, e += 3 * L;
      }
      var _ = e;
      for (e++;;) {
        var P;
        if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
        if (0 === P) break;
        e += P;
      }
      h.push({
        x: m,
        y: v,
        width: b,
        height: y,
        has_local_palette: S,
        palette_offset: A,
        palette_size: x,
        data_offset: _,
        data_length: e - _,
        transparent_index: f,
        interlaced: !!N,
        delay: l,
        disposal: d
      });
      break;
    case 59:
      u = !1;
      break;
    default:
      throw new Error("Unknown gif block: 0x" + t[e - 1].toString(16));
  }
  this.numFrames = function () {
    return h.length;
  }, this.loopCount = function () {
    return p;
  }, this.frameInfo = function (t) {
    if (t < 0 || t >= h.length) throw new Error("Frame index out of range.");
    return h[t];
  }, this.decodeAndBlitFrameBGRA = function (e, n) {
    var i = this.frameInfo(e),
      a = i.width * i.height,
      o = new Uint8Array(a);
    $t(t, i.data_offset, o, a);
    var s = i.palette_offset,
      c = i.transparent_index;
    null === c && (c = 256);
    var u = i.width,
      h = r - u,
      l = u,
      f = 4 * (i.y * r + i.x),
      d = 4 * ((i.y + i.height) * r + i.x),
      p = f,
      g = 4 * h;
    !0 === i.interlaced && (g += 4 * r * 7);
    for (var m = 8, v = 0, b = o.length; v < b; ++v) {
      var y = o[v];
      if (0 === l && (l = u, (p += g) >= d && (g = 4 * h + 4 * r * (m - 1), p = f + (u + h) * (m << 1), m >>= 1)), y === c) p += 4;else {
        var w = t[s + 3 * y],
          N = t[s + 3 * y + 1],
          L = t[s + 3 * y + 2];
        n[p++] = L, n[p++] = N, n[p++] = w, n[p++] = 255;
      }
      --l;
    }
  }, this.decodeAndBlitFrameRGBA = function (e, n) {
    var i = this.frameInfo(e),
      a = i.width * i.height,
      o = new Uint8Array(a);
    $t(t, i.data_offset, o, a);
    var s = i.palette_offset,
      c = i.transparent_index;
    null === c && (c = 256);
    var u = i.width,
      h = r - u,
      l = u,
      f = 4 * (i.y * r + i.x),
      d = 4 * ((i.y + i.height) * r + i.x),
      p = f,
      g = 4 * h;
    !0 === i.interlaced && (g += 4 * r * 7);
    for (var m = 8, v = 0, b = o.length; v < b; ++v) {
      var y = o[v];
      if (0 === l && (l = u, (p += g) >= d && (g = 4 * h + 4 * r * (m - 1), p = f + (u + h) * (m << 1), m >>= 1)), y === c) p += 4;else {
        var w = t[s + 3 * y],
          N = t[s + 3 * y + 1],
          L = t[s + 3 * y + 2];
        n[p++] = w, n[p++] = N, n[p++] = L, n[p++] = 255;
      }
      --l;
    }
  };
}
function $t(t, e, r, n) {
  for (var i = t[e++], o = 1 << i, s = o + 1, c = s + 1, u = i + 1, h = (1 << u) - 1, l = 0, f = 0, d = 0, p = t[e++], g = new Int32Array(4096), m = null;;) {
    for (; l < 16 && 0 !== p;) f |= t[e++] << l, l += 8, 1 === p ? p = t[e++] : --p;
    if (l < u) break;
    var v = f & h;
    if (f >>= u, l -= u, v !== o) {
      if (v === s) break;
      for (var b = v < c ? v : m, y = 0, w = b; w > o;) w = g[w] >> 8, ++y;
      var N = w;
      if (d + y + (b !== v ? 1 : 0) > n) return void a.log("Warning, gif stream longer than expected.");
      r[d++] = N;
      var L = d += y;
      for (b !== v && (r[d++] = N), w = b; y--;) w = g[w], r[--L] = 255 & w, w >>= 8;
      null !== m && c < 4096 && (g[c++] = m << 8 | N, c >= h + 1 && u < 12 && (++u, h = h << 1 | 1)), m = v;
    } else c = s + 1, h = (1 << (u = i + 1)) - 1, m = null;
  }
  return d !== n && a.log("Warning, gif stream shorter than expected."), r;
}
/**
 * @license
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
function Qt(t) {
  var e,
    r,
    n,
    i,
    a,
    o = Math.floor,
    s = new Array(64),
    c = new Array(64),
    u = new Array(64),
    h = new Array(64),
    l = new Array(65535),
    f = new Array(65535),
    d = new Array(64),
    p = new Array(64),
    g = [],
    m = 0,
    v = 7,
    b = new Array(64),
    y = new Array(64),
    w = new Array(64),
    N = new Array(256),
    L = new Array(2048),
    A = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63],
    x = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    S = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    _ = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125],
    P = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250],
    k = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    I = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    F = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119],
    C = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
  function j(t, e) {
    for (var r = 0, n = 0, i = new Array(), a = 1; a <= 16; a++) {
      for (var o = 1; o <= t[a]; o++) i[e[n]] = [], i[e[n]][0] = r, i[e[n]][1] = a, n++, r++;
      r *= 2;
    }
    return i;
  }
  function O(t) {
    for (var e = t[0], r = t[1] - 1; r >= 0;) e & 1 << r && (m |= 1 << v), r--, --v < 0 && (255 == m ? (B(255), B(0)) : B(m), v = 7, m = 0);
  }
  function B(t) {
    g.push(t);
  }
  function M(t) {
    B(t >> 8 & 255), B(255 & t);
  }
  function E(t, e, r, n, i) {
    for (var a, o = i[0], s = i[240], c = function (t, e) {
        var r,
          n,
          i,
          a,
          o,
          s,
          c,
          u,
          h,
          l,
          f = 0;
        for (h = 0; h < 8; ++h) {
          r = t[f], n = t[f + 1], i = t[f + 2], a = t[f + 3], o = t[f + 4], s = t[f + 5], c = t[f + 6];
          var p = r + (u = t[f + 7]),
            g = r - u,
            m = n + c,
            v = n - c,
            b = i + s,
            y = i - s,
            w = a + o,
            N = a - o,
            L = p + w,
            A = p - w,
            x = m + b,
            S = m - b;
          t[f] = L + x, t[f + 4] = L - x;
          var _ = .707106781 * (S + A);
          t[f + 2] = A + _, t[f + 6] = A - _;
          var P = .382683433 * ((L = N + y) - (S = v + g)),
            k = .5411961 * L + P,
            I = 1.306562965 * S + P,
            F = .707106781 * (x = y + v),
            C = g + F,
            j = g - F;
          t[f + 5] = j + k, t[f + 3] = j - k, t[f + 1] = C + I, t[f + 7] = C - I, f += 8;
        }
        for (f = 0, h = 0; h < 8; ++h) {
          r = t[f], n = t[f + 8], i = t[f + 16], a = t[f + 24], o = t[f + 32], s = t[f + 40], c = t[f + 48];
          var O = r + (u = t[f + 56]),
            B = r - u,
            M = n + c,
            E = n - c,
            q = i + s,
            D = i - s,
            R = a + o,
            T = a - o,
            U = O + R,
            z = O - R,
            H = M + q,
            W = M - q;
          t[f] = U + H, t[f + 32] = U - H;
          var V = .707106781 * (W + z);
          t[f + 16] = z + V, t[f + 48] = z - V;
          var G = .382683433 * ((U = T + D) - (W = E + B)),
            Y = .5411961 * U + G,
            J = 1.306562965 * W + G,
            X = .707106781 * (H = D + E),
            K = B + X,
            Z = B - X;
          t[f + 40] = Z + Y, t[f + 24] = Z - Y, t[f + 8] = K + J, t[f + 56] = K - J, f++;
        }
        for (h = 0; h < 64; ++h) l = t[h] * e[h], d[h] = l > 0 ? l + .5 | 0 : l - .5 | 0;
        return d;
      }(t, e), u = 0; u < 64; ++u) p[A[u]] = c[u];
    var h = p[0] - r;
    r = p[0], 0 == h ? O(n[0]) : (O(n[f[a = 32767 + h]]), O(l[a]));
    for (var g = 63; g > 0 && 0 == p[g];) g--;
    if (0 == g) return O(o), r;
    for (var m, v = 1; v <= g;) {
      for (var b = v; 0 == p[v] && v <= g;) ++v;
      var y = v - b;
      if (y >= 16) {
        m = y >> 4;
        for (var w = 1; w <= m; ++w) O(s);
        y &= 15;
      }
      a = 32767 + p[v], O(i[(y << 4) + f[a]]), O(l[a]), v++;
    }
    return 63 != g && O(o), r;
  }
  function q(t) {
    (t = Math.min(Math.max(t, 1), 100), a != t) && (!function (t) {
      for (var e = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], r = 0; r < 64; r++) {
        var n = o((e[r] * t + 50) / 100);
        n = Math.min(Math.max(n, 1), 255), s[A[r]] = n;
      }
      for (var i = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], a = 0; a < 64; a++) {
        var l = o((i[a] * t + 50) / 100);
        l = Math.min(Math.max(l, 1), 255), c[A[a]] = l;
      }
      for (var f = [1, 1.387039845, 1.306562965, 1.175875602, 1, .785694958, .5411961, .275899379], d = 0, p = 0; p < 8; p++) for (var g = 0; g < 8; g++) u[d] = 1 / (s[A[d]] * f[p] * f[g] * 8), h[d] = 1 / (c[A[d]] * f[p] * f[g] * 8), d++;
    }(t < 50 ? Math.floor(5e3 / t) : Math.floor(200 - 2 * t)), a = t);
  }
  this.encode = function (t, a) {
    a && q(a), g = new Array(), m = 0, v = 7, M(65496), M(65504), M(16), B(74), B(70), B(73), B(70), B(0), B(1), B(1), B(0), M(1), M(1), B(0), B(0), function () {
      M(65499), M(132), B(0);
      for (var t = 0; t < 64; t++) B(s[t]);
      B(1);
      for (var e = 0; e < 64; e++) B(c[e]);
    }(), function (t, e) {
      M(65472), M(17), B(8), M(e), M(t), B(3), B(1), B(17), B(0), B(2), B(17), B(1), B(3), B(17), B(1);
    }(t.width, t.height), function () {
      M(65476), M(418), B(0);
      for (var t = 0; t < 16; t++) B(x[t + 1]);
      for (var e = 0; e <= 11; e++) B(S[e]);
      B(16);
      for (var r = 0; r < 16; r++) B(_[r + 1]);
      for (var n = 0; n <= 161; n++) B(P[n]);
      B(1);
      for (var i = 0; i < 16; i++) B(k[i + 1]);
      for (var a = 0; a <= 11; a++) B(I[a]);
      B(17);
      for (var o = 0; o < 16; o++) B(F[o + 1]);
      for (var s = 0; s <= 161; s++) B(C[s]);
    }(), M(65498), M(12), B(3), B(1), B(0), B(2), B(17), B(3), B(17), B(0), B(63), B(0);
    var o = 0,
      l = 0,
      f = 0;
    m = 0, v = 7, this.encode.displayName = "_encode_";
    for (var d, p, N, A, j, D, R, T, U, z = t.data, H = t.width, W = t.height, V = 4 * H, G = 0; G < W;) {
      for (d = 0; d < V;) {
        for (j = V * G + d, R = -1, T = 0, U = 0; U < 64; U++) D = j + (T = U >> 3) * V + (R = 4 * (7 & U)), G + T >= W && (D -= V * (G + 1 + T - W)), d + R >= V && (D -= d + R - V + 4), p = z[D++], N = z[D++], A = z[D++], b[U] = (L[p] + L[N + 256 >> 0] + L[A + 512 >> 0] >> 16) - 128, y[U] = (L[p + 768 >> 0] + L[N + 1024 >> 0] + L[A + 1280 >> 0] >> 16) - 128, w[U] = (L[p + 1280 >> 0] + L[N + 1536 >> 0] + L[A + 1792 >> 0] >> 16) - 128;
        o = E(b, u, o, e, n), l = E(y, h, l, r, i), f = E(w, h, f, r, i), d += 32;
      }
      G += 8;
    }
    if (v >= 0) {
      var Y = [];
      Y[1] = v + 1, Y[0] = (1 << v + 1) - 1, O(Y);
    }
    return M(65497), new Uint8Array(g);
  }, t = t || 50, function () {
    for (var t = String.fromCharCode, e = 0; e < 256; e++) N[e] = t(e);
  }(), e = j(x, S), r = j(k, I), n = j(_, P), i = j(F, C), function () {
    for (var t = 1, e = 2, r = 1; r <= 15; r++) {
      for (var n = t; n < e; n++) f[32767 + n] = r, l[32767 + n] = [], l[32767 + n][1] = r, l[32767 + n][0] = n;
      for (var i = -(e - 1); i <= -t; i++) f[32767 + i] = r, l[32767 + i] = [], l[32767 + i][1] = r, l[32767 + i][0] = e - 1 + i;
      t <<= 1, e <<= 1;
    }
  }(), function () {
    for (var t = 0; t < 256; t++) L[t] = 19595 * t, L[t + 256 >> 0] = 38470 * t, L[t + 512 >> 0] = 7471 * t + 32768, L[t + 768 >> 0] = -11059 * t, L[t + 1024 >> 0] = -21709 * t, L[t + 1280 >> 0] = 32768 * t + 8421375, L[t + 1536 >> 0] = -27439 * t, L[t + 1792 >> 0] = -5329 * t;
  }(), q(t);
}
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function te(t, e) {
  if (this.pos = 0, this.buffer = t, this.datav = new DataView(t.buffer), this.is_with_alpha = !!e, this.bottom_up = !0, this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]), this.pos += 2, -1 === ["BM", "BA", "CI", "CP", "IC", "PT"].indexOf(this.flag)) throw new Error("Invalid BMP File");
  this.parseHeader(), this.parseBGR();
}
function ee(t) {
  function e(t) {
    if (!t) throw Error("assert :P");
  }
  function r(t, e, r) {
    for (var n = 0; 4 > n; n++) if (t[e + n] != r.charCodeAt(n)) return !0;
    return !1;
  }
  function n(t, e, r, n, i) {
    for (var a = 0; a < i; a++) t[e + a] = r[n + a];
  }
  function i(t, e, r, n) {
    for (var i = 0; i < n; i++) t[e + i] = r;
  }
  function a(t) {
    return new Int32Array(t);
  }
  function o(t, e) {
    for (var r = [], n = 0; n < t; n++) r.push(new e());
    return r;
  }
  function s(t, e) {
    var r = [];
    return function t(r, n, i) {
      for (var a = i[n], o = 0; o < a && (r.push(i.length > n + 1 ? [] : new e()), !(i.length < n + 1)); o++) t(r[o], n + 1, i);
    }(r, 0, t), r;
  }
  var c = function () {
    var t = this;
    function c(t, e) {
      for (var r = 1 << e - 1 >>> 0; t & r;) r >>>= 1;
      return r ? (t & r - 1) + r : t;
    }
    function u(t, r, n, i, a) {
      e(!(i % n));
      do {
        t[r + (i -= n)] = a;
      } while (0 < i);
    }
    function h(t, r, n, i, o) {
      if (e(2328 >= o), 512 >= o) var s = a(512);else if (null == (s = a(o))) return 0;
      return function (t, r, n, i, o, s) {
        var h,
          f,
          d = r,
          p = 1 << n,
          g = a(16),
          m = a(16);
        for (e(0 != o), e(null != i), e(null != t), e(0 < n), f = 0; f < o; ++f) {
          if (15 < i[f]) return 0;
          ++g[i[f]];
        }
        if (g[0] == o) return 0;
        for (m[1] = 0, h = 1; 15 > h; ++h) {
          if (g[h] > 1 << h) return 0;
          m[h + 1] = m[h] + g[h];
        }
        for (f = 0; f < o; ++f) h = i[f], 0 < i[f] && (s[m[h]++] = f);
        if (1 == m[15]) return (i = new l()).g = 0, i.value = s[0], u(t, d, 1, p, i), p;
        var v,
          b = -1,
          y = p - 1,
          w = 0,
          N = 1,
          L = 1,
          A = 1 << n;
        for (f = 0, h = 1, o = 2; h <= n; ++h, o <<= 1) {
          if (N += L <<= 1, 0 > (L -= g[h])) return 0;
          for (; 0 < g[h]; --g[h]) (i = new l()).g = h, i.value = s[f++], u(t, d + w, o, A, i), w = c(w, h);
        }
        for (h = n + 1, o = 2; 15 >= h; ++h, o <<= 1) {
          if (N += L <<= 1, 0 > (L -= g[h])) return 0;
          for (; 0 < g[h]; --g[h]) {
            if (i = new l(), (w & y) != b) {
              for (d += A, v = 1 << (b = h) - n; 15 > b && !(0 >= (v -= g[b]));) ++b, v <<= 1;
              p += A = 1 << (v = b - n), t[r + (b = w & y)].g = v + n, t[r + b].value = d - r - b;
            }
            i.g = h - n, i.value = s[f++], u(t, d + (w >> n), o, A, i), w = c(w, h);
          }
        }
        return N != 2 * m[15] - 1 ? 0 : p;
      }(t, r, n, i, o, s);
    }
    function l() {
      this.value = this.g = 0;
    }
    function f() {
      this.value = this.g = 0;
    }
    function d() {
      this.G = o(5, l), this.H = a(5), this.jc = this.Qb = this.qb = this.nd = 0, this.pd = o(Dr, f);
    }
    function p(t, r, n, i) {
      e(null != t), e(null != r), e(2147483648 > i), t.Ca = 254, t.I = 0, t.b = -8, t.Ka = 0, t.oa = r, t.pa = n, t.Jd = r, t.Yc = n + i, t.Zc = 4 <= i ? n + i - 4 + 1 : n, _(t);
    }
    function g(t, e) {
      for (var r = 0; 0 < e--;) r |= k(t, 128) << e;
      return r;
    }
    function m(t, e) {
      var r = g(t, e);
      return P(t) ? -r : r;
    }
    function v(t, r, n, i) {
      var a,
        o = 0;
      for (e(null != t), e(null != r), e(4294967288 > i), t.Sb = i, t.Ra = 0, t.u = 0, t.h = 0, 4 < i && (i = 4), a = 0; a < i; ++a) o += r[n + a] << 8 * a;
      t.Ra = o, t.bb = i, t.oa = r, t.pa = n;
    }
    function b(t) {
      for (; 8 <= t.u && t.bb < t.Sb;) t.Ra >>>= 8, t.Ra += t.oa[t.pa + t.bb] << Ur - 8 >>> 0, ++t.bb, t.u -= 8;
      A(t) && (t.h = 1, t.u = 0);
    }
    function y(t, r) {
      if (e(0 <= r), !t.h && r <= Tr) {
        var n = L(t) & Rr[r];
        return t.u += r, b(t), n;
      }
      return t.h = 1, t.u = 0;
    }
    function w() {
      this.b = this.Ca = this.I = 0, this.oa = [], this.pa = 0, this.Jd = [], this.Yc = 0, this.Zc = [], this.Ka = 0;
    }
    function N() {
      this.Ra = 0, this.oa = [], this.h = this.u = this.bb = this.Sb = this.pa = 0;
    }
    function L(t) {
      return t.Ra >>> (t.u & Ur - 1) >>> 0;
    }
    function A(t) {
      return e(t.bb <= t.Sb), t.h || t.bb == t.Sb && t.u > Ur;
    }
    function x(t, e) {
      t.u = e, t.h = A(t);
    }
    function S(t) {
      t.u >= zr && (e(t.u >= zr), b(t));
    }
    function _(t) {
      e(null != t && null != t.oa), t.pa < t.Zc ? (t.I = (t.oa[t.pa++] | t.I << 8) >>> 0, t.b += 8) : (e(null != t && null != t.oa), t.pa < t.Yc ? (t.b += 8, t.I = t.oa[t.pa++] | t.I << 8) : t.Ka ? t.b = 0 : (t.I <<= 8, t.b += 8, t.Ka = 1));
    }
    function P(t) {
      return g(t, 1);
    }
    function k(t, e) {
      var r = t.Ca;
      0 > t.b && _(t);
      var n = t.b,
        i = r * e >>> 8,
        a = (t.I >>> n > i) + 0;
      for (a ? (r -= i, t.I -= i + 1 << n >>> 0) : r = i + 1, n = r, i = 0; 256 <= n;) i += 8, n >>= 8;
      return n = 7 ^ i + Hr[n], t.b -= n, t.Ca = (r << n) - 1, a;
    }
    function I(t, e, r) {
      t[e + 0] = r >> 24 & 255, t[e + 1] = r >> 16 & 255, t[e + 2] = r >> 8 & 255, t[e + 3] = r >> 0 & 255;
    }
    function F(t, e) {
      return t[e + 0] << 0 | t[e + 1] << 8;
    }
    function C(t, e) {
      return F(t, e) | t[e + 2] << 16;
    }
    function j(t, e) {
      return F(t, e) | F(t, e + 2) << 16;
    }
    function O(t, r) {
      var n = 1 << r;
      return e(null != t), e(0 < r), t.X = a(n), null == t.X ? 0 : (t.Mb = 32 - r, t.Xa = r, 1);
    }
    function B(t, r) {
      e(null != t), e(null != r), e(t.Xa == r.Xa), n(r.X, 0, t.X, 0, 1 << r.Xa);
    }
    function M() {
      this.X = [], this.Xa = this.Mb = 0;
    }
    function E(t, r, n, i) {
      e(null != n), e(null != i);
      var a = n[0],
        o = i[0];
      return 0 == a && (a = (t * o + r / 2) / r), 0 == o && (o = (r * a + t / 2) / t), 0 >= a || 0 >= o ? 0 : (n[0] = a, i[0] = o, 1);
    }
    function q(t, e) {
      return t + (1 << e) - 1 >>> e;
    }
    function D(t, e) {
      return ((4278255360 & t) + (4278255360 & e) >>> 0 & 4278255360) + ((16711935 & t) + (16711935 & e) >>> 0 & 16711935) >>> 0;
    }
    function R(e, r) {
      t[r] = function (r, n, i, a, o, s, c) {
        var u;
        for (u = 0; u < o; ++u) {
          var h = t[e](s[c + u - 1], i, a + u);
          s[c + u] = D(r[n + u], h);
        }
      };
    }
    function T() {
      this.ud = this.hd = this.jd = 0;
    }
    function U(t, e) {
      return ((4278124286 & (t ^ e)) >>> 1) + (t & e) >>> 0;
    }
    function z(t) {
      return 0 <= t && 256 > t ? t : 0 > t ? 0 : 255 < t ? 255 : void 0;
    }
    function H(t, e) {
      return z(t + (t - e + .5 >> 1));
    }
    function W(t, e, r) {
      return Math.abs(e - r) - Math.abs(t - r);
    }
    function V(t, e, r, n, i, a, o) {
      for (n = a[o - 1], r = 0; r < i; ++r) a[o + r] = n = D(t[e + r], n);
    }
    function G(t, e, r, n, i) {
      var a;
      for (a = 0; a < r; ++a) {
        var o = t[e + a],
          s = o >> 8 & 255,
          c = 16711935 & (c = (c = 16711935 & o) + ((s << 16) + s));
        n[i + a] = (4278255360 & o) + c >>> 0;
      }
    }
    function Y(t, e) {
      e.jd = t >> 0 & 255, e.hd = t >> 8 & 255, e.ud = t >> 16 & 255;
    }
    function J(t, e, r, n, i, a) {
      var o;
      for (o = 0; o < n; ++o) {
        var s = e[r + o],
          c = s >>> 8,
          u = s,
          h = 255 & (h = (h = s >>> 16) + ((t.jd << 24 >> 24) * (c << 24 >> 24) >>> 5));
        u = 255 & (u = (u = u + ((t.hd << 24 >> 24) * (c << 24 >> 24) >>> 5)) + ((t.ud << 24 >> 24) * (h << 24 >> 24) >>> 5));
        i[a + o] = (4278255360 & s) + (h << 16) + u;
      }
    }
    function X(e, r, n, i, a) {
      t[r] = function (t, e, r, n, o, s, c, u, h) {
        for (n = c; n < u; ++n) for (c = 0; c < h; ++c) o[s++] = a(r[i(t[e++])]);
      }, t[e] = function (e, r, o, s, c, u, h) {
        var l = 8 >> e.b,
          f = e.Ea,
          d = e.K[0],
          p = e.w;
        if (8 > l) for (e = (1 << e.b) - 1, p = (1 << l) - 1; r < o; ++r) {
          var g,
            m = 0;
          for (g = 0; g < f; ++g) g & e || (m = i(s[c++])), u[h++] = a(d[m & p]), m >>= l;
        } else t["VP8LMapColor" + n](s, c, d, p, u, h, r, o, f);
      };
    }
    function K(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = t[e++];
        n[i++] = a >> 16 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 0 & 255;
      }
    }
    function Z(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = t[e++];
        n[i++] = a >> 16 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 0 & 255, n[i++] = a >> 24 & 255;
      }
    }
    function $(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = (o = t[e++]) >> 16 & 240 | o >> 12 & 15,
          o = o >> 0 & 240 | o >> 28 & 15;
        n[i++] = a, n[i++] = o;
      }
    }
    function Q(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = (o = t[e++]) >> 16 & 248 | o >> 13 & 7,
          o = o >> 5 & 224 | o >> 3 & 31;
        n[i++] = a, n[i++] = o;
      }
    }
    function tt(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = t[e++];
        n[i++] = a >> 0 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 16 & 255;
      }
    }
    function et(t, e, r, i, a, o) {
      if (0 == o) for (r = e + r; e < r;) I(i, ((o = t[e++])[0] >> 24 | o[1] >> 8 & 65280 | o[2] << 8 & 16711680 | o[3] << 24) >>> 0), a += 32;else n(i, a, t, e, r);
    }
    function rt(e, r) {
      t[r][0] = t[e + "0"], t[r][1] = t[e + "1"], t[r][2] = t[e + "2"], t[r][3] = t[e + "3"], t[r][4] = t[e + "4"], t[r][5] = t[e + "5"], t[r][6] = t[e + "6"], t[r][7] = t[e + "7"], t[r][8] = t[e + "8"], t[r][9] = t[e + "9"], t[r][10] = t[e + "10"], t[r][11] = t[e + "11"], t[r][12] = t[e + "12"], t[r][13] = t[e + "13"], t[r][14] = t[e + "0"], t[r][15] = t[e + "0"];
    }
    function nt(t) {
      return t == Hn || t == Wn || t == Vn || t == Gn;
    }
    function it() {
      this.eb = [], this.size = this.A = this.fb = 0;
    }
    function at() {
      this.y = [], this.f = [], this.ea = [], this.F = [], this.Tc = this.Ed = this.Cd = this.Fd = this.lb = this.Db = this.Ab = this.fa = this.J = this.W = this.N = this.O = 0;
    }
    function ot() {
      this.Rd = this.height = this.width = this.S = 0, this.f = {}, this.f.RGBA = new it(), this.f.kb = new at(), this.sd = null;
    }
    function st() {
      this.width = [0], this.height = [0], this.Pd = [0], this.Qd = [0], this.format = [0];
    }
    function ct() {
      this.Id = this.fd = this.Md = this.hb = this.ib = this.da = this.bd = this.cd = this.j = this.v = this.Da = this.Sd = this.ob = 0;
    }
    function ut(t) {
      return alert("todo:WebPSamplerProcessPlane"), t.T;
    }
    function ht(t, e) {
      var r = t.T,
        i = e.ba.f.RGBA,
        a = i.eb,
        o = i.fb + t.ka * i.A,
        s = vi[e.ba.S],
        c = t.y,
        u = t.O,
        h = t.f,
        l = t.N,
        f = t.ea,
        d = t.W,
        p = e.cc,
        g = e.dc,
        m = e.Mc,
        v = e.Nc,
        b = t.ka,
        y = t.ka + t.T,
        w = t.U,
        N = w + 1 >> 1;
      for (0 == b ? s(c, u, null, null, h, l, f, d, h, l, f, d, a, o, null, null, w) : (s(e.ec, e.fc, c, u, p, g, m, v, h, l, f, d, a, o - i.A, a, o, w), ++r); b + 2 < y; b += 2) p = h, g = l, m = f, v = d, l += t.Rc, d += t.Rc, o += 2 * i.A, s(c, (u += 2 * t.fa) - t.fa, c, u, p, g, m, v, h, l, f, d, a, o - i.A, a, o, w);
      return u += t.fa, t.j + y < t.o ? (n(e.ec, e.fc, c, u, w), n(e.cc, e.dc, h, l, N), n(e.Mc, e.Nc, f, d, N), r--) : 1 & y || s(c, u, null, null, h, l, f, d, h, l, f, d, a, o + i.A, null, null, w), r;
    }
    function lt(t, r, n) {
      var i = t.F,
        a = [t.J];
      if (null != i) {
        var o = t.U,
          s = r.ba.S,
          c = s == Tn || s == Vn;
        r = r.ba.f.RGBA;
        var u = [0],
          h = t.ka;
        u[0] = t.T, t.Kb && (0 == h ? --u[0] : (--h, a[0] -= t.width), t.j + t.ka + t.T == t.o && (u[0] = t.o - t.j - h));
        var l = r.eb;
        h = r.fb + h * r.A;
        t = Sn(i, a[0], t.width, o, u, l, h + (c ? 0 : 3), r.A), e(n == u), t && nt(s) && An(l, h, c, o, u, r.A);
      }
      return 0;
    }
    function ft(t) {
      var e = t.ma,
        r = e.ba.S,
        n = 11 > r,
        i = r == qn || r == Rn || r == Tn || r == Un || 12 == r || nt(r);
      if (e.memory = null, e.Ib = null, e.Jb = null, e.Nd = null, !Mr(e.Oa, t, i ? 11 : 12)) return 0;
      if (i && nt(r) && br(), t.da) alert("todo:use_scaling");else {
        if (n) {
          if (e.Ib = ut, t.Kb) {
            if (r = t.U + 1 >> 1, e.memory = a(t.U + 2 * r), null == e.memory) return 0;
            e.ec = e.memory, e.fc = 0, e.cc = e.ec, e.dc = e.fc + t.U, e.Mc = e.cc, e.Nc = e.dc + r, e.Ib = ht, br();
          }
        } else alert("todo:EmitYUV");
        i && (e.Jb = lt, n && mr());
      }
      if (n && !Ci) {
        for (t = 0; 256 > t; ++t) ji[t] = 89858 * (t - 128) + _i >> Si, Mi[t] = -22014 * (t - 128) + _i, Bi[t] = -45773 * (t - 128), Oi[t] = 113618 * (t - 128) + _i >> Si;
        for (t = Pi; t < ki; ++t) e = 76283 * (t - 16) + _i >> Si, Ei[t - Pi] = Vt(e, 255), qi[t - Pi] = Vt(e + 8 >> 4, 15);
        Ci = 1;
      }
      return 1;
    }
    function dt(t) {
      var r = t.ma,
        n = t.U,
        i = t.T;
      return e(!(1 & t.ka)), 0 >= n || 0 >= i ? 0 : (n = r.Ib(t, r), null != r.Jb && r.Jb(t, r, n), r.Dc += n, 1);
    }
    function pt(t) {
      t.ma.memory = null;
    }
    function gt(t, e, r, n) {
      return 47 != y(t, 8) ? 0 : (e[0] = y(t, 14) + 1, r[0] = y(t, 14) + 1, n[0] = y(t, 1), 0 != y(t, 3) ? 0 : !t.h);
    }
    function mt(t, e) {
      if (4 > t) return t + 1;
      var r = t - 2 >> 1;
      return (2 + (1 & t) << r) + y(e, r) + 1;
    }
    function vt(t, e) {
      return 120 < e ? e - 120 : 1 <= (r = ((r = $n[e - 1]) >> 4) * t + (8 - (15 & r))) ? r : 1;
      var r;
    }
    function bt(t, e, r) {
      var n = L(r),
        i = t[e += 255 & n].g - 8;
      return 0 < i && (x(r, r.u + 8), n = L(r), e += t[e].value, e += n & (1 << i) - 1), x(r, r.u + t[e].g), t[e].value;
    }
    function yt(t, r, n) {
      return n.g += t.g, n.value += t.value << r >>> 0, e(8 >= n.g), t.g;
    }
    function wt(t, r, n) {
      var i = t.xc;
      return e((r = 0 == i ? 0 : t.vc[t.md * (n >> i) + (r >> i)]) < t.Wb), t.Ya[r];
    }
    function Nt(t, r, i, a) {
      var o = t.ab,
        s = t.c * r,
        c = t.C;
      r = c + r;
      var u = i,
        h = a;
      for (a = t.Ta, i = t.Ua; 0 < o--;) {
        var l = t.gc[o],
          f = c,
          d = r,
          p = u,
          g = h,
          m = (h = a, u = i, l.Ea);
        switch (e(f < d), e(d <= l.nc), l.hc) {
          case 2:
            Gr(p, g, (d - f) * m, h, u);
            break;
          case 0:
            var v = f,
              b = d,
              y = h,
              w = u,
              N = (_ = l).Ea;
            0 == v && (Wr(p, g, null, null, 1, y, w), V(p, g + 1, 0, 0, N - 1, y, w + 1), g += N, w += N, ++v);
            for (var L = 1 << _.b, A = L - 1, x = q(N, _.b), S = _.K, _ = _.w + (v >> _.b) * x; v < b;) {
              var P = S,
                k = _,
                I = 1;
              for (Vr(p, g, y, w - N, 1, y, w); I < N;) {
                var F = (I & ~A) + L;
                F > N && (F = N), (0, Zr[P[k++] >> 8 & 15])(p, g + +I, y, w + I - N, F - I, y, w + I), I = F;
              }
              g += N, w += N, ++v & A || (_ += x);
            }
            d != l.nc && n(h, u - m, h, u + (d - f - 1) * m, m);
            break;
          case 1:
            for (m = p, b = g, N = (p = l.Ea) - (w = p & ~(y = (g = 1 << l.b) - 1)), v = q(p, l.b), L = l.K, l = l.w + (f >> l.b) * v; f < d;) {
              for (A = L, x = l, S = new T(), _ = b + w, P = b + p; b < _;) Y(A[x++], S), $r(S, m, b, g, h, u), b += g, u += g;
              b < P && (Y(A[x++], S), $r(S, m, b, N, h, u), b += N, u += N), ++f & y || (l += v);
            }
            break;
          case 3:
            if (p == h && g == u && 0 < l.b) {
              for (b = h, p = m = u + (d - f) * m - (w = (d - f) * q(l.Ea, l.b)), g = h, y = u, v = [], w = (N = w) - 1; 0 <= w; --w) v[w] = g[y + w];
              for (w = N - 1; 0 <= w; --w) b[p + w] = v[w];
              Yr(l, f, d, h, m, h, u);
            } else Yr(l, f, d, p, g, h, u);
        }
        u = a, h = i;
      }
      h != i && n(a, i, u, h, s);
    }
    function Lt(t, r) {
      var n = t.V,
        i = t.Ba + t.c * t.C,
        a = r - t.C;
      if (e(r <= t.l.o), e(16 >= a), 0 < a) {
        var o = t.l,
          s = t.Ta,
          c = t.Ua,
          u = o.width;
        if (Nt(t, a, n, i), a = c = [c], e((n = t.C) < (i = r)), e(o.v < o.va), i > o.o && (i = o.o), n < o.j) {
          var h = o.j - n;
          n = o.j;
          a[0] += h * u;
        }
        if (n >= i ? n = 0 : (a[0] += 4 * o.v, o.ka = n - o.j, o.U = o.va - o.v, o.T = i - n, n = 1), n) {
          if (c = c[0], 11 > (n = t.ca).S) {
            var l = n.f.RGBA,
              f = (i = n.S, a = o.U, o = o.T, h = l.eb, l.A),
              d = o;
            for (l = l.fb + t.Ma * l.A; 0 < d--;) {
              var p = s,
                g = c,
                m = a,
                v = h,
                b = l;
              switch (i) {
                case En:
                  Qr(p, g, m, v, b);
                  break;
                case qn:
                  tn(p, g, m, v, b);
                  break;
                case Hn:
                  tn(p, g, m, v, b), An(v, b, 0, m, 1, 0);
                  break;
                case Dn:
                  nn(p, g, m, v, b);
                  break;
                case Rn:
                  et(p, g, m, v, b, 1);
                  break;
                case Wn:
                  et(p, g, m, v, b, 1), An(v, b, 0, m, 1, 0);
                  break;
                case Tn:
                  et(p, g, m, v, b, 0);
                  break;
                case Vn:
                  et(p, g, m, v, b, 0), An(v, b, 1, m, 1, 0);
                  break;
                case Un:
                  en(p, g, m, v, b);
                  break;
                case Gn:
                  en(p, g, m, v, b), xn(v, b, m, 1, 0);
                  break;
                case zn:
                  rn(p, g, m, v, b);
                  break;
                default:
                  e(0);
              }
              c += u, l += f;
            }
            t.Ma += o;
          } else alert("todo:EmitRescaledRowsYUVA");
          e(t.Ma <= n.height);
        }
      }
      t.C = r, e(t.C <= t.i);
    }
    function At(t) {
      var e;
      if (0 < t.ua) return 0;
      for (e = 0; e < t.Wb; ++e) {
        var r = t.Ya[e].G,
          n = t.Ya[e].H;
        if (0 < r[1][n[1] + 0].g || 0 < r[2][n[2] + 0].g || 0 < r[3][n[3] + 0].g) return 0;
      }
      return 1;
    }
    function xt(t, r, n, i, a, o) {
      if (0 != t.Z) {
        var s = t.qd,
          c = t.rd;
        for (e(null != mi[t.Z]); r < n; ++r) mi[t.Z](s, c, i, a, i, a, o), s = i, c = a, a += o;
        t.qd = s, t.rd = c;
      }
    }
    function St(t, r) {
      var n = t.l.ma,
        i = 0 == n.Z || 1 == n.Z ? t.l.j : t.C;
      i = t.C < i ? i : t.C;
      if (e(r <= t.l.o), r > i) {
        var a = t.l.width,
          o = n.ca,
          s = n.tb + a * i,
          c = t.V,
          u = t.Ba + t.c * i,
          h = t.gc;
        e(1 == t.ab), e(3 == h[0].hc), Xr(h[0], i, r, c, u, o, s), xt(n, i, r, o, s, a);
      }
      t.C = t.Ma = r;
    }
    function _t(t, r, n, i, a, o, s) {
      var c = t.$ / i,
        u = t.$ % i,
        h = t.m,
        l = t.s,
        f = n + t.$,
        d = f;
      a = n + i * a;
      var p = n + i * o,
        g = 280 + l.ua,
        m = t.Pb ? c : 16777216,
        v = 0 < l.ua ? l.Wa : null,
        b = l.wc,
        y = f < p ? wt(l, u, c) : null;
      e(t.C < o), e(p <= a);
      var w = !1;
      t: for (;;) {
        for (; w || f < p;) {
          var N = 0;
          if (c >= m) {
            var _ = f - n;
            e((m = t).Pb), m.wd = m.m, m.xd = _, 0 < m.s.ua && B(m.s.Wa, m.s.vb), m = c + ti;
          }
          if (u & b || (y = wt(l, u, c)), e(null != y), y.Qb && (r[f] = y.qb, w = !0), !w) if (S(h), y.jc) {
            N = h, _ = r;
            var P = f,
              k = y.pd[L(N) & Dr - 1];
            e(y.jc), 256 > k.g ? (x(N, N.u + k.g), _[P] = k.value, N = 0) : (x(N, N.u + k.g - 256), e(256 <= k.value), N = k.value), 0 == N && (w = !0);
          } else N = bt(y.G[0], y.H[0], h);
          if (h.h) break;
          if (w || 256 > N) {
            if (!w) if (y.nd) r[f] = (y.qb | N << 8) >>> 0;else {
              if (S(h), w = bt(y.G[1], y.H[1], h), S(h), _ = bt(y.G[2], y.H[2], h), P = bt(y.G[3], y.H[3], h), h.h) break;
              r[f] = (P << 24 | w << 16 | N << 8 | _) >>> 0;
            }
            if (w = !1, ++f, ++u >= i && (u = 0, ++c, null != s && c <= o && !(c % 16) && s(t, c), null != v)) for (; d < f;) N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
          } else if (280 > N) {
            if (N = mt(N - 256, h), _ = bt(y.G[4], y.H[4], h), S(h), _ = vt(i, _ = mt(_, h)), h.h) break;
            if (f - n < _ || a - f < N) break t;
            for (P = 0; P < N; ++P) r[f + P] = r[f + P - _];
            for (f += N, u += N; u >= i;) u -= i, ++c, null != s && c <= o && !(c % 16) && s(t, c);
            if (e(f <= a), u & b && (y = wt(l, u, c)), null != v) for (; d < f;) N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
          } else {
            if (!(N < g)) break t;
            for (w = N - 280, e(null != v); d < f;) N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
            N = f, e(!(w >>> (_ = v).Xa)), r[N] = _.X[w], w = !0;
          }
          w || e(h.h == A(h));
        }
        if (t.Pb && h.h && f < a) e(t.m.h), t.a = 5, t.m = t.wd, t.$ = t.xd, 0 < t.s.ua && B(t.s.vb, t.s.Wa);else {
          if (h.h) break t;
          null != s && s(t, c > o ? o : c), t.a = 0, t.$ = f - n;
        }
        return 1;
      }
      return t.a = 3, 0;
    }
    function Pt(t) {
      e(null != t), t.vc = null, t.yc = null, t.Ya = null;
      var r = t.Wa;
      null != r && (r.X = null), t.vb = null, e(null != t);
    }
    function kt() {
      var e = new or();
      return null == e ? null : (e.a = 0, e.xb = gi, rt("Predictor", "VP8LPredictors"), rt("Predictor", "VP8LPredictors_C"), rt("PredictorAdd", "VP8LPredictorsAdd"), rt("PredictorAdd", "VP8LPredictorsAdd_C"), Gr = G, $r = J, Qr = K, tn = Z, en = $, rn = Q, nn = tt, t.VP8LMapColor32b = Jr, t.VP8LMapColor8b = Kr, e);
    }
    function It(t, r, n, s, c) {
      var u = 1,
        f = [t],
        p = [r],
        g = s.m,
        m = s.s,
        v = null,
        b = 0;
      t: for (;;) {
        if (n) for (; u && y(g, 1);) {
          var w = f,
            N = p,
            A = s,
            _ = 1,
            P = A.m,
            k = A.gc[A.ab],
            I = y(P, 2);
          if (A.Oc & 1 << I) u = 0;else {
            switch (A.Oc |= 1 << I, k.hc = I, k.Ea = w[0], k.nc = N[0], k.K = [null], ++A.ab, e(4 >= A.ab), I) {
              case 0:
              case 1:
                k.b = y(P, 3) + 2, _ = It(q(k.Ea, k.b), q(k.nc, k.b), 0, A, k.K), k.K = k.K[0];
                break;
              case 3:
                var F,
                  C = y(P, 8) + 1,
                  j = 16 < C ? 0 : 4 < C ? 1 : 2 < C ? 2 : 3;
                if (w[0] = q(k.Ea, j), k.b = j, F = _ = It(C, 1, 0, A, k.K)) {
                  var B,
                    M = C,
                    E = k,
                    R = 1 << (8 >> E.b),
                    T = a(R);
                  if (null == T) F = 0;else {
                    var U = E.K[0],
                      z = E.w;
                    for (T[0] = E.K[0][0], B = 1; B < 1 * M; ++B) T[B] = D(U[z + B], T[B - 1]);
                    for (; B < 4 * R; ++B) T[B] = 0;
                    E.K[0] = null, E.K[0] = T, F = 1;
                  }
                }
                _ = F;
                break;
              case 2:
                break;
              default:
                e(0);
            }
            u = _;
          }
        }
        if (f = f[0], p = p[0], u && y(g, 1) && !(u = 1 <= (b = y(g, 4)) && 11 >= b)) {
          s.a = 3;
          break t;
        }
        var H;
        if (H = u) e: {
          var W,
            V,
            G,
            Y = s,
            J = f,
            X = p,
            K = b,
            Z = n,
            $ = Y.m,
            Q = Y.s,
            tt = [null],
            et = 1,
            rt = 0,
            nt = Qn[K];
          r: for (;;) {
            if (Z && y($, 1)) {
              var it = y($, 3) + 2,
                at = q(J, it),
                ot = q(X, it),
                st = at * ot;
              if (!It(at, ot, 0, Y, tt)) break r;
              for (tt = tt[0], Q.xc = it, W = 0; W < st; ++W) {
                var ct = tt[W] >> 8 & 65535;
                tt[W] = ct, ct >= et && (et = ct + 1);
              }
            }
            if ($.h) break r;
            for (V = 0; 5 > V; ++V) {
              var ut = Xn[V];
              !V && 0 < K && (ut += 1 << K), rt < ut && (rt = ut);
            }
            var ht = o(et * nt, l),
              lt = et,
              ft = o(lt, d);
            if (null == ft) var dt = null;else e(65536 >= lt), dt = ft;
            var pt = a(rt);
            if (null == dt || null == pt || null == ht) {
              Y.a = 1;
              break r;
            }
            var gt = ht;
            for (W = G = 0; W < et; ++W) {
              var mt = dt[W],
                vt = mt.G,
                bt = mt.H,
                wt = 0,
                Nt = 1,
                Lt = 0;
              for (V = 0; 5 > V; ++V) {
                ut = Xn[V], vt[V] = gt, bt[V] = G, !V && 0 < K && (ut += 1 << K);
                n: {
                  var At,
                    xt = ut,
                    St = Y,
                    kt = pt,
                    Ft = gt,
                    Ct = G,
                    jt = 0,
                    Ot = St.m,
                    Bt = y(Ot, 1);
                  if (i(kt, 0, 0, xt), Bt) {
                    var Mt = y(Ot, 1) + 1,
                      Et = y(Ot, 1),
                      qt = y(Ot, 0 == Et ? 1 : 8);
                    kt[qt] = 1, 2 == Mt && (kt[qt = y(Ot, 8)] = 1);
                    var Dt = 1;
                  } else {
                    var Rt = a(19),
                      Tt = y(Ot, 4) + 4;
                    if (19 < Tt) {
                      St.a = 3;
                      var Ut = 0;
                      break n;
                    }
                    for (At = 0; At < Tt; ++At) Rt[Zn[At]] = y(Ot, 3);
                    var zt = void 0,
                      Ht = void 0,
                      Wt = St,
                      Vt = Rt,
                      Gt = xt,
                      Yt = kt,
                      Jt = 0,
                      Xt = Wt.m,
                      Kt = 8,
                      Zt = o(128, l);
                    i: for (; h(Zt, 0, 7, Vt, 19);) {
                      if (y(Xt, 1)) {
                        var $t = 2 + 2 * y(Xt, 3);
                        if ((zt = 2 + y(Xt, $t)) > Gt) break i;
                      } else zt = Gt;
                      for (Ht = 0; Ht < Gt && zt--;) {
                        S(Xt);
                        var Qt = Zt[0 + (127 & L(Xt))];
                        x(Xt, Xt.u + Qt.g);
                        var te = Qt.value;
                        if (16 > te) Yt[Ht++] = te, 0 != te && (Kt = te);else {
                          var ee = 16 == te,
                            re = te - 16,
                            ne = Jn[re],
                            ie = y(Xt, Yn[re]) + ne;
                          if (Ht + ie > Gt) break i;
                          for (var ae = ee ? Kt : 0; 0 < ie--;) Yt[Ht++] = ae;
                        }
                      }
                      Jt = 1;
                      break i;
                    }
                    Jt || (Wt.a = 3), Dt = Jt;
                  }
                  (Dt = Dt && !Ot.h) && (jt = h(Ft, Ct, 8, kt, xt)), Dt && 0 != jt ? Ut = jt : (St.a = 3, Ut = 0);
                }
                if (0 == Ut) break r;
                if (Nt && 1 == Kn[V] && (Nt = 0 == gt[G].g), wt += gt[G].g, G += Ut, 3 >= V) {
                  var oe,
                    se = pt[0];
                  for (oe = 1; oe < ut; ++oe) pt[oe] > se && (se = pt[oe]);
                  Lt += se;
                }
              }
              if (mt.nd = Nt, mt.Qb = 0, Nt && (mt.qb = (vt[3][bt[3] + 0].value << 24 | vt[1][bt[1] + 0].value << 16 | vt[2][bt[2] + 0].value) >>> 0, 0 == wt && 256 > vt[0][bt[0] + 0].value && (mt.Qb = 1, mt.qb += vt[0][bt[0] + 0].value << 8)), mt.jc = !mt.Qb && 6 > Lt, mt.jc) {
                var ce,
                  ue = mt;
                for (ce = 0; ce < Dr; ++ce) {
                  var he = ce,
                    le = ue.pd[he],
                    fe = ue.G[0][ue.H[0] + he];
                  256 <= fe.value ? (le.g = fe.g + 256, le.value = fe.value) : (le.g = 0, le.value = 0, he >>= yt(fe, 8, le), he >>= yt(ue.G[1][ue.H[1] + he], 16, le), he >>= yt(ue.G[2][ue.H[2] + he], 0, le), yt(ue.G[3][ue.H[3] + he], 24, le));
                }
              }
            }
            Q.vc = tt, Q.Wb = et, Q.Ya = dt, Q.yc = ht, H = 1;
            break e;
          }
          H = 0;
        }
        if (!(u = H)) {
          s.a = 3;
          break t;
        }
        if (0 < b) {
          if (m.ua = 1 << b, !O(m.Wa, b)) {
            s.a = 1, u = 0;
            break t;
          }
        } else m.ua = 0;
        var de = s,
          pe = f,
          ge = p,
          me = de.s,
          ve = me.xc;
        if (de.c = pe, de.i = ge, me.md = q(pe, ve), me.wc = 0 == ve ? -1 : (1 << ve) - 1, n) {
          s.xb = pi;
          break t;
        }
        if (null == (v = a(f * p))) {
          s.a = 1, u = 0;
          break t;
        }
        u = (u = _t(s, v, 0, f, p, p, null)) && !g.h;
        break t;
      }
      return u ? (null != c ? c[0] = v : (e(null == v), e(n)), s.$ = 0, n || Pt(m)) : Pt(m), u;
    }
    function Ft(t, r) {
      var n = t.c * t.i,
        i = n + r + 16 * r;
      return e(t.c <= r), t.V = a(i), null == t.V ? (t.Ta = null, t.Ua = 0, t.a = 1, 0) : (t.Ta = t.V, t.Ua = t.Ba + n + r, 1);
    }
    function Ct(t, r) {
      var n = t.C,
        i = r - n,
        a = t.V,
        o = t.Ba + t.c * n;
      for (e(r <= t.l.o); 0 < i;) {
        var s = 16 < i ? 16 : i,
          c = t.l.ma,
          u = t.l.width,
          h = u * s,
          l = c.ca,
          f = c.tb + u * n,
          d = t.Ta,
          p = t.Ua;
        Nt(t, s, a, o), _n(d, p, l, f, h), xt(c, n, n + s, l, f, u), i -= s, a += s * t.c, n += s;
      }
      e(n == r), t.C = t.Ma = r;
    }
    function jt() {
      this.ub = this.yd = this.td = this.Rb = 0;
    }
    function Ot() {
      this.Kd = this.Ld = this.Ud = this.Td = this.i = this.c = 0;
    }
    function Bt() {
      this.Fb = this.Bb = this.Cb = 0, this.Zb = a(4), this.Lb = a(4);
    }
    function Mt() {
      this.Yb = function () {
        var t = [];
        return function t(e, r, n) {
          for (var i = n[r], a = 0; a < i && (e.push(n.length > r + 1 ? [] : 0), !(n.length < r + 1)); a++) t(e[a], r + 1, n);
        }(t, 0, [3, 11]), t;
      }();
    }
    function Et() {
      this.jb = a(3), this.Wc = s([4, 8], Mt), this.Xc = s([4, 17], Mt);
    }
    function qt() {
      this.Pc = this.wb = this.Tb = this.zd = 0, this.vd = new a(4), this.od = new a(4);
    }
    function Dt() {
      this.ld = this.La = this.dd = this.tc = 0;
    }
    function Rt() {
      this.Na = this.la = 0;
    }
    function Tt() {
      this.Sc = [0, 0], this.Eb = [0, 0], this.Qc = [0, 0], this.ia = this.lc = 0;
    }
    function Ut() {
      this.ad = a(384), this.Za = 0, this.Ob = a(16), this.$b = this.Ad = this.ia = this.Gc = this.Hc = this.Dd = 0;
    }
    function zt() {
      this.uc = this.M = this.Nb = 0, this.wa = Array(new Dt()), this.Y = 0, this.ya = Array(new Ut()), this.aa = 0, this.l = new Gt();
    }
    function Ht() {
      this.y = a(16), this.f = a(8), this.ea = a(8);
    }
    function Wt() {
      this.cb = this.a = 0, this.sc = "", this.m = new w(), this.Od = new jt(), this.Kc = new Ot(), this.ed = new qt(), this.Qa = new Bt(), this.Ic = this.$c = this.Aa = 0, this.D = new zt(), this.Xb = this.Va = this.Hb = this.zb = this.yb = this.Ub = this.za = 0, this.Jc = o(8, w), this.ia = 0, this.pb = o(4, Tt), this.Pa = new Et(), this.Bd = this.kc = 0, this.Ac = [], this.Bc = 0, this.zc = [0, 0, 0, 0], this.Gd = Array(new Ht()), this.Hd = 0, this.rb = Array(new Rt()), this.sb = 0, this.wa = Array(new Dt()), this.Y = 0, this.oc = [], this.pc = 0, this.sa = [], this.ta = 0, this.qa = [], this.ra = 0, this.Ha = [], this.B = this.R = this.Ia = 0, this.Ec = [], this.M = this.ja = this.Vb = this.Fc = 0, this.ya = Array(new Ut()), this.L = this.aa = 0, this.gd = s([4, 2], Dt), this.ga = null, this.Fa = [], this.Cc = this.qc = this.P = 0, this.Gb = [], this.Uc = 0, this.mb = [], this.nb = 0, this.rc = [], this.Ga = this.Vc = 0;
    }
    function Vt(t, e) {
      return 0 > t ? 0 : t > e ? e : t;
    }
    function Gt() {
      this.T = this.U = this.ka = this.height = this.width = 0, this.y = [], this.f = [], this.ea = [], this.Rc = this.fa = this.W = this.N = this.O = 0, this.ma = "void", this.put = "VP8IoPutHook", this.ac = "VP8IoSetupHook", this.bc = "VP8IoTeardownHook", this.ha = this.Kb = 0, this.data = [], this.hb = this.ib = this.da = this.o = this.j = this.va = this.v = this.Da = this.ob = this.w = 0, this.F = [], this.J = 0;
    }
    function Yt() {
      var t = new Wt();
      return null != t && (t.a = 0, t.sc = "OK", t.cb = 0, t.Xb = 0, ni || (ni = Zt)), t;
    }
    function Jt(t, e, r) {
      return 0 == t.a && (t.a = e, t.sc = r, t.cb = 0), 0;
    }
    function Xt(t, e, r) {
      return 3 <= r && 157 == t[e + 0] && 1 == t[e + 1] && 42 == t[e + 2];
    }
    function Kt(t, r) {
      if (null == t) return 0;
      if (t.a = 0, t.sc = "OK", null == r) return Jt(t, 2, "null VP8Io passed to VP8GetHeaders()");
      var n = r.data,
        a = r.w,
        o = r.ha;
      if (4 > o) return Jt(t, 7, "Truncated header.");
      var s = n[a + 0] | n[a + 1] << 8 | n[a + 2] << 16,
        c = t.Od;
      if (c.Rb = !(1 & s), c.td = s >> 1 & 7, c.yd = s >> 4 & 1, c.ub = s >> 5, 3 < c.td) return Jt(t, 3, "Incorrect keyframe parameters.");
      if (!c.yd) return Jt(t, 4, "Frame not displayable.");
      a += 3, o -= 3;
      var u = t.Kc;
      if (c.Rb) {
        if (7 > o) return Jt(t, 7, "cannot parse picture header");
        if (!Xt(n, a, o)) return Jt(t, 3, "Bad code word");
        u.c = 16383 & (n[a + 4] << 8 | n[a + 3]), u.Td = n[a + 4] >> 6, u.i = 16383 & (n[a + 6] << 8 | n[a + 5]), u.Ud = n[a + 6] >> 6, a += 7, o -= 7, t.za = u.c + 15 >> 4, t.Ub = u.i + 15 >> 4, r.width = u.c, r.height = u.i, r.Da = 0, r.j = 0, r.v = 0, r.va = r.width, r.o = r.height, r.da = 0, r.ib = r.width, r.hb = r.height, r.U = r.width, r.T = r.height, i((s = t.Pa).jb, 0, 255, s.jb.length), e(null != (s = t.Qa)), s.Cb = 0, s.Bb = 0, s.Fb = 1, i(s.Zb, 0, 0, s.Zb.length), i(s.Lb, 0, 0, s.Lb);
      }
      if (c.ub > o) return Jt(t, 7, "bad partition length");
      p(s = t.m, n, a, c.ub), a += c.ub, o -= c.ub, c.Rb && (u.Ld = P(s), u.Kd = P(s)), u = t.Qa;
      var h,
        l = t.Pa;
      if (e(null != s), e(null != u), u.Cb = P(s), u.Cb) {
        if (u.Bb = P(s), P(s)) {
          for (u.Fb = P(s), h = 0; 4 > h; ++h) u.Zb[h] = P(s) ? m(s, 7) : 0;
          for (h = 0; 4 > h; ++h) u.Lb[h] = P(s) ? m(s, 6) : 0;
        }
        if (u.Bb) for (h = 0; 3 > h; ++h) l.jb[h] = P(s) ? g(s, 8) : 255;
      } else u.Bb = 0;
      if (s.Ka) return Jt(t, 3, "cannot parse segment header");
      if ((u = t.ed).zd = P(s), u.Tb = g(s, 6), u.wb = g(s, 3), u.Pc = P(s), u.Pc && P(s)) {
        for (l = 0; 4 > l; ++l) P(s) && (u.vd[l] = m(s, 6));
        for (l = 0; 4 > l; ++l) P(s) && (u.od[l] = m(s, 6));
      }
      if (t.L = 0 == u.Tb ? 0 : u.zd ? 1 : 2, s.Ka) return Jt(t, 3, "cannot parse filter header");
      var f = o;
      if (o = h = a, a = h + f, u = f, t.Xb = (1 << g(t.m, 2)) - 1, f < 3 * (l = t.Xb)) n = 7;else {
        for (h += 3 * l, u -= 3 * l, f = 0; f < l; ++f) {
          var d = n[o + 0] | n[o + 1] << 8 | n[o + 2] << 16;
          d > u && (d = u), p(t.Jc[+f], n, h, d), h += d, u -= d, o += 3;
        }
        p(t.Jc[+l], n, h, u), n = h < a ? 0 : 5;
      }
      if (0 != n) return Jt(t, n, "cannot parse partitions");
      for (n = g(h = t.m, 7), o = P(h) ? m(h, 4) : 0, a = P(h) ? m(h, 4) : 0, u = P(h) ? m(h, 4) : 0, l = P(h) ? m(h, 4) : 0, h = P(h) ? m(h, 4) : 0, f = t.Qa, d = 0; 4 > d; ++d) {
        if (f.Cb) {
          var v = f.Zb[d];
          f.Fb || (v += n);
        } else {
          if (0 < d) {
            t.pb[d] = t.pb[0];
            continue;
          }
          v = n;
        }
        var b = t.pb[d];
        b.Sc[0] = ei[Vt(v + o, 127)], b.Sc[1] = ri[Vt(v + 0, 127)], b.Eb[0] = 2 * ei[Vt(v + a, 127)], b.Eb[1] = 101581 * ri[Vt(v + u, 127)] >> 16, 8 > b.Eb[1] && (b.Eb[1] = 8), b.Qc[0] = ei[Vt(v + l, 117)], b.Qc[1] = ri[Vt(v + h, 127)], b.lc = v + h;
      }
      if (!c.Rb) return Jt(t, 4, "Not a key frame.");
      for (P(s), c = t.Pa, n = 0; 4 > n; ++n) {
        for (o = 0; 8 > o; ++o) for (a = 0; 3 > a; ++a) for (u = 0; 11 > u; ++u) l = k(s, ui[n][o][a][u]) ? g(s, 8) : si[n][o][a][u], c.Wc[n][o].Yb[a][u] = l;
        for (o = 0; 17 > o; ++o) c.Xc[n][o] = c.Wc[n][hi[o]];
      }
      return t.kc = P(s), t.kc && (t.Bd = g(s, 8)), t.cb = 1;
    }
    function Zt(t, e, r, n, i, a, o) {
      var s = e[i].Yb[r];
      for (r = 0; 16 > i; ++i) {
        if (!k(t, s[r + 0])) return i;
        for (; !k(t, s[r + 1]);) if (s = e[++i].Yb[0], r = 0, 16 == i) return 16;
        var c = e[i + 1].Yb;
        if (k(t, s[r + 2])) {
          var u = t,
            h = 0;
          if (k(u, (f = s)[(l = r) + 3])) {
            if (k(u, f[l + 6])) {
              for (s = 0, l = 2 * (h = k(u, f[l + 8])) + (f = k(u, f[l + 9 + h])), h = 0, f = ii[l]; f[s]; ++s) h += h + k(u, f[s]);
              h += 3 + (8 << l);
            } else k(u, f[l + 7]) ? (h = 7 + 2 * k(u, 165), h += k(u, 145)) : h = 5 + k(u, 159);
          } else h = k(u, f[l + 4]) ? 3 + k(u, f[l + 5]) : 2;
          s = c[2];
        } else h = 1, s = c[1];
        c = o + ai[i], 0 > (u = t).b && _(u);
        var l,
          f = u.b,
          d = (l = u.Ca >> 1) - (u.I >> f) >> 31;
        --u.b, u.Ca += d, u.Ca |= 1, u.I -= (l + 1 & d) << f, a[c] = ((h ^ d) - d) * n[(0 < i) + 0];
      }
      return 16;
    }
    function $t(t) {
      var e = t.rb[t.sb - 1];
      e.la = 0, e.Na = 0, i(t.zc, 0, 0, t.zc.length), t.ja = 0;
    }
    function Qt(t, r) {
      if (null == t) return 0;
      if (null == r) return Jt(t, 2, "NULL VP8Io parameter in VP8Decode().");
      if (!t.cb && !Kt(t, r)) return 0;
      if (e(t.cb), null == r.ac || r.ac(r)) {
        r.ob && (t.L = 0);
        var s = Ri[t.L];
        if (2 == t.L ? (t.yb = 0, t.zb = 0) : (t.yb = r.v - s >> 4, t.zb = r.j - s >> 4, 0 > t.yb && (t.yb = 0), 0 > t.zb && (t.zb = 0)), t.Va = r.o + 15 + s >> 4, t.Hb = r.va + 15 + s >> 4, t.Hb > t.za && (t.Hb = t.za), t.Va > t.Ub && (t.Va = t.Ub), 0 < t.L) {
          var c = t.ed;
          for (s = 0; 4 > s; ++s) {
            var u;
            if (t.Qa.Cb) {
              var h = t.Qa.Lb[s];
              t.Qa.Fb || (h += c.Tb);
            } else h = c.Tb;
            for (u = 0; 1 >= u; ++u) {
              var l = t.gd[s][u],
                f = h;
              if (c.Pc && (f += c.vd[0], u && (f += c.od[0])), 0 < (f = 0 > f ? 0 : 63 < f ? 63 : f)) {
                var d = f;
                0 < c.wb && (d = 4 < c.wb ? d >> 2 : d >> 1) > 9 - c.wb && (d = 9 - c.wb), 1 > d && (d = 1), l.dd = d, l.tc = 2 * f + d, l.ld = 40 <= f ? 2 : 15 <= f ? 1 : 0;
              } else l.tc = 0;
              l.La = u;
            }
          }
        }
        s = 0;
      } else Jt(t, 6, "Frame setup failed"), s = t.a;
      if (s = 0 == s) {
        if (s) {
          t.$c = 0, 0 < t.Aa || (t.Ic = Ui);
          t: {
            s = t.Ic;
            c = 4 * (d = t.za);
            var p = 32 * d,
              g = d + 1,
              m = 0 < t.L ? d * (0 < t.Aa ? 2 : 1) : 0,
              v = (2 == t.Aa ? 2 : 1) * d;
            if ((l = c + 832 + (u = 3 * (16 * s + Ri[t.L]) / 2 * p) + (h = null != t.Fa && 0 < t.Fa.length ? t.Kc.c * t.Kc.i : 0)) != l) s = 0;else {
              if (l > t.Vb) {
                if (t.Vb = 0, t.Ec = a(l), t.Fc = 0, null == t.Ec) {
                  s = Jt(t, 1, "no memory during frame initialization.");
                  break t;
                }
                t.Vb = l;
              }
              l = t.Ec, f = t.Fc, t.Ac = l, t.Bc = f, f += c, t.Gd = o(p, Ht), t.Hd = 0, t.rb = o(g + 1, Rt), t.sb = 1, t.wa = m ? o(m, Dt) : null, t.Y = 0, t.D.Nb = 0, t.D.wa = t.wa, t.D.Y = t.Y, 0 < t.Aa && (t.D.Y += d), e(!0), t.oc = l, t.pc = f, f += 832, t.ya = o(v, Ut), t.aa = 0, t.D.ya = t.ya, t.D.aa = t.aa, 2 == t.Aa && (t.D.aa += d), t.R = 16 * d, t.B = 8 * d, d = (p = Ri[t.L]) * t.R, p = p / 2 * t.B, t.sa = l, t.ta = f + d, t.qa = t.sa, t.ra = t.ta + 16 * s * t.R + p, t.Ha = t.qa, t.Ia = t.ra + 8 * s * t.B + p, t.$c = 0, f += u, t.mb = h ? l : null, t.nb = h ? f : null, e(f + h <= t.Fc + t.Vb), $t(t), i(t.Ac, t.Bc, 0, c), s = 1;
            }
          }
          if (s) {
            if (r.ka = 0, r.y = t.sa, r.O = t.ta, r.f = t.qa, r.N = t.ra, r.ea = t.Ha, r.Vd = t.Ia, r.fa = t.R, r.Rc = t.B, r.F = null, r.J = 0, !Cn) {
              for (s = -255; 255 >= s; ++s) Pn[255 + s] = 0 > s ? -s : s;
              for (s = -1020; 1020 >= s; ++s) kn[1020 + s] = -128 > s ? -128 : 127 < s ? 127 : s;
              for (s = -112; 112 >= s; ++s) In[112 + s] = -16 > s ? -16 : 15 < s ? 15 : s;
              for (s = -255; 510 >= s; ++s) Fn[255 + s] = 0 > s ? 0 : 255 < s ? 255 : s;
              Cn = 1;
            }
            an = ue, on = ae, cn = oe, un = se, hn = ce, sn = ie, ln = Je, fn = Xe, dn = $e, pn = Qe, gn = Ke, mn = Ze, vn = tr, bn = er, yn = ze, wn = He, Nn = We, Ln = Ve, fi[0] = xe, fi[1] = le, fi[2] = Le, fi[3] = Ae, fi[4] = Se, fi[5] = Pe, fi[6] = _e, fi[7] = ke, fi[8] = Fe, fi[9] = Ie, li[0] = ve, li[1] = de, li[2] = pe, li[3] = ge, li[4] = be, li[5] = ye, li[6] = we, di[0] = Be, di[1] = fe, di[2] = Ce, di[3] = je, di[4] = Ee, di[5] = Me, di[6] = qe, s = 1;
          } else s = 0;
        }
        s && (s = function (t, r) {
          for (t.M = 0; t.M < t.Va; ++t.M) {
            var o,
              s = t.Jc[t.M & t.Xb],
              c = t.m,
              u = t;
            for (o = 0; o < u.za; ++o) {
              var h = c,
                l = u,
                f = l.Ac,
                d = l.Bc + 4 * o,
                p = l.zc,
                g = l.ya[l.aa + o];
              if (l.Qa.Bb ? g.$b = k(h, l.Pa.jb[0]) ? 2 + k(h, l.Pa.jb[2]) : k(h, l.Pa.jb[1]) : g.$b = 0, l.kc && (g.Ad = k(h, l.Bd)), g.Za = !k(h, 145) + 0, g.Za) {
                var m = g.Ob,
                  v = 0;
                for (l = 0; 4 > l; ++l) {
                  var b,
                    y = p[0 + l];
                  for (b = 0; 4 > b; ++b) {
                    y = ci[f[d + b]][y];
                    for (var w = oi[k(h, y[0])]; 0 < w;) w = oi[2 * w + k(h, y[w])];
                    y = -w, f[d + b] = y;
                  }
                  n(m, v, f, d, 4), v += 4, p[0 + l] = y;
                }
              } else y = k(h, 156) ? k(h, 128) ? 1 : 3 : k(h, 163) ? 2 : 0, g.Ob[0] = y, i(f, d, y, 4), i(p, 0, y, 4);
              g.Dd = k(h, 142) ? k(h, 114) ? k(h, 183) ? 1 : 3 : 2 : 0;
            }
            if (u.m.Ka) return Jt(t, 7, "Premature end-of-partition0 encountered.");
            for (; t.ja < t.za; ++t.ja) {
              if (u = s, h = (c = t).rb[c.sb - 1], f = c.rb[c.sb + c.ja], o = c.ya[c.aa + c.ja], d = c.kc ? o.Ad : 0) h.la = f.la = 0, o.Za || (h.Na = f.Na = 0), o.Hc = 0, o.Gc = 0, o.ia = 0;else {
                var N, L;
                h = f, f = u, d = c.Pa.Xc, p = c.ya[c.aa + c.ja], g = c.pb[p.$b];
                if (l = p.ad, m = 0, v = c.rb[c.sb - 1], y = b = 0, i(l, m, 0, 384), p.Za) var A = 0,
                  x = d[3];else {
                  w = a(16);
                  var S = h.Na + v.Na;
                  if (S = ni(f, d[1], S, g.Eb, 0, w, 0), h.Na = v.Na = (0 < S) + 0, 1 < S) an(w, 0, l, m);else {
                    var _ = w[0] + 3 >> 3;
                    for (w = 0; 256 > w; w += 16) l[m + w] = _;
                  }
                  A = 1, x = d[0];
                }
                var P = 15 & h.la,
                  I = 15 & v.la;
                for (w = 0; 4 > w; ++w) {
                  var F = 1 & I;
                  for (_ = L = 0; 4 > _; ++_) P = P >> 1 | (F = (S = ni(f, x, S = F + (1 & P), g.Sc, A, l, m)) > A) << 7, L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != l[m + 0]), m += 16;
                  P >>= 4, I = I >> 1 | F << 7, b = (b << 8 | L) >>> 0;
                }
                for (x = P, A = I >> 4, N = 0; 4 > N; N += 2) {
                  for (L = 0, P = h.la >> 4 + N, I = v.la >> 4 + N, w = 0; 2 > w; ++w) {
                    for (F = 1 & I, _ = 0; 2 > _; ++_) S = F + (1 & P), P = P >> 1 | (F = 0 < (S = ni(f, d[2], S, g.Qc, 0, l, m))) << 3, L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != l[m + 0]), m += 16;
                    P >>= 2, I = I >> 1 | F << 5;
                  }
                  y |= L << 4 * N, x |= P << 4 << N, A |= (240 & I) << N;
                }
                h.la = x, v.la = A, p.Hc = b, p.Gc = y, p.ia = 43690 & y ? 0 : g.ia, d = !(b | y);
              }
              if (0 < c.L && (c.wa[c.Y + c.ja] = c.gd[o.$b][o.Za], c.wa[c.Y + c.ja].La |= !d), u.Ka) return Jt(t, 7, "Premature end-of-file encountered.");
            }
            if ($t(t), c = r, u = 1, o = (s = t).D, h = 0 < s.L && s.M >= s.zb && s.M <= s.Va, 0 == s.Aa) t: {
              if (o.M = s.M, o.uc = h, Or(s, o), u = 1, o = (L = s.D).Nb, h = (y = Ri[s.L]) * s.R, f = y / 2 * s.B, w = 16 * o * s.R, _ = 8 * o * s.B, d = s.sa, p = s.ta - h + w, g = s.qa, l = s.ra - f + _, m = s.Ha, v = s.Ia - f + _, I = 0 == (P = L.M), b = P >= s.Va - 1, 2 == s.Aa && Or(s, L), L.uc) for (F = (S = s).D.M, e(S.D.uc), L = S.yb; L < S.Hb; ++L) {
                A = L, x = F;
                var C = (j = (U = S).D).Nb;
                N = U.R;
                var j = j.wa[j.Y + A],
                  O = U.sa,
                  B = U.ta + 16 * C * N + 16 * A,
                  M = j.dd,
                  E = j.tc;
                if (0 != E) if (e(3 <= E), 1 == U.L) 0 < A && wn(O, B, N, E + 4), j.La && Ln(O, B, N, E), 0 < x && yn(O, B, N, E + 4), j.La && Nn(O, B, N, E);else {
                  var q = U.B,
                    D = U.qa,
                    R = U.ra + 8 * C * q + 8 * A,
                    T = U.Ha,
                    U = U.Ia + 8 * C * q + 8 * A;
                  C = j.ld;
                  0 < A && (fn(O, B, N, E + 4, M, C), pn(D, R, T, U, q, E + 4, M, C)), j.La && (mn(O, B, N, E, M, C), bn(D, R, T, U, q, E, M, C)), 0 < x && (ln(O, B, N, E + 4, M, C), dn(D, R, T, U, q, E + 4, M, C)), j.La && (gn(O, B, N, E, M, C), vn(D, R, T, U, q, E, M, C));
                }
              }
              if (s.ia && alert("todo:DitherRow"), null != c.put) {
                if (L = 16 * P, P = 16 * (P + 1), I ? (c.y = s.sa, c.O = s.ta + w, c.f = s.qa, c.N = s.ra + _, c.ea = s.Ha, c.W = s.Ia + _) : (L -= y, c.y = d, c.O = p, c.f = g, c.N = l, c.ea = m, c.W = v), b || (P -= y), P > c.o && (P = c.o), c.F = null, c.J = null, null != s.Fa && 0 < s.Fa.length && L < P && (c.J = lr(s, c, L, P - L), c.F = s.mb, null == c.F && 0 == c.F.length)) {
                  u = Jt(s, 3, "Could not decode alpha data.");
                  break t;
                }
                L < c.j && (y = c.j - L, L = c.j, e(!(1 & y)), c.O += s.R * y, c.N += s.B * (y >> 1), c.W += s.B * (y >> 1), null != c.F && (c.J += c.width * y)), L < P && (c.O += c.v, c.N += c.v >> 1, c.W += c.v >> 1, null != c.F && (c.J += c.v), c.ka = L - c.j, c.U = c.va - c.v, c.T = P - L, u = c.put(c));
              }
              o + 1 != s.Ic || b || (n(s.sa, s.ta - h, d, p + 16 * s.R, h), n(s.qa, s.ra - f, g, l + 8 * s.B, f), n(s.Ha, s.Ia - f, m, v + 8 * s.B, f));
            }
            if (!u) return Jt(t, 6, "Output aborted.");
          }
          return 1;
        }(t, r)), null != r.bc && r.bc(r), s &= 1;
      }
      return s ? (t.cb = 0, s) : 0;
    }
    function te(t, e, r, n, i) {
      i = t[e + r + 32 * n] + (i >> 3), t[e + r + 32 * n] = -256 & i ? 0 > i ? 0 : 255 : i;
    }
    function ee(t, e, r, n, i, a) {
      te(t, e, 0, r, n + i), te(t, e, 1, r, n + a), te(t, e, 2, r, n - a), te(t, e, 3, r, n - i);
    }
    function re(t) {
      return (20091 * t >> 16) + t;
    }
    function ne(t, e, r, n) {
      var i,
        o = 0,
        s = a(16);
      for (i = 0; 4 > i; ++i) {
        var c = t[e + 0] + t[e + 8],
          u = t[e + 0] - t[e + 8],
          h = (35468 * t[e + 4] >> 16) - re(t[e + 12]),
          l = re(t[e + 4]) + (35468 * t[e + 12] >> 16);
        s[o + 0] = c + l, s[o + 1] = u + h, s[o + 2] = u - h, s[o + 3] = c - l, o += 4, e++;
      }
      for (i = o = 0; 4 > i; ++i) c = (t = s[o + 0] + 4) + s[o + 8], u = t - s[o + 8], h = (35468 * s[o + 4] >> 16) - re(s[o + 12]), te(r, n, 0, 0, c + (l = re(s[o + 4]) + (35468 * s[o + 12] >> 16))), te(r, n, 1, 0, u + h), te(r, n, 2, 0, u - h), te(r, n, 3, 0, c - l), o++, n += 32;
    }
    function ie(t, e, r, n) {
      var i = t[e + 0] + 4,
        a = 35468 * t[e + 4] >> 16,
        o = re(t[e + 4]),
        s = 35468 * t[e + 1] >> 16;
      ee(r, n, 0, i + o, t = re(t[e + 1]), s), ee(r, n, 1, i + a, t, s), ee(r, n, 2, i - a, t, s), ee(r, n, 3, i - o, t, s);
    }
    function ae(t, e, r, n, i) {
      ne(t, e, r, n), i && ne(t, e + 16, r, n + 4);
    }
    function oe(t, e, r, n) {
      on(t, e + 0, r, n, 1), on(t, e + 32, r, n + 128, 1);
    }
    function se(t, e, r, n) {
      var i;
      for (t = t[e + 0] + 4, i = 0; 4 > i; ++i) for (e = 0; 4 > e; ++e) te(r, n, e, i, t);
    }
    function ce(t, e, r, n) {
      t[e + 0] && un(t, e + 0, r, n), t[e + 16] && un(t, e + 16, r, n + 4), t[e + 32] && un(t, e + 32, r, n + 128), t[e + 48] && un(t, e + 48, r, n + 128 + 4);
    }
    function ue(t, e, r, n) {
      var i,
        o = a(16);
      for (i = 0; 4 > i; ++i) {
        var s = t[e + 0 + i] + t[e + 12 + i],
          c = t[e + 4 + i] + t[e + 8 + i],
          u = t[e + 4 + i] - t[e + 8 + i],
          h = t[e + 0 + i] - t[e + 12 + i];
        o[0 + i] = s + c, o[8 + i] = s - c, o[4 + i] = h + u, o[12 + i] = h - u;
      }
      for (i = 0; 4 > i; ++i) s = (t = o[0 + 4 * i] + 3) + o[3 + 4 * i], c = o[1 + 4 * i] + o[2 + 4 * i], u = o[1 + 4 * i] - o[2 + 4 * i], h = t - o[3 + 4 * i], r[n + 0] = s + c >> 3, r[n + 16] = h + u >> 3, r[n + 32] = s - c >> 3, r[n + 48] = h - u >> 3, n += 64;
    }
    function he(t, e, r) {
      var n,
        i = e - 32,
        a = Bn,
        o = 255 - t[i - 1];
      for (n = 0; n < r; ++n) {
        var s,
          c = a,
          u = o + t[e - 1];
        for (s = 0; s < r; ++s) t[e + s] = c[u + t[i + s]];
        e += 32;
      }
    }
    function le(t, e) {
      he(t, e, 4);
    }
    function fe(t, e) {
      he(t, e, 8);
    }
    function de(t, e) {
      he(t, e, 16);
    }
    function pe(t, e) {
      var r;
      for (r = 0; 16 > r; ++r) n(t, e + 32 * r, t, e - 32, 16);
    }
    function ge(t, e) {
      var r;
      for (r = 16; 0 < r; --r) i(t, e, t[e - 1], 16), e += 32;
    }
    function me(t, e, r) {
      var n;
      for (n = 0; 16 > n; ++n) i(e, r + 32 * n, t, 16);
    }
    function ve(t, e) {
      var r,
        n = 16;
      for (r = 0; 16 > r; ++r) n += t[e - 1 + 32 * r] + t[e + r - 32];
      me(n >> 5, t, e);
    }
    function be(t, e) {
      var r,
        n = 8;
      for (r = 0; 16 > r; ++r) n += t[e - 1 + 32 * r];
      me(n >> 4, t, e);
    }
    function ye(t, e) {
      var r,
        n = 8;
      for (r = 0; 16 > r; ++r) n += t[e + r - 32];
      me(n >> 4, t, e);
    }
    function we(t, e) {
      me(128, t, e);
    }
    function Ne(t, e, r) {
      return t + 2 * e + r + 2 >> 2;
    }
    function Le(t, e) {
      var r,
        i = e - 32;
      i = new Uint8Array([Ne(t[i - 1], t[i + 0], t[i + 1]), Ne(t[i + 0], t[i + 1], t[i + 2]), Ne(t[i + 1], t[i + 2], t[i + 3]), Ne(t[i + 2], t[i + 3], t[i + 4])]);
      for (r = 0; 4 > r; ++r) n(t, e + 32 * r, i, 0, i.length);
    }
    function Ae(t, e) {
      var r = t[e - 1],
        n = t[e - 1 + 32],
        i = t[e - 1 + 64],
        a = t[e - 1 + 96];
      I(t, e + 0, 16843009 * Ne(t[e - 1 - 32], r, n)), I(t, e + 32, 16843009 * Ne(r, n, i)), I(t, e + 64, 16843009 * Ne(n, i, a)), I(t, e + 96, 16843009 * Ne(i, a, a));
    }
    function xe(t, e) {
      var r,
        n = 4;
      for (r = 0; 4 > r; ++r) n += t[e + r - 32] + t[e - 1 + 32 * r];
      for (n >>= 3, r = 0; 4 > r; ++r) i(t, e + 32 * r, n, 4);
    }
    function Se(t, e) {
      var r = t[e - 1 + 0],
        n = t[e - 1 + 32],
        i = t[e - 1 + 64],
        a = t[e - 1 - 32],
        o = t[e + 0 - 32],
        s = t[e + 1 - 32],
        c = t[e + 2 - 32],
        u = t[e + 3 - 32];
      t[e + 0 + 96] = Ne(n, i, t[e - 1 + 96]), t[e + 1 + 96] = t[e + 0 + 64] = Ne(r, n, i), t[e + 2 + 96] = t[e + 1 + 64] = t[e + 0 + 32] = Ne(a, r, n), t[e + 3 + 96] = t[e + 2 + 64] = t[e + 1 + 32] = t[e + 0 + 0] = Ne(o, a, r), t[e + 3 + 64] = t[e + 2 + 32] = t[e + 1 + 0] = Ne(s, o, a), t[e + 3 + 32] = t[e + 2 + 0] = Ne(c, s, o), t[e + 3 + 0] = Ne(u, c, s);
    }
    function _e(t, e) {
      var r = t[e + 1 - 32],
        n = t[e + 2 - 32],
        i = t[e + 3 - 32],
        a = t[e + 4 - 32],
        o = t[e + 5 - 32],
        s = t[e + 6 - 32],
        c = t[e + 7 - 32];
      t[e + 0 + 0] = Ne(t[e + 0 - 32], r, n), t[e + 1 + 0] = t[e + 0 + 32] = Ne(r, n, i), t[e + 2 + 0] = t[e + 1 + 32] = t[e + 0 + 64] = Ne(n, i, a), t[e + 3 + 0] = t[e + 2 + 32] = t[e + 1 + 64] = t[e + 0 + 96] = Ne(i, a, o), t[e + 3 + 32] = t[e + 2 + 64] = t[e + 1 + 96] = Ne(a, o, s), t[e + 3 + 64] = t[e + 2 + 96] = Ne(o, s, c), t[e + 3 + 96] = Ne(s, c, c);
    }
    function Pe(t, e) {
      var r = t[e - 1 + 0],
        n = t[e - 1 + 32],
        i = t[e - 1 + 64],
        a = t[e - 1 - 32],
        o = t[e + 0 - 32],
        s = t[e + 1 - 32],
        c = t[e + 2 - 32],
        u = t[e + 3 - 32];
      t[e + 0 + 0] = t[e + 1 + 64] = a + o + 1 >> 1, t[e + 1 + 0] = t[e + 2 + 64] = o + s + 1 >> 1, t[e + 2 + 0] = t[e + 3 + 64] = s + c + 1 >> 1, t[e + 3 + 0] = c + u + 1 >> 1, t[e + 0 + 96] = Ne(i, n, r), t[e + 0 + 64] = Ne(n, r, a), t[e + 0 + 32] = t[e + 1 + 96] = Ne(r, a, o), t[e + 1 + 32] = t[e + 2 + 96] = Ne(a, o, s), t[e + 2 + 32] = t[e + 3 + 96] = Ne(o, s, c), t[e + 3 + 32] = Ne(s, c, u);
    }
    function ke(t, e) {
      var r = t[e + 0 - 32],
        n = t[e + 1 - 32],
        i = t[e + 2 - 32],
        a = t[e + 3 - 32],
        o = t[e + 4 - 32],
        s = t[e + 5 - 32],
        c = t[e + 6 - 32],
        u = t[e + 7 - 32];
      t[e + 0 + 0] = r + n + 1 >> 1, t[e + 1 + 0] = t[e + 0 + 64] = n + i + 1 >> 1, t[e + 2 + 0] = t[e + 1 + 64] = i + a + 1 >> 1, t[e + 3 + 0] = t[e + 2 + 64] = a + o + 1 >> 1, t[e + 0 + 32] = Ne(r, n, i), t[e + 1 + 32] = t[e + 0 + 96] = Ne(n, i, a), t[e + 2 + 32] = t[e + 1 + 96] = Ne(i, a, o), t[e + 3 + 32] = t[e + 2 + 96] = Ne(a, o, s), t[e + 3 + 64] = Ne(o, s, c), t[e + 3 + 96] = Ne(s, c, u);
    }
    function Ie(t, e) {
      var r = t[e - 1 + 0],
        n = t[e - 1 + 32],
        i = t[e - 1 + 64],
        a = t[e - 1 + 96];
      t[e + 0 + 0] = r + n + 1 >> 1, t[e + 2 + 0] = t[e + 0 + 32] = n + i + 1 >> 1, t[e + 2 + 32] = t[e + 0 + 64] = i + a + 1 >> 1, t[e + 1 + 0] = Ne(r, n, i), t[e + 3 + 0] = t[e + 1 + 32] = Ne(n, i, a), t[e + 3 + 32] = t[e + 1 + 64] = Ne(i, a, a), t[e + 3 + 64] = t[e + 2 + 64] = t[e + 0 + 96] = t[e + 1 + 96] = t[e + 2 + 96] = t[e + 3 + 96] = a;
    }
    function Fe(t, e) {
      var r = t[e - 1 + 0],
        n = t[e - 1 + 32],
        i = t[e - 1 + 64],
        a = t[e - 1 + 96],
        o = t[e - 1 - 32],
        s = t[e + 0 - 32],
        c = t[e + 1 - 32],
        u = t[e + 2 - 32];
      t[e + 0 + 0] = t[e + 2 + 32] = r + o + 1 >> 1, t[e + 0 + 32] = t[e + 2 + 64] = n + r + 1 >> 1, t[e + 0 + 64] = t[e + 2 + 96] = i + n + 1 >> 1, t[e + 0 + 96] = a + i + 1 >> 1, t[e + 3 + 0] = Ne(s, c, u), t[e + 2 + 0] = Ne(o, s, c), t[e + 1 + 0] = t[e + 3 + 32] = Ne(r, o, s), t[e + 1 + 32] = t[e + 3 + 64] = Ne(n, r, o), t[e + 1 + 64] = t[e + 3 + 96] = Ne(i, n, r), t[e + 1 + 96] = Ne(a, i, n);
    }
    function Ce(t, e) {
      var r;
      for (r = 0; 8 > r; ++r) n(t, e + 32 * r, t, e - 32, 8);
    }
    function je(t, e) {
      var r;
      for (r = 0; 8 > r; ++r) i(t, e, t[e - 1], 8), e += 32;
    }
    function Oe(t, e, r) {
      var n;
      for (n = 0; 8 > n; ++n) i(e, r + 32 * n, t, 8);
    }
    function Be(t, e) {
      var r,
        n = 8;
      for (r = 0; 8 > r; ++r) n += t[e + r - 32] + t[e - 1 + 32 * r];
      Oe(n >> 4, t, e);
    }
    function Me(t, e) {
      var r,
        n = 4;
      for (r = 0; 8 > r; ++r) n += t[e + r - 32];
      Oe(n >> 3, t, e);
    }
    function Ee(t, e) {
      var r,
        n = 4;
      for (r = 0; 8 > r; ++r) n += t[e - 1 + 32 * r];
      Oe(n >> 3, t, e);
    }
    function qe(t, e) {
      Oe(128, t, e);
    }
    function De(t, e, r) {
      var n = t[e - r],
        i = t[e + 0],
        a = 3 * (i - n) + jn[1020 + t[e - 2 * r] - t[e + r]],
        o = On[112 + (a + 4 >> 3)];
      t[e - r] = Bn[255 + n + On[112 + (a + 3 >> 3)]], t[e + 0] = Bn[255 + i - o];
    }
    function Re(t, e, r, n) {
      var i = t[e + 0],
        a = t[e + r];
      return Mn[255 + t[e - 2 * r] - t[e - r]] > n || Mn[255 + a - i] > n;
    }
    function Te(t, e, r, n) {
      return 4 * Mn[255 + t[e - r] - t[e + 0]] + Mn[255 + t[e - 2 * r] - t[e + r]] <= n;
    }
    function Ue(t, e, r, n, i) {
      var a = t[e - 3 * r],
        o = t[e - 2 * r],
        s = t[e - r],
        c = t[e + 0],
        u = t[e + r],
        h = t[e + 2 * r],
        l = t[e + 3 * r];
      return 4 * Mn[255 + s - c] + Mn[255 + o - u] > n ? 0 : Mn[255 + t[e - 4 * r] - a] <= i && Mn[255 + a - o] <= i && Mn[255 + o - s] <= i && Mn[255 + l - h] <= i && Mn[255 + h - u] <= i && Mn[255 + u - c] <= i;
    }
    function ze(t, e, r, n) {
      var i = 2 * n + 1;
      for (n = 0; 16 > n; ++n) Te(t, e + n, r, i) && De(t, e + n, r);
    }
    function He(t, e, r, n) {
      var i = 2 * n + 1;
      for (n = 0; 16 > n; ++n) Te(t, e + n * r, 1, i) && De(t, e + n * r, 1);
    }
    function We(t, e, r, n) {
      var i;
      for (i = 3; 0 < i; --i) ze(t, e += 4 * r, r, n);
    }
    function Ve(t, e, r, n) {
      var i;
      for (i = 3; 0 < i; --i) He(t, e += 4, r, n);
    }
    function Ge(t, e, r, n, i, a, o, s) {
      for (a = 2 * a + 1; 0 < i--;) {
        if (Ue(t, e, r, a, o)) if (Re(t, e, r, s)) De(t, e, r);else {
          var c = t,
            u = e,
            h = r,
            l = c[u - 2 * h],
            f = c[u - h],
            d = c[u + 0],
            p = c[u + h],
            g = c[u + 2 * h],
            m = 27 * (b = jn[1020 + 3 * (d - f) + jn[1020 + l - p]]) + 63 >> 7,
            v = 18 * b + 63 >> 7,
            b = 9 * b + 63 >> 7;
          c[u - 3 * h] = Bn[255 + c[u - 3 * h] + b], c[u - 2 * h] = Bn[255 + l + v], c[u - h] = Bn[255 + f + m], c[u + 0] = Bn[255 + d - m], c[u + h] = Bn[255 + p - v], c[u + 2 * h] = Bn[255 + g - b];
        }
        e += n;
      }
    }
    function Ye(t, e, r, n, i, a, o, s) {
      for (a = 2 * a + 1; 0 < i--;) {
        if (Ue(t, e, r, a, o)) if (Re(t, e, r, s)) De(t, e, r);else {
          var c = t,
            u = e,
            h = r,
            l = c[u - h],
            f = c[u + 0],
            d = c[u + h],
            p = On[112 + ((g = 3 * (f - l)) + 4 >> 3)],
            g = On[112 + (g + 3 >> 3)],
            m = p + 1 >> 1;
          c[u - 2 * h] = Bn[255 + c[u - 2 * h] + m], c[u - h] = Bn[255 + l + g], c[u + 0] = Bn[255 + f - p], c[u + h] = Bn[255 + d - m];
        }
        e += n;
      }
    }
    function Je(t, e, r, n, i, a) {
      Ge(t, e, r, 1, 16, n, i, a);
    }
    function Xe(t, e, r, n, i, a) {
      Ge(t, e, 1, r, 16, n, i, a);
    }
    function Ke(t, e, r, n, i, a) {
      var o;
      for (o = 3; 0 < o; --o) Ye(t, e += 4 * r, r, 1, 16, n, i, a);
    }
    function Ze(t, e, r, n, i, a) {
      var o;
      for (o = 3; 0 < o; --o) Ye(t, e += 4, 1, r, 16, n, i, a);
    }
    function $e(t, e, r, n, i, a, o, s) {
      Ge(t, e, i, 1, 8, a, o, s), Ge(r, n, i, 1, 8, a, o, s);
    }
    function Qe(t, e, r, n, i, a, o, s) {
      Ge(t, e, 1, i, 8, a, o, s), Ge(r, n, 1, i, 8, a, o, s);
    }
    function tr(t, e, r, n, i, a, o, s) {
      Ye(t, e + 4 * i, i, 1, 8, a, o, s), Ye(r, n + 4 * i, i, 1, 8, a, o, s);
    }
    function er(t, e, r, n, i, a, o, s) {
      Ye(t, e + 4, 1, i, 8, a, o, s), Ye(r, n + 4, 1, i, 8, a, o, s);
    }
    function rr() {
      this.ba = new ot(), this.ec = [], this.cc = [], this.Mc = [], this.Dc = this.Nc = this.dc = this.fc = 0, this.Oa = new ct(), this.memory = 0, this.Ib = "OutputFunc", this.Jb = "OutputAlphaFunc", this.Nd = "OutputRowFunc";
    }
    function nr() {
      this.data = [], this.offset = this.kd = this.ha = this.w = 0, this.na = [], this.xa = this.gb = this.Ja = this.Sa = this.P = 0;
    }
    function ir() {
      this.nc = this.Ea = this.b = this.hc = 0, this.K = [], this.w = 0;
    }
    function ar() {
      this.ua = 0, this.Wa = new M(), this.vb = new M(), this.md = this.xc = this.wc = 0, this.vc = [], this.Wb = 0, this.Ya = new d(), this.yc = new l();
    }
    function or() {
      this.xb = this.a = 0, this.l = new Gt(), this.ca = new ot(), this.V = [], this.Ba = 0, this.Ta = [], this.Ua = 0, this.m = new N(), this.Pb = 0, this.wd = new N(), this.Ma = this.$ = this.C = this.i = this.c = this.xd = 0, this.s = new ar(), this.ab = 0, this.gc = o(4, ir), this.Oc = 0;
    }
    function sr() {
      this.Lc = this.Z = this.$a = this.i = this.c = 0, this.l = new Gt(), this.ic = 0, this.ca = [], this.tb = 0, this.qd = null, this.rd = 0;
    }
    function cr(t, e, r, n, i, a, o) {
      for (t = null == t ? 0 : t[e + 0], e = 0; e < o; ++e) i[a + e] = t + r[n + e] & 255, t = i[a + e];
    }
    function ur(t, e, r, n, i, a, o) {
      var s;
      if (null == t) cr(null, null, r, n, i, a, o);else for (s = 0; s < o; ++s) i[a + s] = t[e + s] + r[n + s] & 255;
    }
    function hr(t, e, r, n, i, a, o) {
      if (null == t) cr(null, null, r, n, i, a, o);else {
        var s,
          c = t[e + 0],
          u = c,
          h = c;
        for (s = 0; s < o; ++s) u = h + (c = t[e + s]) - u, h = r[n + s] + (-256 & u ? 0 > u ? 0 : 255 : u) & 255, u = c, i[a + s] = h;
      }
    }
    function lr(t, r, i, o) {
      var s = r.width,
        c = r.o;
      if (e(null != t && null != r), 0 > i || 0 >= o || i + o > c) return null;
      if (!t.Cc) {
        if (null == t.ga) {
          var u;
          if (t.ga = new sr(), (u = null == t.ga) || (u = r.width * r.o, e(0 == t.Gb.length), t.Gb = a(u), t.Uc = 0, null == t.Gb ? u = 0 : (t.mb = t.Gb, t.nb = t.Uc, t.rc = null, u = 1), u = !u), !u) {
            u = t.ga;
            var h = t.Fa,
              l = t.P,
              f = t.qc,
              d = t.mb,
              p = t.nb,
              g = l + 1,
              m = f - 1,
              b = u.l;
            if (e(null != h && null != d && null != r), mi[0] = null, mi[1] = cr, mi[2] = ur, mi[3] = hr, u.ca = d, u.tb = p, u.c = r.width, u.i = r.height, e(0 < u.c && 0 < u.i), 1 >= f) r = 0;else if (u.$a = h[l + 0] >> 0 & 3, u.Z = h[l + 0] >> 2 & 3, u.Lc = h[l + 0] >> 4 & 3, l = h[l + 0] >> 6 & 3, 0 > u.$a || 1 < u.$a || 4 <= u.Z || 1 < u.Lc || l) r = 0;else if (b.put = dt, b.ac = ft, b.bc = pt, b.ma = u, b.width = r.width, b.height = r.height, b.Da = r.Da, b.v = r.v, b.va = r.va, b.j = r.j, b.o = r.o, u.$a) t: {
              e(1 == u.$a), r = kt();
              e: for (;;) {
                if (null == r) {
                  r = 0;
                  break t;
                }
                if (e(null != u), u.mc = r, r.c = u.c, r.i = u.i, r.l = u.l, r.l.ma = u, r.l.width = u.c, r.l.height = u.i, r.a = 0, v(r.m, h, g, m), !It(u.c, u.i, 1, r, null)) break e;
                if (1 == r.ab && 3 == r.gc[0].hc && At(r.s) ? (u.ic = 1, h = r.c * r.i, r.Ta = null, r.Ua = 0, r.V = a(h), r.Ba = 0, null == r.V ? (r.a = 1, r = 0) : r = 1) : (u.ic = 0, r = Ft(r, u.c)), !r) break e;
                r = 1;
                break t;
              }
              u.mc = null, r = 0;
            } else r = m >= u.c * u.i;
            u = !r;
          }
          if (u) return null;
          1 != t.ga.Lc ? t.Ga = 0 : o = c - i;
        }
        e(null != t.ga), e(i + o <= c);
        t: {
          if (r = (h = t.ga).c, c = h.l.o, 0 == h.$a) {
            if (g = t.rc, m = t.Vc, b = t.Fa, l = t.P + 1 + i * r, f = t.mb, d = t.nb + i * r, e(l <= t.P + t.qc), 0 != h.Z) for (e(null != mi[h.Z]), u = 0; u < o; ++u) mi[h.Z](g, m, b, l, f, d, r), g = f, m = d, d += r, l += r;else for (u = 0; u < o; ++u) n(f, d, b, l, r), g = f, m = d, d += r, l += r;
            t.rc = g, t.Vc = m;
          } else {
            if (e(null != h.mc), r = i + o, e(null != (u = h.mc)), e(r <= u.i), u.C >= r) r = 1;else if (h.ic || mr(), h.ic) {
              h = u.V, g = u.Ba, m = u.c;
              var y = u.i,
                w = (b = 1, l = u.$ / m, f = u.$ % m, d = u.m, p = u.s, u.$),
                N = m * y,
                L = m * r,
                x = p.wc,
                _ = w < L ? wt(p, f, l) : null;
              e(w <= N), e(r <= y), e(At(p));
              e: for (;;) {
                for (; !d.h && w < L;) {
                  if (f & x || (_ = wt(p, f, l)), e(null != _), S(d), 256 > (y = bt(_.G[0], _.H[0], d))) h[g + w] = y, ++w, ++f >= m && (f = 0, ++l <= r && !(l % 16) && St(u, l));else {
                    if (!(280 > y)) {
                      b = 0;
                      break e;
                    }
                    y = mt(y - 256, d);
                    var P,
                      k = bt(_.G[4], _.H[4], d);
                    if (S(d), !(w >= (k = vt(m, k = mt(k, d))) && N - w >= y)) {
                      b = 0;
                      break e;
                    }
                    for (P = 0; P < y; ++P) h[g + w + P] = h[g + w + P - k];
                    for (w += y, f += y; f >= m;) f -= m, ++l <= r && !(l % 16) && St(u, l);
                    w < L && f & x && (_ = wt(p, f, l));
                  }
                  e(d.h == A(d));
                }
                St(u, l > r ? r : l);
                break e;
              }
              !b || d.h && w < N ? (b = 0, u.a = d.h ? 5 : 3) : u.$ = w, r = b;
            } else r = _t(u, u.V, u.Ba, u.c, u.i, r, Ct);
            if (!r) {
              o = 0;
              break t;
            }
          }
          i + o >= c && (t.Cc = 1), o = 1;
        }
        if (!o) return null;
        if (t.Cc && (null != (o = t.ga) && (o.mc = null), t.ga = null, 0 < t.Ga)) return alert("todo:WebPDequantizeLevels"), null;
      }
      return t.nb + i * s;
    }
    function fr(t, e, r, n, i, a) {
      for (; 0 < i--;) {
        var o,
          s = t,
          c = e + (r ? 1 : 0),
          u = t,
          h = e + (r ? 0 : 3);
        for (o = 0; o < n; ++o) {
          var l = u[h + 4 * o];
          255 != l && (l *= 32897, s[c + 4 * o + 0] = s[c + 4 * o + 0] * l >> 23, s[c + 4 * o + 1] = s[c + 4 * o + 1] * l >> 23, s[c + 4 * o + 2] = s[c + 4 * o + 2] * l >> 23);
        }
        e += a;
      }
    }
    function dr(t, e, r, n, i) {
      for (; 0 < n--;) {
        var a;
        for (a = 0; a < r; ++a) {
          var o = t[e + 2 * a + 0],
            s = 15 & (u = t[e + 2 * a + 1]),
            c = 4369 * s,
            u = (240 & u | u >> 4) * c >> 16;
          t[e + 2 * a + 0] = (240 & o | o >> 4) * c >> 16 & 240 | (15 & o | o << 4) * c >> 16 >> 4 & 15, t[e + 2 * a + 1] = 240 & u | s;
        }
        e += i;
      }
    }
    function pr(t, e, r, n, i, a, o, s) {
      var c,
        u,
        h = 255;
      for (u = 0; u < i; ++u) {
        for (c = 0; c < n; ++c) {
          var l = t[e + c];
          a[o + 4 * c] = l, h &= l;
        }
        e += r, o += s;
      }
      return 255 != h;
    }
    function gr(t, e, r, n, i) {
      var a;
      for (a = 0; a < i; ++a) r[n + a] = t[e + a] >> 8;
    }
    function mr() {
      An = fr, xn = dr, Sn = pr, _n = gr;
    }
    function vr(r, n, i) {
      t[r] = function (t, r, a, o, s, c, u, h, l, f, d, p, g, m, v, b, y) {
        var w,
          N = y - 1 >> 1,
          L = s[c + 0] | u[h + 0] << 16,
          A = l[f + 0] | d[p + 0] << 16;
        e(null != t);
        var x = 3 * L + A + 131074 >> 2;
        for (n(t[r + 0], 255 & x, x >> 16, g, m), null != a && (x = 3 * A + L + 131074 >> 2, n(a[o + 0], 255 & x, x >> 16, v, b)), w = 1; w <= N; ++w) {
          var S = s[c + w] | u[h + w] << 16,
            _ = l[f + w] | d[p + w] << 16,
            P = L + S + A + _ + 524296,
            k = P + 2 * (S + A) >> 3;
          x = k + L >> 1, L = (P = P + 2 * (L + _) >> 3) + S >> 1, n(t[r + 2 * w - 1], 255 & x, x >> 16, g, m + (2 * w - 1) * i), n(t[r + 2 * w - 0], 255 & L, L >> 16, g, m + (2 * w - 0) * i), null != a && (x = P + A >> 1, L = k + _ >> 1, n(a[o + 2 * w - 1], 255 & x, x >> 16, v, b + (2 * w - 1) * i), n(a[o + 2 * w + 0], 255 & L, L >> 16, v, b + (2 * w + 0) * i)), L = S, A = _;
        }
        1 & y || (x = 3 * L + A + 131074 >> 2, n(t[r + y - 1], 255 & x, x >> 16, g, m + (y - 1) * i), null != a && (x = 3 * A + L + 131074 >> 2, n(a[o + y - 1], 255 & x, x >> 16, v, b + (y - 1) * i)));
      };
    }
    function br() {
      vi[En] = bi, vi[qn] = wi, vi[Dn] = yi, vi[Rn] = Ni, vi[Tn] = Li, vi[Un] = Ai, vi[zn] = xi, vi[Hn] = wi, vi[Wn] = Ni, vi[Vn] = Li, vi[Gn] = Ai;
    }
    function yr(t) {
      return t & ~Fi ? 0 > t ? 0 : 255 : t >> Ii;
    }
    function wr(t, e) {
      return yr((19077 * t >> 8) + (26149 * e >> 8) - 14234);
    }
    function Nr(t, e, r) {
      return yr((19077 * t >> 8) - (6419 * e >> 8) - (13320 * r >> 8) + 8708);
    }
    function Lr(t, e) {
      return yr((19077 * t >> 8) + (33050 * e >> 8) - 17685);
    }
    function Ar(t, e, r, n, i) {
      n[i + 0] = wr(t, r), n[i + 1] = Nr(t, e, r), n[i + 2] = Lr(t, e);
    }
    function xr(t, e, r, n, i) {
      n[i + 0] = Lr(t, e), n[i + 1] = Nr(t, e, r), n[i + 2] = wr(t, r);
    }
    function Sr(t, e, r, n, i) {
      var a = Nr(t, e, r);
      e = a << 3 & 224 | Lr(t, e) >> 3, n[i + 0] = 248 & wr(t, r) | a >> 5, n[i + 1] = e;
    }
    function _r(t, e, r, n, i) {
      var a = 240 & Lr(t, e) | 15;
      n[i + 0] = 240 & wr(t, r) | Nr(t, e, r) >> 4, n[i + 1] = a;
    }
    function Pr(t, e, r, n, i) {
      n[i + 0] = 255, Ar(t, e, r, n, i + 1);
    }
    function kr(t, e, r, n, i) {
      xr(t, e, r, n, i), n[i + 3] = 255;
    }
    function Ir(t, e, r, n, i) {
      Ar(t, e, r, n, i), n[i + 3] = 255;
    }
    function Vt(t, e) {
      return 0 > t ? 0 : t > e ? e : t;
    }
    function Fr(e, r, n) {
      t[e] = function (t, e, i, a, o, s, c, u, h) {
        for (var l = u + (-2 & h) * n; u != l;) r(t[e + 0], i[a + 0], o[s + 0], c, u), r(t[e + 1], i[a + 0], o[s + 0], c, u + n), e += 2, ++a, ++s, u += 2 * n;
        1 & h && r(t[e + 0], i[a + 0], o[s + 0], c, u);
      };
    }
    function Cr(t, e, r) {
      return 0 == r ? 0 == t ? 0 == e ? 6 : 5 : 0 == e ? 4 : 0 : r;
    }
    function jr(t, e, r, n, i) {
      switch (t >>> 30) {
        case 3:
          on(e, r, n, i, 0);
          break;
        case 2:
          sn(e, r, n, i);
          break;
        case 1:
          un(e, r, n, i);
      }
    }
    function Or(t, e) {
      var r,
        a,
        o = e.M,
        s = e.Nb,
        c = t.oc,
        u = t.pc + 40,
        h = t.oc,
        l = t.pc + 584,
        f = t.oc,
        d = t.pc + 600;
      for (r = 0; 16 > r; ++r) c[u + 32 * r - 1] = 129;
      for (r = 0; 8 > r; ++r) h[l + 32 * r - 1] = 129, f[d + 32 * r - 1] = 129;
      for (0 < o ? c[u - 1 - 32] = h[l - 1 - 32] = f[d - 1 - 32] = 129 : (i(c, u - 32 - 1, 127, 21), i(h, l - 32 - 1, 127, 9), i(f, d - 32 - 1, 127, 9)), a = 0; a < t.za; ++a) {
        var p = e.ya[e.aa + a];
        if (0 < a) {
          for (r = -1; 16 > r; ++r) n(c, u + 32 * r - 4, c, u + 32 * r + 12, 4);
          for (r = -1; 8 > r; ++r) n(h, l + 32 * r - 4, h, l + 32 * r + 4, 4), n(f, d + 32 * r - 4, f, d + 32 * r + 4, 4);
        }
        var g = t.Gd,
          m = t.Hd + a,
          v = p.ad,
          b = p.Hc;
        if (0 < o && (n(c, u - 32, g[m].y, 0, 16), n(h, l - 32, g[m].f, 0, 8), n(f, d - 32, g[m].ea, 0, 8)), p.Za) {
          var y = c,
            w = u - 32 + 16;
          for (0 < o && (a >= t.za - 1 ? i(y, w, g[m].y[15], 4) : n(y, w, g[m + 1].y, 0, 4)), r = 0; 4 > r; r++) y[w + 128 + r] = y[w + 256 + r] = y[w + 384 + r] = y[w + 0 + r];
          for (r = 0; 16 > r; ++r, b <<= 2) y = c, w = u + Di[r], fi[p.Ob[r]](y, w), jr(b, v, 16 * +r, y, w);
        } else if (y = Cr(a, o, p.Ob[0]), li[y](c, u), 0 != b) for (r = 0; 16 > r; ++r, b <<= 2) jr(b, v, 16 * +r, c, u + Di[r]);
        for (r = p.Gc, y = Cr(a, o, p.Dd), di[y](h, l), di[y](f, d), b = v, y = h, w = l, 255 & (p = r >> 0) && (170 & p ? cn(b, 256, y, w) : hn(b, 256, y, w)), p = f, b = d, 255 & (r >>= 8) && (170 & r ? cn(v, 320, p, b) : hn(v, 320, p, b)), o < t.Ub - 1 && (n(g[m].y, 0, c, u + 480, 16), n(g[m].f, 0, h, l + 224, 8), n(g[m].ea, 0, f, d + 224, 8)), r = 8 * s * t.B, g = t.sa, m = t.ta + 16 * a + 16 * s * t.R, v = t.qa, p = t.ra + 8 * a + r, b = t.Ha, y = t.Ia + 8 * a + r, r = 0; 16 > r; ++r) n(g, m + r * t.R, c, u + 32 * r, 16);
        for (r = 0; 8 > r; ++r) n(v, p + r * t.B, h, l + 32 * r, 8), n(b, y + r * t.B, f, d + 32 * r, 8);
      }
    }
    function Br(t, n, i, a, o, s, c, u, h) {
      var l = [0],
        f = [0],
        d = 0,
        p = null != h ? h.kd : 0,
        g = null != h ? h : new nr();
      if (null == t || 12 > i) return 7;
      g.data = t, g.w = n, g.ha = i, n = [n], i = [i], g.gb = [g.gb];
      t: {
        var m = n,
          b = i,
          y = g.gb;
        if (e(null != t), e(null != b), e(null != y), y[0] = 0, 12 <= b[0] && !r(t, m[0], "RIFF")) {
          if (r(t, m[0] + 8, "WEBP")) {
            y = 3;
            break t;
          }
          var w = j(t, m[0] + 4);
          if (12 > w || 4294967286 < w) {
            y = 3;
            break t;
          }
          if (p && w > b[0] - 8) {
            y = 7;
            break t;
          }
          y[0] = w, m[0] += 12, b[0] -= 12;
        }
        y = 0;
      }
      if (0 != y) return y;
      for (w = 0 < g.gb[0], i = i[0];;) {
        t: {
          var L = t;
          b = n, y = i;
          var A = l,
            x = f,
            S = m = [0];
          if ((k = d = [d])[0] = 0, 8 > y[0]) y = 7;else {
            if (!r(L, b[0], "VP8X")) {
              if (10 != j(L, b[0] + 4)) {
                y = 3;
                break t;
              }
              if (18 > y[0]) {
                y = 7;
                break t;
              }
              var _ = j(L, b[0] + 8),
                P = 1 + C(L, b[0] + 12);
              if (2147483648 <= P * (L = 1 + C(L, b[0] + 15))) {
                y = 3;
                break t;
              }
              null != S && (S[0] = _), null != A && (A[0] = P), null != x && (x[0] = L), b[0] += 18, y[0] -= 18, k[0] = 1;
            }
            y = 0;
          }
        }
        if (d = d[0], m = m[0], 0 != y) return y;
        if (b = !!(2 & m), !w && d) return 3;
        if (null != s && (s[0] = !!(16 & m)), null != c && (c[0] = b), null != u && (u[0] = 0), c = l[0], m = f[0], d && b && null == h) {
          y = 0;
          break;
        }
        if (4 > i) {
          y = 7;
          break;
        }
        if (w && d || !w && !d && !r(t, n[0], "ALPH")) {
          i = [i], g.na = [g.na], g.P = [g.P], g.Sa = [g.Sa];
          t: {
            _ = t, y = n, w = i;
            var k = g.gb;
            A = g.na, x = g.P, S = g.Sa;
            P = 22, e(null != _), e(null != w), L = y[0];
            var I = w[0];
            for (e(null != A), e(null != S), A[0] = null, x[0] = null, S[0] = 0;;) {
              if (y[0] = L, w[0] = I, 8 > I) {
                y = 7;
                break t;
              }
              var F = j(_, L + 4);
              if (4294967286 < F) {
                y = 3;
                break t;
              }
              var O = 8 + F + 1 & -2;
              if (P += O, 0 < k && P > k) {
                y = 3;
                break t;
              }
              if (!r(_, L, "VP8 ") || !r(_, L, "VP8L")) {
                y = 0;
                break t;
              }
              if (I[0] < O) {
                y = 7;
                break t;
              }
              r(_, L, "ALPH") || (A[0] = _, x[0] = L + 8, S[0] = F), L += O, I -= O;
            }
          }
          if (i = i[0], g.na = g.na[0], g.P = g.P[0], g.Sa = g.Sa[0], 0 != y) break;
        }
        i = [i], g.Ja = [g.Ja], g.xa = [g.xa];
        t: if (k = t, y = n, w = i, A = g.gb[0], x = g.Ja, S = g.xa, _ = y[0], L = !r(k, _, "VP8 "), P = !r(k, _, "VP8L"), e(null != k), e(null != w), e(null != x), e(null != S), 8 > w[0]) y = 7;else {
          if (L || P) {
            if (k = j(k, _ + 4), 12 <= A && k > A - 12) {
              y = 3;
              break t;
            }
            if (p && k > w[0] - 8) {
              y = 7;
              break t;
            }
            x[0] = k, y[0] += 8, w[0] -= 8, S[0] = P;
          } else S[0] = 5 <= w[0] && 47 == k[_ + 0] && !(k[_ + 4] >> 5), x[0] = w[0];
          y = 0;
        }
        if (i = i[0], g.Ja = g.Ja[0], g.xa = g.xa[0], n = n[0], 0 != y) break;
        if (4294967286 < g.Ja) return 3;
        if (null == u || b || (u[0] = g.xa ? 2 : 1), c = [c], m = [m], g.xa) {
          if (5 > i) {
            y = 7;
            break;
          }
          u = c, p = m, b = s, null == t || 5 > i ? t = 0 : 5 <= i && 47 == t[n + 0] && !(t[n + 4] >> 5) ? (w = [0], k = [0], A = [0], v(x = new N(), t, n, i), gt(x, w, k, A) ? (null != u && (u[0] = w[0]), null != p && (p[0] = k[0]), null != b && (b[0] = A[0]), t = 1) : t = 0) : t = 0;
        } else {
          if (10 > i) {
            y = 7;
            break;
          }
          u = m, null == t || 10 > i || !Xt(t, n + 3, i - 3) ? t = 0 : (p = t[n + 0] | t[n + 1] << 8 | t[n + 2] << 16, b = 16383 & (t[n + 7] << 8 | t[n + 6]), t = 16383 & (t[n + 9] << 8 | t[n + 8]), 1 & p || 3 < (p >> 1 & 7) || !(p >> 4 & 1) || p >> 5 >= g.Ja || !b || !t ? t = 0 : (c && (c[0] = b), u && (u[0] = t), t = 1));
        }
        if (!t) return 3;
        if (c = c[0], m = m[0], d && (l[0] != c || f[0] != m)) return 3;
        null != h && (h[0] = g, h.offset = n - h.w, e(4294967286 > n - h.w), e(h.offset == h.ha - i));
        break;
      }
      return 0 == y || 7 == y && d && null == h ? (null != s && (s[0] |= null != g.na && 0 < g.na.length), null != a && (a[0] = c), null != o && (o[0] = m), 0) : y;
    }
    function Mr(t, e, r) {
      var n = e.width,
        i = e.height,
        a = 0,
        o = 0,
        s = n,
        c = i;
      if (e.Da = null != t && 0 < t.Da, e.Da && (s = t.cd, c = t.bd, a = t.v, o = t.j, 11 > r || (a &= -2, o &= -2), 0 > a || 0 > o || 0 >= s || 0 >= c || a + s > n || o + c > i)) return 0;
      if (e.v = a, e.j = o, e.va = a + s, e.o = o + c, e.U = s, e.T = c, e.da = null != t && 0 < t.da, e.da) {
        if (!E(s, c, r = [t.ib], a = [t.hb])) return 0;
        e.ib = r[0], e.hb = a[0];
      }
      return e.ob = null != t && t.ob, e.Kb = null == t || !t.Sd, e.da && (e.ob = e.ib < 3 * n / 4 && e.hb < 3 * i / 4, e.Kb = 0), 1;
    }
    function Er(t) {
      if (null == t) return 2;
      if (11 > t.S) {
        var e = t.f.RGBA;
        e.fb += (t.height - 1) * e.A, e.A = -e.A;
      } else e = t.f.kb, t = t.height, e.O += (t - 1) * e.fa, e.fa = -e.fa, e.N += (t - 1 >> 1) * e.Ab, e.Ab = -e.Ab, e.W += (t - 1 >> 1) * e.Db, e.Db = -e.Db, null != e.F && (e.J += (t - 1) * e.lb, e.lb = -e.lb);
      return 0;
    }
    function qr(t, e, r, n) {
      if (null == n || 0 >= t || 0 >= e) return 2;
      if (null != r) {
        if (r.Da) {
          var i = r.cd,
            o = r.bd,
            s = -2 & r.v,
            c = -2 & r.j;
          if (0 > s || 0 > c || 0 >= i || 0 >= o || s + i > t || c + o > e) return 2;
          t = i, e = o;
        }
        if (r.da) {
          if (!E(t, e, i = [r.ib], o = [r.hb])) return 2;
          t = i[0], e = o[0];
        }
      }
      n.width = t, n.height = e;
      t: {
        var u = n.width,
          h = n.height;
        if (t = n.S, 0 >= u || 0 >= h || !(t >= En && 13 > t)) t = 2;else {
          if (0 >= n.Rd && null == n.sd) {
            s = o = i = e = 0;
            var l = (c = u * zi[t]) * h;
            if (11 > t || (o = (h + 1) / 2 * (e = (u + 1) / 2), 12 == t && (s = (i = u) * h)), null == (h = a(l + 2 * o + s))) {
              t = 1;
              break t;
            }
            n.sd = h, 11 > t ? ((u = n.f.RGBA).eb = h, u.fb = 0, u.A = c, u.size = l) : ((u = n.f.kb).y = h, u.O = 0, u.fa = c, u.Fd = l, u.f = h, u.N = 0 + l, u.Ab = e, u.Cd = o, u.ea = h, u.W = 0 + l + o, u.Db = e, u.Ed = o, 12 == t && (u.F = h, u.J = 0 + l + 2 * o), u.Tc = s, u.lb = i);
          }
          if (e = 1, i = n.S, o = n.width, s = n.height, i >= En && 13 > i) {
            if (11 > i) t = n.f.RGBA, e &= (c = Math.abs(t.A)) * (s - 1) + o <= t.size, e &= c >= o * zi[i], e &= null != t.eb;else {
              t = n.f.kb, c = (o + 1) / 2, l = (s + 1) / 2, u = Math.abs(t.fa);
              h = Math.abs(t.Ab);
              var f = Math.abs(t.Db),
                d = Math.abs(t.lb),
                p = d * (s - 1) + o;
              e &= u * (s - 1) + o <= t.Fd, e &= h * (l - 1) + c <= t.Cd, e = (e &= f * (l - 1) + c <= t.Ed) & u >= o & h >= c & f >= c, e &= null != t.y, e &= null != t.f, e &= null != t.ea, 12 == i && (e &= d >= o, e &= p <= t.Tc, e &= null != t.F);
            }
          } else e = 0;
          t = e ? 0 : 2;
        }
      }
      return 0 != t || null != r && r.fd && (t = Er(n)), t;
    }
    var Dr = 64,
      Rr = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215],
      Tr = 24,
      Ur = 32,
      zr = 8,
      Hr = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];
    R("Predictor0", "PredictorAdd0"), t.Predictor0 = function () {
      return 4278190080;
    }, t.Predictor1 = function (t) {
      return t;
    }, t.Predictor2 = function (t, e, r) {
      return e[r + 0];
    }, t.Predictor3 = function (t, e, r) {
      return e[r + 1];
    }, t.Predictor4 = function (t, e, r) {
      return e[r - 1];
    }, t.Predictor5 = function (t, e, r) {
      return U(U(t, e[r + 1]), e[r + 0]);
    }, t.Predictor6 = function (t, e, r) {
      return U(t, e[r - 1]);
    }, t.Predictor7 = function (t, e, r) {
      return U(t, e[r + 0]);
    }, t.Predictor8 = function (t, e, r) {
      return U(e[r - 1], e[r + 0]);
    }, t.Predictor9 = function (t, e, r) {
      return U(e[r + 0], e[r + 1]);
    }, t.Predictor10 = function (t, e, r) {
      return U(U(t, e[r - 1]), U(e[r + 0], e[r + 1]));
    }, t.Predictor11 = function (t, e, r) {
      var n = e[r + 0];
      return 0 >= W(n >> 24 & 255, t >> 24 & 255, (e = e[r - 1]) >> 24 & 255) + W(n >> 16 & 255, t >> 16 & 255, e >> 16 & 255) + W(n >> 8 & 255, t >> 8 & 255, e >> 8 & 255) + W(255 & n, 255 & t, 255 & e) ? n : t;
    }, t.Predictor12 = function (t, e, r) {
      var n = e[r + 0];
      return (z((t >> 24 & 255) + (n >> 24 & 255) - ((e = e[r - 1]) >> 24 & 255)) << 24 | z((t >> 16 & 255) + (n >> 16 & 255) - (e >> 16 & 255)) << 16 | z((t >> 8 & 255) + (n >> 8 & 255) - (e >> 8 & 255)) << 8 | z((255 & t) + (255 & n) - (255 & e))) >>> 0;
    }, t.Predictor13 = function (t, e, r) {
      var n = e[r - 1];
      return (H((t = U(t, e[r + 0])) >> 24 & 255, n >> 24 & 255) << 24 | H(t >> 16 & 255, n >> 16 & 255) << 16 | H(t >> 8 & 255, n >> 8 & 255) << 8 | H(t >> 0 & 255, n >> 0 & 255)) >>> 0;
    };
    var Wr = t.PredictorAdd0;
    t.PredictorAdd1 = V, R("Predictor2", "PredictorAdd2"), R("Predictor3", "PredictorAdd3"), R("Predictor4", "PredictorAdd4"), R("Predictor5", "PredictorAdd5"), R("Predictor6", "PredictorAdd6"), R("Predictor7", "PredictorAdd7"), R("Predictor8", "PredictorAdd8"), R("Predictor9", "PredictorAdd9"), R("Predictor10", "PredictorAdd10"), R("Predictor11", "PredictorAdd11"), R("Predictor12", "PredictorAdd12"), R("Predictor13", "PredictorAdd13");
    var Vr = t.PredictorAdd2;
    X("ColorIndexInverseTransform", "MapARGB", "32b", function (t) {
      return t >> 8 & 255;
    }, function (t) {
      return t;
    }), X("VP8LColorIndexInverseTransformAlpha", "MapAlpha", "8b", function (t) {
      return t;
    }, function (t) {
      return t >> 8 & 255;
    });
    var Gr,
      Yr = t.ColorIndexInverseTransform,
      Jr = t.MapARGB,
      Xr = t.VP8LColorIndexInverseTransformAlpha,
      Kr = t.MapAlpha,
      Zr = t.VP8LPredictorsAdd = [];
    Zr.length = 16, (t.VP8LPredictors = []).length = 16, (t.VP8LPredictorsAdd_C = []).length = 16, (t.VP8LPredictors_C = []).length = 16;
    var $r,
      Qr,
      tn,
      en,
      rn,
      nn,
      an,
      on,
      sn,
      cn,
      un,
      hn,
      ln,
      fn,
      dn,
      pn,
      gn,
      mn,
      vn,
      bn,
      yn,
      wn,
      Nn,
      Ln,
      An,
      xn,
      Sn,
      _n,
      Pn = a(511),
      kn = a(2041),
      In = a(225),
      Fn = a(767),
      Cn = 0,
      jn = kn,
      On = In,
      Bn = Fn,
      Mn = Pn,
      En = 0,
      qn = 1,
      Dn = 2,
      Rn = 3,
      Tn = 4,
      Un = 5,
      zn = 6,
      Hn = 7,
      Wn = 8,
      Vn = 9,
      Gn = 10,
      Yn = [2, 3, 7],
      Jn = [3, 3, 11],
      Xn = [280, 256, 256, 256, 40],
      Kn = [0, 1, 1, 1, 0],
      Zn = [17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
      $n = [24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112],
      Qn = [2954, 2956, 2958, 2962, 2970, 2986, 3018, 3082, 3212, 3468, 3980, 5004],
      ti = 8,
      ei = [4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157],
      ri = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284],
      ni = null,
      ii = [[173, 148, 140, 0], [176, 155, 140, 135, 0], [180, 157, 141, 134, 130, 0], [254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129, 0]],
      ai = [0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15],
      oi = [-0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9],
      si = [[[[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]], [[253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128], [189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128], [106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]], [[1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128], [181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128], [78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]], [[1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128], [184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128], [77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]], [[1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128], [170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128], [37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]], [[1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128], [207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128], [102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]], [[1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128], [177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128], [80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62], [131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1], [68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]], [[1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128], [184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128], [81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]], [[1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128], [99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128], [23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]], [[1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128], [109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128], [44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]], [[1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128], [94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128], [22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]], [[1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128], [124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128], [35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]], [[1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128], [121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128], [45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]], [[1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128], [203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128], [137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]]], [[[253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128], [175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128], [73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]], [[1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128], [239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128], [155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]], [[1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128], [201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128], [69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]], [[1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128], [223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128], [141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]], [[1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128], [190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128], [149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128], [247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128], [240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128], [213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128], [55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255], [126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128], [61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]], [[1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128], [166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128], [39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]], [[1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128], [124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128], [24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]], [[1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128], [149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128], [28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]], [[1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128], [123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128], [20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]], [[1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128], [168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128], [47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]], [[1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128], [141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128], [42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]]]],
      ci = [[[231, 120, 48, 89, 115, 113, 120, 152, 112], [152, 179, 64, 126, 170, 118, 46, 70, 95], [175, 69, 143, 80, 85, 82, 72, 155, 103], [56, 58, 10, 171, 218, 189, 17, 13, 152], [114, 26, 17, 163, 44, 195, 21, 10, 173], [121, 24, 80, 195, 26, 62, 44, 64, 85], [144, 71, 10, 38, 171, 213, 144, 34, 26], [170, 46, 55, 19, 136, 160, 33, 206, 71], [63, 20, 8, 114, 114, 208, 12, 9, 226], [81, 40, 11, 96, 182, 84, 29, 16, 36]], [[134, 183, 89, 137, 98, 101, 106, 165, 148], [72, 187, 100, 130, 157, 111, 32, 75, 80], [66, 102, 167, 99, 74, 62, 40, 234, 128], [41, 53, 9, 178, 241, 141, 26, 8, 107], [74, 43, 26, 146, 73, 166, 49, 23, 157], [65, 38, 105, 160, 51, 52, 31, 115, 128], [104, 79, 12, 27, 217, 255, 87, 17, 7], [87, 68, 71, 44, 114, 51, 15, 186, 23], [47, 41, 14, 110, 182, 183, 21, 17, 194], [66, 45, 25, 102, 197, 189, 23, 18, 22]], [[88, 88, 147, 150, 42, 46, 45, 196, 205], [43, 97, 183, 117, 85, 38, 35, 179, 61], [39, 53, 200, 87, 26, 21, 43, 232, 171], [56, 34, 51, 104, 114, 102, 29, 93, 77], [39, 28, 85, 171, 58, 165, 90, 98, 64], [34, 22, 116, 206, 23, 34, 43, 166, 73], [107, 54, 32, 26, 51, 1, 81, 43, 31], [68, 25, 106, 22, 64, 171, 36, 225, 114], [34, 19, 21, 102, 132, 188, 16, 76, 124], [62, 18, 78, 95, 85, 57, 50, 48, 51]], [[193, 101, 35, 159, 215, 111, 89, 46, 111], [60, 148, 31, 172, 219, 228, 21, 18, 111], [112, 113, 77, 85, 179, 255, 38, 120, 114], [40, 42, 1, 196, 245, 209, 10, 25, 109], [88, 43, 29, 140, 166, 213, 37, 43, 154], [61, 63, 30, 155, 67, 45, 68, 1, 209], [100, 80, 8, 43, 154, 1, 51, 26, 71], [142, 78, 78, 16, 255, 128, 34, 197, 171], [41, 40, 5, 102, 211, 183, 4, 1, 221], [51, 50, 17, 168, 209, 192, 23, 25, 82]], [[138, 31, 36, 171, 27, 166, 38, 44, 229], [67, 87, 58, 169, 82, 115, 26, 59, 179], [63, 59, 90, 180, 59, 166, 93, 73, 154], [40, 40, 21, 116, 143, 209, 34, 39, 175], [47, 15, 16, 183, 34, 223, 49, 45, 183], [46, 17, 33, 183, 6, 98, 15, 32, 183], [57, 46, 22, 24, 128, 1, 54, 17, 37], [65, 32, 73, 115, 28, 128, 23, 128, 205], [40, 3, 9, 115, 51, 192, 18, 6, 223], [87, 37, 9, 115, 59, 77, 64, 21, 47]], [[104, 55, 44, 218, 9, 54, 53, 130, 226], [64, 90, 70, 205, 40, 41, 23, 26, 57], [54, 57, 112, 184, 5, 41, 38, 166, 213], [30, 34, 26, 133, 152, 116, 10, 32, 134], [39, 19, 53, 221, 26, 114, 32, 73, 255], [31, 9, 65, 234, 2, 15, 1, 118, 73], [75, 32, 12, 51, 192, 255, 160, 43, 51], [88, 31, 35, 67, 102, 85, 55, 186, 85], [56, 21, 23, 111, 59, 205, 45, 37, 192], [55, 38, 70, 124, 73, 102, 1, 34, 98]], [[125, 98, 42, 88, 104, 85, 117, 175, 82], [95, 84, 53, 89, 128, 100, 113, 101, 45], [75, 79, 123, 47, 51, 128, 81, 171, 1], [57, 17, 5, 71, 102, 57, 53, 41, 49], [38, 33, 13, 121, 57, 73, 26, 1, 85], [41, 10, 67, 138, 77, 110, 90, 47, 114], [115, 21, 2, 10, 102, 255, 166, 23, 6], [101, 29, 16, 10, 85, 128, 101, 196, 26], [57, 18, 10, 102, 102, 213, 34, 20, 43], [117, 20, 15, 36, 163, 128, 68, 1, 26]], [[102, 61, 71, 37, 34, 53, 31, 243, 192], [69, 60, 71, 38, 73, 119, 28, 222, 37], [68, 45, 128, 34, 1, 47, 11, 245, 171], [62, 17, 19, 70, 146, 85, 55, 62, 70], [37, 43, 37, 154, 100, 163, 85, 160, 1], [63, 9, 92, 136, 28, 64, 32, 201, 85], [75, 15, 9, 9, 64, 255, 184, 119, 16], [86, 6, 28, 5, 64, 255, 25, 248, 1], [56, 8, 17, 132, 137, 255, 55, 116, 128], [58, 15, 20, 82, 135, 57, 26, 121, 40]], [[164, 50, 31, 137, 154, 133, 25, 35, 218], [51, 103, 44, 131, 131, 123, 31, 6, 158], [86, 40, 64, 135, 148, 224, 45, 183, 128], [22, 26, 17, 131, 240, 154, 14, 1, 209], [45, 16, 21, 91, 64, 222, 7, 1, 197], [56, 21, 39, 155, 60, 138, 23, 102, 213], [83, 12, 13, 54, 192, 255, 68, 47, 28], [85, 26, 85, 85, 128, 128, 32, 146, 171], [18, 11, 7, 63, 144, 171, 4, 4, 246], [35, 27, 10, 146, 174, 171, 12, 26, 128]], [[190, 80, 35, 99, 180, 80, 126, 54, 45], [85, 126, 47, 87, 176, 51, 41, 20, 32], [101, 75, 128, 139, 118, 146, 116, 128, 85], [56, 41, 15, 176, 236, 85, 37, 9, 62], [71, 30, 17, 119, 118, 255, 17, 18, 138], [101, 38, 60, 138, 55, 70, 43, 26, 142], [146, 36, 19, 30, 171, 255, 97, 27, 20], [138, 45, 61, 62, 219, 1, 81, 188, 64], [32, 41, 20, 117, 151, 142, 20, 21, 163], [112, 19, 12, 61, 195, 128, 48, 4, 24]]],
      ui = [[[[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255], [249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255], [234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255], [239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255], [250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255], [234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255], [247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255], [234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255], [251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255], [248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255], [248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255], [249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]]],
      hi = [0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0],
      li = [],
      fi = [],
      di = [],
      pi = 1,
      gi = 2,
      mi = [],
      vi = [];
    vr("UpsampleRgbLinePair", Ar, 3), vr("UpsampleBgrLinePair", xr, 3), vr("UpsampleRgbaLinePair", Ir, 4), vr("UpsampleBgraLinePair", kr, 4), vr("UpsampleArgbLinePair", Pr, 4), vr("UpsampleRgba4444LinePair", _r, 2), vr("UpsampleRgb565LinePair", Sr, 2);
    var bi = t.UpsampleRgbLinePair,
      yi = t.UpsampleBgrLinePair,
      wi = t.UpsampleRgbaLinePair,
      Ni = t.UpsampleBgraLinePair,
      Li = t.UpsampleArgbLinePair,
      Ai = t.UpsampleRgba4444LinePair,
      xi = t.UpsampleRgb565LinePair,
      Si = 16,
      _i = 1 << Si - 1,
      Pi = -227,
      ki = 482,
      Ii = 6,
      Fi = (256 << Ii) - 1,
      Ci = 0,
      ji = a(256),
      Oi = a(256),
      Bi = a(256),
      Mi = a(256),
      Ei = a(ki - Pi),
      qi = a(ki - Pi);
    Fr("YuvToRgbRow", Ar, 3), Fr("YuvToBgrRow", xr, 3), Fr("YuvToRgbaRow", Ir, 4), Fr("YuvToBgraRow", kr, 4), Fr("YuvToArgbRow", Pr, 4), Fr("YuvToRgba4444Row", _r, 2), Fr("YuvToRgb565Row", Sr, 2);
    var Di = [0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396],
      Ri = [0, 2, 8],
      Ti = [8, 7, 6, 4, 4, 2, 2, 2, 1, 1, 1, 1],
      Ui = 1;
    this.WebPDecodeRGBA = function (t, r, n, i, a) {
      var o = qn,
        s = new rr(),
        c = new ot();
      s.ba = c, c.S = o, c.width = [c.width], c.height = [c.height];
      var u = c.width,
        h = c.height,
        l = new st();
      if (null == l || null == t) var f = 2;else e(null != l), f = Br(t, r, n, l.width, l.height, l.Pd, l.Qd, l.format, null);
      if (0 != f ? u = 0 : (null != u && (u[0] = l.width[0]), null != h && (h[0] = l.height[0]), u = 1), u) {
        c.width = c.width[0], c.height = c.height[0], null != i && (i[0] = c.width), null != a && (a[0] = c.height);
        t: {
          if (i = new Gt(), (a = new nr()).data = t, a.w = r, a.ha = n, a.kd = 1, r = [0], e(null != a), (0 == (t = Br(a.data, a.w, a.ha, null, null, null, r, null, a)) || 7 == t) && r[0] && (t = 4), 0 == (r = t)) {
            if (e(null != s), i.data = a.data, i.w = a.w + a.offset, i.ha = a.ha - a.offset, i.put = dt, i.ac = ft, i.bc = pt, i.ma = s, a.xa) {
              if (null == (t = kt())) {
                s = 1;
                break t;
              }
              if (function (t, r) {
                var n = [0],
                  i = [0],
                  a = [0];
                e: for (;;) {
                  if (null == t) return 0;
                  if (null == r) return t.a = 2, 0;
                  if (t.l = r, t.a = 0, v(t.m, r.data, r.w, r.ha), !gt(t.m, n, i, a)) {
                    t.a = 3;
                    break e;
                  }
                  if (t.xb = gi, r.width = n[0], r.height = i[0], !It(n[0], i[0], 1, t, null)) break e;
                  return 1;
                }
                return e(0 != t.a), 0;
              }(t, i)) {
                if (i = 0 == (r = qr(i.width, i.height, s.Oa, s.ba))) {
                  e: {
                    i = t;
                    r: for (;;) {
                      if (null == i) {
                        i = 0;
                        break e;
                      }
                      if (e(null != i.s.yc), e(null != i.s.Ya), e(0 < i.s.Wb), e(null != (n = i.l)), e(null != (a = n.ma)), 0 != i.xb) {
                        if (i.ca = a.ba, i.tb = a.tb, e(null != i.ca), !Mr(a.Oa, n, Rn)) {
                          i.a = 2;
                          break r;
                        }
                        if (!Ft(i, n.width)) break r;
                        if (n.da) break r;
                        if ((n.da || nt(i.ca.S)) && mr(), 11 > i.ca.S || (alert("todo:WebPInitConvertARGBToYUV"), null != i.ca.f.kb.F && mr()), i.Pb && 0 < i.s.ua && null == i.s.vb.X && !O(i.s.vb, i.s.Wa.Xa)) {
                          i.a = 1;
                          break r;
                        }
                        i.xb = 0;
                      }
                      if (!_t(i, i.V, i.Ba, i.c, i.i, n.o, Lt)) break r;
                      a.Dc = i.Ma, i = 1;
                      break e;
                    }
                    e(0 != i.a), i = 0;
                  }
                  i = !i;
                }
                i && (r = t.a);
              } else r = t.a;
            } else {
              if (null == (t = new Yt())) {
                s = 1;
                break t;
              }
              if (t.Fa = a.na, t.P = a.P, t.qc = a.Sa, Kt(t, i)) {
                if (0 == (r = qr(i.width, i.height, s.Oa, s.ba))) {
                  if (t.Aa = 0, n = s.Oa, e(null != (a = t)), null != n) {
                    if (0 < (u = 0 > (u = n.Md) ? 0 : 100 < u ? 255 : 255 * u / 100)) {
                      for (h = l = 0; 4 > h; ++h) 12 > (f = a.pb[h]).lc && (f.ia = u * Ti[0 > f.lc ? 0 : f.lc] >> 3), l |= f.ia;
                      l && (alert("todo:VP8InitRandom"), a.ia = 1);
                    }
                    a.Ga = n.Id, 100 < a.Ga ? a.Ga = 100 : 0 > a.Ga && (a.Ga = 0);
                  }
                  Qt(t, i) || (r = t.a);
                }
              } else r = t.a;
            }
            0 == r && null != s.Oa && s.Oa.fd && (r = Er(s.ba));
          }
          s = r;
        }
        o = 0 != s ? null : 11 > o ? c.f.RGBA.eb : c.f.kb.y;
      } else o = null;
      return o;
    };
    var zi = [3, 4, 3, 4, 4, 2, 2, 4, 4, 4, 2, 1, 1];
  };
  function u(t, e) {
    for (var r = "", n = 0; n < 4; n++) r += String.fromCharCode(t[e++]);
    return r;
  }
  function h(t, e) {
    return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16) >>> 0;
  }
  function l(t, e) {
    return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24) >>> 0;
  }
  new c();
  var f = [0],
    d = [0],
    p = [],
    g = new c(),
    m = t,
    v = function (t, e) {
      var r = {},
        n = 0,
        i = !1,
        a = 0,
        o = 0;
      if (r.frames = [], !
      /** @license
         * Copyright (c) 2017 Dominik Homberger
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        https://webpjs.appspot.com
        WebPRiffParser dominikhlbg@gmail.com
        */
      function (t, e, r, n) {
        for (var i = 0; i < n; i++) if (t[e + i] != r.charCodeAt(i)) return !0;
        return !1;
      }(t, e, "RIFF", 4)) {
        var s, c;
        l(t, e += 4);
        for (e += 8; e < t.length;) {
          var f = u(t, e),
            d = l(t, e += 4);
          e += 4;
          var p = d + (1 & d);
          switch (f) {
            case "VP8 ":
            case "VP8L":
              void 0 === r.frames[n] && (r.frames[n] = {});
              (v = r.frames[n]).src_off = i ? o : e - 8, v.src_size = a + d + 8, n++, i && (i = !1, a = 0, o = 0);
              break;
            case "VP8X":
              (v = r.header = {}).feature_flags = t[e];
              var g = e + 4;
              v.canvas_width = 1 + h(t, g);
              g += 3;
              v.canvas_height = 1 + h(t, g);
              g += 3;
              break;
            case "ALPH":
              i = !0, a = p + 8, o = e - 8;
              break;
            case "ANIM":
              (v = r.header).bgcolor = l(t, e);
              g = e + 4;
              v.loop_count = (s = t)[(c = g) + 0] << 0 | s[c + 1] << 8;
              g += 2;
              break;
            case "ANMF":
              var m, v;
              (v = r.frames[n] = {}).offset_x = 2 * h(t, e), e += 3, v.offset_y = 2 * h(t, e), e += 3, v.width = 1 + h(t, e), e += 3, v.height = 1 + h(t, e), e += 3, v.duration = h(t, e), e += 3, m = t[e++], v.dispose = 1 & m, v.blend = m >> 1 & 1;
          }
          "ANMF" != f && (e += p);
        }
        return r;
      }
    }(m, 0);
  v.response = m, v.rgbaoutput = !0, v.dataurl = !1;
  var b = v.header ? v.header : null,
    y = v.frames ? v.frames : null;
  if (b) {
    b.loop_counter = b.loop_count, f = [b.canvas_height], d = [b.canvas_width];
    for (var w = 0; w < y.length && 0 != y[w].blend; w++);
  }
  var N = y[0],
    L = g.WebPDecodeRGBA(m, N.src_off, N.src_size, d, f);
  N.rgba = L, N.imgwidth = d[0], N.imgheight = f[0];
  for (var A = 0; A < d[0] * f[0] * 4; A++) p[A] = L[A];
  return this.width = d, this.height = f, this.data = p, this;
}
!function (t) {
  var r = function () {
      return "function" == typeof _fflate.zlibSync;
    },
    n = function (r, n, a, h) {
      var l = 4,
        f = s;
      switch (h) {
        case t.image_compression.FAST:
          l = 1, f = o;
          break;
        case t.image_compression.MEDIUM:
          l = 6, f = c;
          break;
        case t.image_compression.SLOW:
          l = 9, f = u;
      }
      r = i(r, n, a, f);
      var d = (0, _fflate.zlibSync)(r, {
        level: l
      });
      return t.__addimage__.arrayBufferToBinaryString(d);
    },
    i = function (t, e, r, n) {
      for (var i, a, o, s = t.length / e, c = new Uint8Array(t.length + s), u = l(), h = 0; h < s; h += 1) {
        if (o = h * e, i = t.subarray(o, o + e), n) c.set(n(i, r, a), o + h);else {
          for (var d, p = u.length, g = []; d < p; d += 1) g[d] = u[d](i, r, a);
          var m = f(g.concat());
          c.set(g[m], o + h);
        }
        a = i;
      }
      return c;
    },
    a = function (t) {
      var e = Array.apply([], t);
      return e.unshift(0), e;
    },
    o = function (t, e) {
      var r,
        n = [],
        i = t.length;
      n[0] = 1;
      for (var a = 0; a < i; a += 1) r = t[a - e] || 0, n[a + 1] = t[a] - r + 256 & 255;
      return n;
    },
    s = function (t, e, r) {
      var n,
        i = [],
        a = t.length;
      i[0] = 2;
      for (var o = 0; o < a; o += 1) n = r && r[o] || 0, i[o + 1] = t[o] - n + 256 & 255;
      return i;
    },
    c = function (t, e, r) {
      var n,
        i,
        a = [],
        o = t.length;
      a[0] = 3;
      for (var s = 0; s < o; s += 1) n = t[s - e] || 0, i = r && r[s] || 0, a[s + 1] = t[s] + 256 - (n + i >>> 1) & 255;
      return a;
    },
    u = function (t, e, r) {
      var n,
        i,
        a,
        o,
        s = [],
        c = t.length;
      s[0] = 4;
      for (var u = 0; u < c; u += 1) n = t[u - e] || 0, i = r && r[u] || 0, a = r && r[u - e] || 0, o = h(n, i, a), s[u + 1] = t[u] - o + 256 & 255;
      return s;
    },
    h = function (t, e, r) {
      if (t === e && e === r) return t;
      var n = Math.abs(e - r),
        i = Math.abs(t - r),
        a = Math.abs(t + e - r - r);
      return n <= i && n <= a ? t : i <= a ? e : r;
    },
    l = function () {
      return [a, o, s, c, u];
    },
    f = function (t) {
      var e = t.map(function (t) {
        return t.reduce(function (t, e) {
          return t + Math.abs(e);
        }, 0);
      });
      return e.indexOf(Math.min.apply(null, e));
    };
  t.processPNG = function (e, i, a, o) {
    var s,
      c,
      u,
      h,
      l,
      f,
      d,
      p,
      g,
      m,
      v,
      b,
      y,
      w,
      N,
      L = this.decode.FLATE_DECODE,
      A = "";
    if (this.__addimage__.isArrayBuffer(e) && (e = new Uint8Array(e)), this.__addimage__.isArrayBufferView(e)) {
      if (e = (u = new Kt(e)).imgData, c = u.bits, s = u.colorSpace, l = u.colors, -1 !== [4, 6].indexOf(u.colorType)) {
        if (8 === u.bits) {
          g = (p = 32 == u.pixelBitlength ? new Uint32Array(u.decodePixels().buffer) : 16 == u.pixelBitlength ? new Uint16Array(u.decodePixels().buffer) : new Uint8Array(u.decodePixels().buffer)).length, v = new Uint8Array(g * u.colors), m = new Uint8Array(g);
          var x,
            S = u.pixelBitlength - u.bits;
          for (w = 0, N = 0; w < g; w++) {
            for (y = p[w], x = 0; x < S;) v[N++] = y >>> x & 255, x += u.bits;
            m[w] = y >>> x & 255;
          }
        }
        if (16 === u.bits) {
          g = (p = new Uint32Array(u.decodePixels().buffer)).length, v = new Uint8Array(g * (32 / u.pixelBitlength) * u.colors), m = new Uint8Array(g * (32 / u.pixelBitlength)), b = u.colors > 1, w = 0, N = 0;
          for (var _ = 0; w < g;) y = p[w++], v[N++] = y >>> 0 & 255, b && (v[N++] = y >>> 16 & 255, y = p[w++], v[N++] = y >>> 0 & 255), m[_++] = y >>> 16 & 255;
          c = 8;
        }
        o !== t.image_compression.NONE && r() ? (e = n(v, u.width * u.colors, u.colors, o), d = n(m, u.width, 1, o)) : (e = v, d = m, L = void 0);
      }
      if (3 === u.colorType && (s = this.color_spaces.INDEXED, f = u.palette, u.transparency.indexed)) {
        var P = u.transparency.indexed,
          k = 0;
        for (w = 0, g = P.length; w < g; ++w) k += P[w];
        if ((k /= 255) === g - 1 && -1 !== P.indexOf(0)) h = [P.indexOf(0)];else if (k !== g) {
          for (p = u.decodePixels(), m = new Uint8Array(p.length), w = 0, g = p.length; w < g; w++) m[w] = P[p[w]];
          d = n(m, u.width, 1);
        }
      }
      var I = function (e) {
        var r;
        switch (e) {
          case t.image_compression.FAST:
            r = 11;
            break;
          case t.image_compression.MEDIUM:
            r = 13;
            break;
          case t.image_compression.SLOW:
            r = 14;
            break;
          default:
            r = 12;
        }
        return r;
      }(o);
      return L === this.decode.FLATE_DECODE && (A = "/Predictor " + I + " "), A += "/Colors " + l + " /BitsPerComponent " + c + " /Columns " + u.width, (this.__addimage__.isArrayBuffer(e) || this.__addimage__.isArrayBufferView(e)) && (e = this.__addimage__.arrayBufferToBinaryString(e)), (d && this.__addimage__.isArrayBuffer(d) || this.__addimage__.isArrayBufferView(d)) && (d = this.__addimage__.arrayBufferToBinaryString(d)), {
        alias: a,
        data: e,
        index: i,
        filter: L,
        decodeParameters: A,
        transparency: h,
        palette: f,
        sMask: d,
        predictor: I,
        width: u.width,
        height: u.height,
        bitsPerComponent: c,
        colorSpace: s
      };
    }
  };
}(E.API), function (t) {
  t.processGIF89A = function (e, r, n, i) {
    var a = new Zt(e),
      o = a.width,
      s = a.height,
      c = [];
    a.decodeAndBlitFrameRGBA(0, c);
    var u = {
        data: c,
        width: o,
        height: s
      },
      h = new Qt(100).encode(u, 100);
    return t.processJPEG.call(this, h, r, n, i);
  }, t.processGIF87A = t.processGIF89A;
}(E.API), te.prototype.parseHeader = function () {
  if (this.fileSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.reserved = this.datav.getUint32(this.pos, !0), this.pos += 4, this.offset = this.datav.getUint32(this.pos, !0), this.pos += 4, this.headerSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.width = this.datav.getUint32(this.pos, !0), this.pos += 4, this.height = this.datav.getInt32(this.pos, !0), this.pos += 4, this.planes = this.datav.getUint16(this.pos, !0), this.pos += 2, this.bitPP = this.datav.getUint16(this.pos, !0), this.pos += 2, this.compress = this.datav.getUint32(this.pos, !0), this.pos += 4, this.rawSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.hr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.vr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.colors = this.datav.getUint32(this.pos, !0), this.pos += 4, this.importantColors = this.datav.getUint32(this.pos, !0), this.pos += 4, 16 === this.bitPP && this.is_with_alpha && (this.bitPP = 15), this.bitPP < 15) {
    var t = 0 === this.colors ? 1 << this.bitPP : this.colors;
    this.palette = new Array(t);
    for (var e = 0; e < t; e++) {
      var r = this.datav.getUint8(this.pos++, !0),
        n = this.datav.getUint8(this.pos++, !0),
        i = this.datav.getUint8(this.pos++, !0),
        a = this.datav.getUint8(this.pos++, !0);
      this.palette[e] = {
        red: i,
        green: n,
        blue: r,
        quad: a
      };
    }
  }
  this.height < 0 && (this.height *= -1, this.bottom_up = !1);
}, te.prototype.parseBGR = function () {
  this.pos = this.offset;
  try {
    var t = "bit" + this.bitPP,
      e = this.width * this.height * 4;
    this.data = new Uint8Array(e), this[t]();
  } catch (t) {
    a.log("bit decode error:" + t);
  }
}, te.prototype.bit1 = function () {
  var t,
    e = Math.ceil(this.width / 8),
    r = e % 4;
  for (t = this.height - 1; t >= 0; t--) {
    for (var n = this.bottom_up ? t : this.height - 1 - t, i = 0; i < e; i++) for (var a = this.datav.getUint8(this.pos++, !0), o = n * this.width * 4 + 8 * i * 4, s = 0; s < 8 && 8 * i + s < this.width; s++) {
      var c = this.palette[a >> 7 - s & 1];
      this.data[o + 4 * s] = c.blue, this.data[o + 4 * s + 1] = c.green, this.data[o + 4 * s + 2] = c.red, this.data[o + 4 * s + 3] = 255;
    }
    0 !== r && (this.pos += 4 - r);
  }
}, te.prototype.bit4 = function () {
  for (var t = Math.ceil(this.width / 2), e = t % 4, r = this.height - 1; r >= 0; r--) {
    for (var n = this.bottom_up ? r : this.height - 1 - r, i = 0; i < t; i++) {
      var a = this.datav.getUint8(this.pos++, !0),
        o = n * this.width * 4 + 2 * i * 4,
        s = a >> 4,
        c = 15 & a,
        u = this.palette[s];
      if (this.data[o] = u.blue, this.data[o + 1] = u.green, this.data[o + 2] = u.red, this.data[o + 3] = 255, 2 * i + 1 >= this.width) break;
      u = this.palette[c], this.data[o + 4] = u.blue, this.data[o + 4 + 1] = u.green, this.data[o + 4 + 2] = u.red, this.data[o + 4 + 3] = 255;
    }
    0 !== e && (this.pos += 4 - e);
  }
}, te.prototype.bit8 = function () {
  for (var t = this.width % 4, e = this.height - 1; e >= 0; e--) {
    for (var r = this.bottom_up ? e : this.height - 1 - e, n = 0; n < this.width; n++) {
      var i = this.datav.getUint8(this.pos++, !0),
        a = r * this.width * 4 + 4 * n;
      if (i < this.palette.length) {
        var o = this.palette[i];
        this.data[a] = o.red, this.data[a + 1] = o.green, this.data[a + 2] = o.blue, this.data[a + 3] = 255;
      } else this.data[a] = 255, this.data[a + 1] = 255, this.data[a + 2] = 255, this.data[a + 3] = 255;
    }
    0 !== t && (this.pos += 4 - t);
  }
}, te.prototype.bit15 = function () {
  for (var t = this.width % 3, e = parseInt("11111", 2), r = this.height - 1; r >= 0; r--) {
    for (var n = this.bottom_up ? r : this.height - 1 - r, i = 0; i < this.width; i++) {
      var a = this.datav.getUint16(this.pos, !0);
      this.pos += 2;
      var o = (a & e) / e * 255 | 0,
        s = (a >> 5 & e) / e * 255 | 0,
        c = (a >> 10 & e) / e * 255 | 0,
        u = a >> 15 ? 255 : 0,
        h = n * this.width * 4 + 4 * i;
      this.data[h] = c, this.data[h + 1] = s, this.data[h + 2] = o, this.data[h + 3] = u;
    }
    this.pos += t;
  }
}, te.prototype.bit16 = function () {
  for (var t = this.width % 3, e = parseInt("11111", 2), r = parseInt("111111", 2), n = this.height - 1; n >= 0; n--) {
    for (var i = this.bottom_up ? n : this.height - 1 - n, a = 0; a < this.width; a++) {
      var o = this.datav.getUint16(this.pos, !0);
      this.pos += 2;
      var s = (o & e) / e * 255 | 0,
        c = (o >> 5 & r) / r * 255 | 0,
        u = (o >> 11) / e * 255 | 0,
        h = i * this.width * 4 + 4 * a;
      this.data[h] = u, this.data[h + 1] = c, this.data[h + 2] = s, this.data[h + 3] = 255;
    }
    this.pos += t;
  }
}, te.prototype.bit24 = function () {
  for (var t = this.height - 1; t >= 0; t--) {
    for (var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++) {
      var n = this.datav.getUint8(this.pos++, !0),
        i = this.datav.getUint8(this.pos++, !0),
        a = this.datav.getUint8(this.pos++, !0),
        o = e * this.width * 4 + 4 * r;
      this.data[o] = a, this.data[o + 1] = i, this.data[o + 2] = n, this.data[o + 3] = 255;
    }
    this.pos += this.width % 4;
  }
}, te.prototype.bit32 = function () {
  for (var t = this.height - 1; t >= 0; t--) for (var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++) {
    var n = this.datav.getUint8(this.pos++, !0),
      i = this.datav.getUint8(this.pos++, !0),
      a = this.datav.getUint8(this.pos++, !0),
      o = this.datav.getUint8(this.pos++, !0),
      s = e * this.width * 4 + 4 * r;
    this.data[s] = a, this.data[s + 1] = i, this.data[s + 2] = n, this.data[s + 3] = o;
  }
}, te.prototype.getData = function () {
  return this.data;
},
/**
 * @license
 * Copyright (c) 2018 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  t.processBMP = function (e, r, n, i) {
    var a = new te(e, !1),
      o = a.width,
      s = a.height,
      c = {
        data: a.getData(),
        width: o,
        height: s
      },
      u = new Qt(100).encode(c, 100);
    return t.processJPEG.call(this, u, r, n, i);
  };
}(E.API), ee.prototype.getData = function () {
  return this.data;
},
/**
 * @license
 * Copyright (c) 2019 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  t.processWEBP = function (e, r, n, i) {
    var a = new ee(e, !1),
      o = a.width,
      s = a.height,
      c = {
        data: a.getData(),
        width: o,
        height: s
      },
      u = new Qt(100).encode(c, 100);
    return t.processJPEG.call(this, u, r, n, i);
  };
}(E.API), E.API.processRGBA = function (t, e, r) {
  for (var n = t.data, i = n.length, a = new Uint8Array(i / 4 * 3), o = new Uint8Array(i / 4), s = 0, c = 0, u = 0; u < i; u += 4) {
    var h = n[u],
      l = n[u + 1],
      f = n[u + 2],
      d = n[u + 3];
    a[s++] = h, a[s++] = l, a[s++] = f, o[c++] = d;
  }
  var p = this.__addimage__.arrayBufferToBinaryString(a);
  return {
    alpha: this.__addimage__.arrayBufferToBinaryString(o),
    data: p,
    index: e,
    alias: r,
    colorSpace: "DeviceRGB",
    bitsPerComponent: 8,
    width: t.width,
    height: t.height
  };
}, E.API.setLanguage = function (t) {
  return void 0 === this.internal.languageSettings && (this.internal.languageSettings = {}, this.internal.languageSettings.isSubscribed = !1), void 0 !== {
    af: "Afrikaans",
    sq: "Albanian",
    ar: "Arabic (Standard)",
    "ar-DZ": "Arabic (Algeria)",
    "ar-BH": "Arabic (Bahrain)",
    "ar-EG": "Arabic (Egypt)",
    "ar-IQ": "Arabic (Iraq)",
    "ar-JO": "Arabic (Jordan)",
    "ar-KW": "Arabic (Kuwait)",
    "ar-LB": "Arabic (Lebanon)",
    "ar-LY": "Arabic (Libya)",
    "ar-MA": "Arabic (Morocco)",
    "ar-OM": "Arabic (Oman)",
    "ar-QA": "Arabic (Qatar)",
    "ar-SA": "Arabic (Saudi Arabia)",
    "ar-SY": "Arabic (Syria)",
    "ar-TN": "Arabic (Tunisia)",
    "ar-AE": "Arabic (U.A.E.)",
    "ar-YE": "Arabic (Yemen)",
    an: "Aragonese",
    hy: "Armenian",
    as: "Assamese",
    ast: "Asturian",
    az: "Azerbaijani",
    eu: "Basque",
    be: "Belarusian",
    bn: "Bengali",
    bs: "Bosnian",
    br: "Breton",
    bg: "Bulgarian",
    my: "Burmese",
    ca: "Catalan",
    ch: "Chamorro",
    ce: "Chechen",
    zh: "Chinese",
    "zh-HK": "Chinese (Hong Kong)",
    "zh-CN": "Chinese (PRC)",
    "zh-SG": "Chinese (Singapore)",
    "zh-TW": "Chinese (Taiwan)",
    cv: "Chuvash",
    co: "Corsican",
    cr: "Cree",
    hr: "Croatian",
    cs: "Czech",
    da: "Danish",
    nl: "Dutch (Standard)",
    "nl-BE": "Dutch (Belgian)",
    en: "English",
    "en-AU": "English (Australia)",
    "en-BZ": "English (Belize)",
    "en-CA": "English (Canada)",
    "en-IE": "English (Ireland)",
    "en-JM": "English (Jamaica)",
    "en-NZ": "English (New Zealand)",
    "en-PH": "English (Philippines)",
    "en-ZA": "English (South Africa)",
    "en-TT": "English (Trinidad & Tobago)",
    "en-GB": "English (United Kingdom)",
    "en-US": "English (United States)",
    "en-ZW": "English (Zimbabwe)",
    eo: "Esperanto",
    et: "Estonian",
    fo: "Faeroese",
    fj: "Fijian",
    fi: "Finnish",
    fr: "French (Standard)",
    "fr-BE": "French (Belgium)",
    "fr-CA": "French (Canada)",
    "fr-FR": "French (France)",
    "fr-LU": "French (Luxembourg)",
    "fr-MC": "French (Monaco)",
    "fr-CH": "French (Switzerland)",
    fy: "Frisian",
    fur: "Friulian",
    gd: "Gaelic (Scots)",
    "gd-IE": "Gaelic (Irish)",
    gl: "Galacian",
    ka: "Georgian",
    de: "German (Standard)",
    "de-AT": "German (Austria)",
    "de-DE": "German (Germany)",
    "de-LI": "German (Liechtenstein)",
    "de-LU": "German (Luxembourg)",
    "de-CH": "German (Switzerland)",
    el: "Greek",
    gu: "Gujurati",
    ht: "Haitian",
    he: "Hebrew",
    hi: "Hindi",
    hu: "Hungarian",
    is: "Icelandic",
    id: "Indonesian",
    iu: "Inuktitut",
    ga: "Irish",
    it: "Italian (Standard)",
    "it-CH": "Italian (Switzerland)",
    ja: "Japanese",
    kn: "Kannada",
    ks: "Kashmiri",
    kk: "Kazakh",
    km: "Khmer",
    ky: "Kirghiz",
    tlh: "Klingon",
    ko: "Korean",
    "ko-KP": "Korean (North Korea)",
    "ko-KR": "Korean (South Korea)",
    la: "Latin",
    lv: "Latvian",
    lt: "Lithuanian",
    lb: "Luxembourgish",
    mk: "North Macedonia",
    ms: "Malay",
    ml: "Malayalam",
    mt: "Maltese",
    mi: "Maori",
    mr: "Marathi",
    mo: "Moldavian",
    nv: "Navajo",
    ng: "Ndonga",
    ne: "Nepali",
    no: "Norwegian",
    nb: "Norwegian (Bokmal)",
    nn: "Norwegian (Nynorsk)",
    oc: "Occitan",
    or: "Oriya",
    om: "Oromo",
    fa: "Persian",
    "fa-IR": "Persian/Iran",
    pl: "Polish",
    pt: "Portuguese",
    "pt-BR": "Portuguese (Brazil)",
    pa: "Punjabi",
    "pa-IN": "Punjabi (India)",
    "pa-PK": "Punjabi (Pakistan)",
    qu: "Quechua",
    rm: "Rhaeto-Romanic",
    ro: "Romanian",
    "ro-MO": "Romanian (Moldavia)",
    ru: "Russian",
    "ru-MO": "Russian (Moldavia)",
    sz: "Sami (Lappish)",
    sg: "Sango",
    sa: "Sanskrit",
    sc: "Sardinian",
    sd: "Sindhi",
    si: "Singhalese",
    sr: "Serbian",
    sk: "Slovak",
    sl: "Slovenian",
    so: "Somani",
    sb: "Sorbian",
    es: "Spanish",
    "es-AR": "Spanish (Argentina)",
    "es-BO": "Spanish (Bolivia)",
    "es-CL": "Spanish (Chile)",
    "es-CO": "Spanish (Colombia)",
    "es-CR": "Spanish (Costa Rica)",
    "es-DO": "Spanish (Dominican Republic)",
    "es-EC": "Spanish (Ecuador)",
    "es-SV": "Spanish (El Salvador)",
    "es-GT": "Spanish (Guatemala)",
    "es-HN": "Spanish (Honduras)",
    "es-MX": "Spanish (Mexico)",
    "es-NI": "Spanish (Nicaragua)",
    "es-PA": "Spanish (Panama)",
    "es-PY": "Spanish (Paraguay)",
    "es-PE": "Spanish (Peru)",
    "es-PR": "Spanish (Puerto Rico)",
    "es-ES": "Spanish (Spain)",
    "es-UY": "Spanish (Uruguay)",
    "es-VE": "Spanish (Venezuela)",
    sx: "Sutu",
    sw: "Swahili",
    sv: "Swedish",
    "sv-FI": "Swedish (Finland)",
    "sv-SV": "Swedish (Sweden)",
    ta: "Tamil",
    tt: "Tatar",
    te: "Teluga",
    th: "Thai",
    tig: "Tigre",
    ts: "Tsonga",
    tn: "Tswana",
    tr: "Turkish",
    tk: "Turkmen",
    uk: "Ukrainian",
    hsb: "Upper Sorbian",
    ur: "Urdu",
    ve: "Venda",
    vi: "Vietnamese",
    vo: "Volapuk",
    wa: "Walloon",
    cy: "Welsh",
    xh: "Xhosa",
    ji: "Yiddish",
    zu: "Zulu"
  }[t] && (this.internal.languageSettings.languageCode = t, !1 === this.internal.languageSettings.isSubscribed && (this.internal.events.subscribe("putCatalog", function () {
    this.internal.write("/Lang (" + this.internal.languageSettings.languageCode + ")");
  }), this.internal.languageSettings.isSubscribed = !0)), this;
}, Vt = E.API, Gt = Vt.getCharWidthsArray = function (e, r) {
  var n,
    i,
    a = (r = r || {}).font || this.internal.getFont(),
    o = r.fontSize || this.internal.getFontSize(),
    s = r.charSpace || this.internal.getCharSpace(),
    c = r.widths ? r.widths : a.metadata.Unicode.widths,
    u = c.fof ? c.fof : 1,
    h = r.kerning ? r.kerning : a.metadata.Unicode.kerning,
    l = h.fof ? h.fof : 1,
    f = !1 !== r.doKerning,
    d = 0,
    p = e.length,
    g = 0,
    m = c[0] || u,
    v = [];
  for (n = 0; n < p; n++) i = e.charCodeAt(n), "function" == typeof a.metadata.widthOfString ? v.push((a.metadata.widthOfGlyph(a.metadata.characterToGlyph(i)) + s * (1e3 / o) || 0) / 1e3) : (d = f && "object" === (0, _typeof.default)(h[i]) && !isNaN(parseInt(h[i][g], 10)) ? h[i][g] / l : 0, v.push((c[i] || m) / u + d)), g = i;
  return v;
}, Yt = Vt.getStringUnitWidth = function (t, e) {
  var r = (e = e || {}).fontSize || this.internal.getFontSize(),
    n = e.font || this.internal.getFont(),
    i = e.charSpace || this.internal.getCharSpace();
  return Vt.processArabic && (t = Vt.processArabic(t)), "function" == typeof n.metadata.widthOfString ? n.metadata.widthOfString(t, r, i) / r : Gt.apply(this, arguments).reduce(function (t, e) {
    return t + e;
  }, 0);
}, Jt = function (t, e, r, n) {
  for (var i = [], a = 0, o = t.length, s = 0; a !== o && s + e[a] < r;) s += e[a], a++;
  i.push(t.slice(0, a));
  var c = a;
  for (s = 0; a !== o;) s + e[a] > n && (i.push(t.slice(c, a)), s = 0, c = a), s += e[a], a++;
  return c !== a && i.push(t.slice(c, a)), i;
}, Xt = function (t, e, r) {
  r || (r = {});
  var n,
    i,
    a,
    o,
    s,
    c,
    u,
    h = [],
    l = [h],
    f = r.textIndent || 0,
    d = 0,
    p = 0,
    g = t.split(" "),
    m = Gt.apply(this, [" ", r])[0];
  if (c = -1 === r.lineIndent ? g[0].length + 2 : r.lineIndent || 0) {
    var v = Array(c).join(" "),
      b = [];
    g.map(function (t) {
      (t = t.split(/\s*\n/)).length > 1 ? b = b.concat(t.map(function (t, e) {
        return (e && t.length ? "\n" : "") + t;
      })) : b.push(t[0]);
    }), g = b, c = Yt.apply(this, [v, r]);
  }
  for (a = 0, o = g.length; a < o; a++) {
    var y = 0;
    if (n = g[a], c && "\n" == n[0] && (n = n.substr(1), y = 1), f + d + (p = (i = Gt.apply(this, [n, r])).reduce(function (t, e) {
      return t + e;
    }, 0)) > e || y) {
      if (p > e) {
        for (s = Jt.apply(this, [n, i, e - (f + d), e]), h.push(s.shift()), h = [s.pop()]; s.length;) l.push([s.shift()]);
        p = i.slice(n.length - (h[0] ? h[0].length : 0)).reduce(function (t, e) {
          return t + e;
        }, 0);
      } else h = [n];
      l.push(h), f = p + c, d = m;
    } else h.push(n), f += d + p, d = m;
  }
  return u = c ? function (t, e) {
    return (e ? v : "") + t.join(" ");
  } : function (t) {
    return t.join(" ");
  }, l.map(u);
}, Vt.splitTextToSize = function (t, e, r) {
  var n,
    i = (r = r || {}).fontSize || this.internal.getFontSize(),
    a = function (t) {
      if (t.widths && t.kerning) return {
        widths: t.widths,
        kerning: t.kerning
      };
      var e = this.internal.getFont(t.fontName, t.fontStyle);
      return e.metadata.Unicode ? {
        widths: e.metadata.Unicode.widths || {
          0: 1
        },
        kerning: e.metadata.Unicode.kerning || {}
      } : {
        font: e.metadata,
        fontSize: this.internal.getFontSize(),
        charSpace: this.internal.getCharSpace()
      };
    }.call(this, r);
  n = Array.isArray(t) ? t : String(t).split(/\r?\n/);
  var o = 1 * this.internal.scaleFactor * e / i;
  a.textIndent = r.textIndent ? 1 * r.textIndent * this.internal.scaleFactor / i : 0, a.lineIndent = r.lineIndent;
  var s,
    c,
    u = [];
  for (s = 0, c = n.length; s < c; s++) u = u.concat(Xt.apply(this, [n[s], o, a]));
  return u;
}, function (e) {
  e.__fontmetrics__ = e.__fontmetrics__ || {};
  for (var r = "klmnopqrstuvwxyz", n = {}, i = {}, a = 0; a < r.length; a++) n[r[a]] = "0123456789abcdef"[a], i["0123456789abcdef"[a]] = r[a];
  var o = function (t) {
      return "0x" + parseInt(t, 10).toString(16);
    },
    s = e.__fontmetrics__.compress = function (e) {
      var r,
        n,
        a,
        c,
        u = ["{"];
      for (var h in e) {
        if (r = e[h], isNaN(parseInt(h, 10)) ? n = "'" + h + "'" : (h = parseInt(h, 10), n = (n = o(h).slice(2)).slice(0, -1) + i[n.slice(-1)]), "number" == typeof r) r < 0 ? (a = o(r).slice(3), c = "-") : (a = o(r).slice(2), c = ""), a = c + a.slice(0, -1) + i[a.slice(-1)];else {
          if ("object" !== (0, _typeof.default)(r)) throw new Error("Don't know what to do with value type " + (0, _typeof.default)(r) + ".");
          a = s(r);
        }
        u.push(n + a);
      }
      return u.push("}"), u.join("");
    },
    c = e.__fontmetrics__.uncompress = function (t) {
      if ("string" != typeof t) throw new Error("Invalid argument passed to uncompress.");
      for (var e, r, i, a, o = {}, s = 1, c = o, u = [], h = "", l = "", f = t.length - 1, d = 1; d < f; d += 1) "'" == (a = t[d]) ? e ? (i = e.join(""), e = void 0) : e = [] : e ? e.push(a) : "{" == a ? (u.push([c, i]), c = {}, i = void 0) : "}" == a ? ((r = u.pop())[0][r[1]] = c, i = void 0, c = r[0]) : "-" == a ? s = -1 : void 0 === i ? n.hasOwnProperty(a) ? (h += n[a], i = parseInt(h, 16) * s, s = 1, h = "") : h += a : n.hasOwnProperty(a) ? (l += n[a], c[i] = parseInt(l, 16) * s, s = 1, i = void 0, l = "") : l += a;
      return o;
    },
    u = {
      codePages: ["WinAnsiEncoding"],
      WinAnsiEncoding: c("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")
    },
    h = {
      Unicode: {
        Courier: u,
        "Courier-Bold": u,
        "Courier-BoldOblique": u,
        "Courier-Oblique": u,
        Helvetica: u,
        "Helvetica-Bold": u,
        "Helvetica-BoldOblique": u,
        "Helvetica-Oblique": u,
        "Times-Roman": u,
        "Times-Bold": u,
        "Times-BoldItalic": u,
        "Times-Italic": u
      }
    },
    l = {
      Unicode: {
        "Courier-Oblique": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
        "Times-BoldItalic": c("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),
        "Helvetica-Bold": c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
        Courier: c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
        "Courier-BoldOblique": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
        "Times-Bold": c("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),
        Symbol: c("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),
        Helvetica: c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),
        "Helvetica-BoldOblique": c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
        ZapfDingbats: c("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),
        "Courier-Bold": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
        "Times-Italic": c("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),
        "Times-Roman": c("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),
        "Helvetica-Oblique": c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")
      }
    };
  e.events.push(["addFont", function (t) {
    var e = t.font,
      r = l.Unicode[e.postScriptName];
    r && (e.metadata.Unicode = {}, e.metadata.Unicode.widths = r.widths, e.metadata.Unicode.kerning = r.kerning);
    var n = h.Unicode[e.postScriptName];
    n && (e.metadata.Unicode.encoding = n, e.encoding = n.codePages[0]);
  }]);
}(E.API),
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function (t) {
    for (var e = t.length, r = new Uint8Array(e), n = 0; n < e; n++) r[n] = t.charCodeAt(n);
    return r;
  };
  t.API.events.push(["addFont", function (r) {
    var n = void 0,
      i = r.font,
      a = r.instance;
    if (!i.isStandardFont) {
      if (void 0 === a) throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('" + i.postScriptName + "').");
      if ("string" != typeof (n = !1 === a.existsFileInVFS(i.postScriptName) ? a.loadFile(i.postScriptName) : a.getFileFromVFS(i.postScriptName))) throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('" + i.postScriptName + "').");
      !function (r, n) {
        n = /^\x00\x01\x00\x00/.test(n) ? e(n) : e(u(n)), r.metadata = t.API.TTFFont.open(n), r.metadata.Unicode = r.metadata.Unicode || {
          encoding: {},
          kerning: {},
          widths: []
        }, r.metadata.glyIdsUsed = [0];
      }(i, n);
    }
  }]);
}(E),
/** @license
 * Copyright (c) 2012 Willow Systems Corporation, https://github.com/willowsystems
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function (t) {
  function e() {
    return (n.canvg ? Promise.resolve(n.canvg) : import("canvg")).catch(function (t) {
      return Promise.reject(new Error("Could not load canvg: " + t));
    }).then(function (t) {
      return t.default ? t.default : t;
    });
  }
  E.API.addSvgAsImage = function (t, r, n, i, o, s, c, u) {
    if (isNaN(r) || isNaN(n)) throw a.error("jsPDF.addSvgAsImage: Invalid coordinates", arguments), new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");
    if (isNaN(i) || isNaN(o)) throw a.error("jsPDF.addSvgAsImage: Invalid measurements", arguments), new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");
    var h = document.createElement("canvas");
    h.width = i, h.height = o;
    var l = h.getContext("2d");
    l.fillStyle = "#fff", l.fillRect(0, 0, h.width, h.height);
    var f = {
        ignoreMouse: !0,
        ignoreAnimation: !0,
        ignoreDimensions: !0
      },
      d = this;
    return e().then(function (e) {
      return e.fromString(l, t, f);
    }, function () {
      return Promise.reject(new Error("Could not load canvg."));
    }).then(function (t) {
      return t.render(f);
    }).then(function () {
      d.addImage(h.toDataURL("image/jpeg", 1), r, n, i, o, c, u);
    });
  };
}(), E.API.putTotalPages = function (t) {
  var e,
    r = 0;
  parseInt(this.internal.getFont().id.substr(1), 10) < 15 ? (e = new RegExp(t, "g"), r = this.internal.getNumberOfPages()) : (e = new RegExp(this.pdfEscape16(t, this.internal.getFont()), "g"), r = this.pdfEscape16(this.internal.getNumberOfPages() + "", this.internal.getFont()));
  for (var n = 1; n <= this.internal.getNumberOfPages(); n++) for (var i = 0; i < this.internal.pages[n].length; i++) this.internal.pages[n][i] = this.internal.pages[n][i].replace(e, r);
  return this;
}, E.API.viewerPreferences = function (e, r) {
  var n;
  e = e || {}, r = r || !1;
  var i,
    a,
    o,
    s = {
      HideToolbar: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      HideMenubar: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      HideWindowUI: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      FitWindow: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      CenterWindow: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      DisplayDocTitle: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.4
      },
      NonFullScreenPageMode: {
        defaultValue: "UseNone",
        value: "UseNone",
        type: "name",
        explicitSet: !1,
        valueSet: ["UseNone", "UseOutlines", "UseThumbs", "UseOC"],
        pdfVersion: 1.3
      },
      Direction: {
        defaultValue: "L2R",
        value: "L2R",
        type: "name",
        explicitSet: !1,
        valueSet: ["L2R", "R2L"],
        pdfVersion: 1.3
      },
      ViewArea: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      ViewClip: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      PrintArea: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      PrintClip: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      PrintScaling: {
        defaultValue: "AppDefault",
        value: "AppDefault",
        type: "name",
        explicitSet: !1,
        valueSet: ["AppDefault", "None"],
        pdfVersion: 1.6
      },
      Duplex: {
        defaultValue: "",
        value: "none",
        type: "name",
        explicitSet: !1,
        valueSet: ["Simplex", "DuplexFlipShortEdge", "DuplexFlipLongEdge", "none"],
        pdfVersion: 1.7
      },
      PickTrayByPDFSize: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.7
      },
      PrintPageRange: {
        defaultValue: "",
        value: "",
        type: "array",
        explicitSet: !1,
        valueSet: null,
        pdfVersion: 1.7
      },
      NumCopies: {
        defaultValue: 1,
        value: 1,
        type: "integer",
        explicitSet: !1,
        valueSet: null,
        pdfVersion: 1.7
      }
    },
    c = Object.keys(s),
    u = [],
    h = 0,
    l = 0,
    f = 0;
  function d(t, e) {
    var r,
      n = !1;
    for (r = 0; r < t.length; r += 1) t[r] === e && (n = !0);
    return n;
  }
  if (void 0 === this.internal.viewerpreferences && (this.internal.viewerpreferences = {}, this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(s)), this.internal.viewerpreferences.isSubscribed = !1), n = this.internal.viewerpreferences.configuration, "reset" === e || !0 === r) {
    var p = c.length;
    for (f = 0; f < p; f += 1) n[c[f]].value = n[c[f]].defaultValue, n[c[f]].explicitSet = !1;
  }
  if ("object" === (0, _typeof.default)(e)) for (a in e) if (o = e[a], d(c, a) && void 0 !== o) {
    if ("boolean" === n[a].type && "boolean" == typeof o) n[a].value = o;else if ("name" === n[a].type && d(n[a].valueSet, o)) n[a].value = o;else if ("integer" === n[a].type && Number.isInteger(o)) n[a].value = o;else if ("array" === n[a].type) {
      for (h = 0; h < o.length; h += 1) if (i = !0, 1 === o[h].length && "number" == typeof o[h][0]) u.push(String(o[h] - 1));else if (o[h].length > 1) {
        for (l = 0; l < o[h].length; l += 1) "number" != typeof o[h][l] && (i = !1);
        !0 === i && u.push([o[h][0] - 1, o[h][1] - 1].join(" "));
      }
      n[a].value = "[" + u.join(" ") + "]";
    } else n[a].value = n[a].defaultValue;
    n[a].explicitSet = !0;
  }
  return !1 === this.internal.viewerpreferences.isSubscribed && (this.internal.events.subscribe("putCatalog", function () {
    var t,
      e = [];
    for (t in n) !0 === n[t].explicitSet && ("name" === n[t].type ? e.push("/" + t + " /" + n[t].value) : e.push("/" + t + " " + n[t].value));
    0 !== e.length && this.internal.write("/ViewerPreferences\n<<\n" + e.join("\n") + "\n>>");
  }), this.internal.viewerpreferences.isSubscribed = !0), this.internal.viewerpreferences.configuration = n, this;
},
/** ====================================================================
 * @license
 * jsPDF XMP metadata plugin
 * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function (t) {
  var e = function () {
      var t = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="' + this.internal.__metadata__.namespaceuri + '"><jspdf:metadata>',
        e = unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')),
        r = unescape(encodeURIComponent(t)),
        n = unescape(encodeURIComponent(this.internal.__metadata__.metadata)),
        i = unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")),
        a = unescape(encodeURIComponent("</x:xmpmeta>")),
        o = r.length + n.length + i.length + e.length + a.length;
      this.internal.__metadata__.metadata_object_number = this.internal.newObject(), this.internal.write("<< /Type /Metadata /Subtype /XML /Length " + o + " >>"), this.internal.write("stream"), this.internal.write(e + r + n + i + a), this.internal.write("endstream"), this.internal.write("endobj");
    },
    r = function () {
      this.internal.__metadata__.metadata_object_number && this.internal.write("/Metadata " + this.internal.__metadata__.metadata_object_number + " 0 R");
    };
  t.addMetadata = function (t, n) {
    return void 0 === this.internal.__metadata__ && (this.internal.__metadata__ = {
      metadata: t,
      namespaceuri: n || "http://jspdf.default.namespaceuri/"
    }, this.internal.events.subscribe("putCatalog", r), this.internal.events.subscribe("postPutResources", e)), this;
  };
}(E.API), function (t) {
  var e = t.API,
    r = e.pdfEscape16 = function (t, e) {
      for (var r, n = e.metadata.Unicode.widths, i = ["", "0", "00", "000", "0000"], a = [""], o = 0, s = t.length; o < s; ++o) {
        if (r = e.metadata.characterToGlyph(t.charCodeAt(o)), e.metadata.glyIdsUsed.push(r), e.metadata.toUnicode[r] = t.charCodeAt(o), -1 == n.indexOf(r) && (n.push(r), n.push([parseInt(e.metadata.widthOfGlyph(r), 10)])), "0" == r) return a.join("");
        r = r.toString(16), a.push(i[4 - r.length], r);
      }
      return a.join("");
    },
    n = function (t) {
      var e, r, n, i, a, o, s;
      for (a = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange", n = [], o = 0, s = (r = Object.keys(t).sort(function (t, e) {
        return t - e;
      })).length; o < s; o++) e = r[o], n.length >= 100 && (a += "\n" + n.length + " beginbfchar\n" + n.join("\n") + "\nendbfchar", n = []), void 0 !== t[e] && null !== t[e] && "function" == typeof t[e].toString && (i = ("0000" + t[e].toString(16)).slice(-4), e = ("0000" + (+e).toString(16)).slice(-4), n.push("<" + e + "><" + i + ">"));
      return n.length && (a += "\n" + n.length + " beginbfchar\n" + n.join("\n") + "\nendbfchar\n"), a += "endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend";
    };
  e.events.push(["putFont", function (e) {
    !function (e) {
      var r = e.font,
        i = e.out,
        a = e.newObject,
        o = e.putStream;
      if (r.metadata instanceof t.API.TTFFont && "Identity-H" === r.encoding) {
        for (var s = r.metadata.Unicode.widths, c = r.metadata.subset.encode(r.metadata.glyIdsUsed, 1), u = "", h = 0; h < c.length; h++) u += String.fromCharCode(c[h]);
        var l = a();
        o({
          data: u,
          addLength1: !0,
          objectId: l
        }), i("endobj");
        var f = a();
        o({
          data: n(r.metadata.toUnicode),
          addLength1: !0,
          objectId: f
        }), i("endobj");
        var d = a();
        i("<<"), i("/Type /FontDescriptor"), i("/FontName /" + F(r.fontName)), i("/FontFile2 " + l + " 0 R"), i("/FontBBox " + t.API.PDFObject.convert(r.metadata.bbox)), i("/Flags " + r.metadata.flags), i("/StemV " + r.metadata.stemV), i("/ItalicAngle " + r.metadata.italicAngle), i("/Ascent " + r.metadata.ascender), i("/Descent " + r.metadata.decender), i("/CapHeight " + r.metadata.capHeight), i(">>"), i("endobj");
        var p = a();
        i("<<"), i("/Type /Font"), i("/BaseFont /" + F(r.fontName)), i("/FontDescriptor " + d + " 0 R"), i("/W " + t.API.PDFObject.convert(s)), i("/CIDToGIDMap /Identity"), i("/DW 1000"), i("/Subtype /CIDFontType2"), i("/CIDSystemInfo"), i("<<"), i("/Supplement 0"), i("/Registry (Adobe)"), i("/Ordering (" + r.encoding + ")"), i(">>"), i(">>"), i("endobj"), r.objectNumber = a(), i("<<"), i("/Type /Font"), i("/Subtype /Type0"), i("/ToUnicode " + f + " 0 R"), i("/BaseFont /" + F(r.fontName)), i("/Encoding /" + r.encoding), i("/DescendantFonts [" + p + " 0 R]"), i(">>"), i("endobj"), r.isAlreadyPutted = !0;
      }
    }(e);
  }]);
  e.events.push(["putFont", function (e) {
    !function (e) {
      var r = e.font,
        i = e.out,
        a = e.newObject,
        o = e.putStream;
      if (r.metadata instanceof t.API.TTFFont && "WinAnsiEncoding" === r.encoding) {
        for (var s = r.metadata.rawData, c = "", u = 0; u < s.length; u++) c += String.fromCharCode(s[u]);
        var h = a();
        o({
          data: c,
          addLength1: !0,
          objectId: h
        }), i("endobj");
        var l = a();
        o({
          data: n(r.metadata.toUnicode),
          addLength1: !0,
          objectId: l
        }), i("endobj");
        var f = a();
        i("<<"), i("/Descent " + r.metadata.decender), i("/CapHeight " + r.metadata.capHeight), i("/StemV " + r.metadata.stemV), i("/Type /FontDescriptor"), i("/FontFile2 " + h + " 0 R"), i("/Flags 96"), i("/FontBBox " + t.API.PDFObject.convert(r.metadata.bbox)), i("/FontName /" + F(r.fontName)), i("/ItalicAngle " + r.metadata.italicAngle), i("/Ascent " + r.metadata.ascender), i(">>"), i("endobj"), r.objectNumber = a();
        for (var d = 0; d < r.metadata.hmtx.widths.length; d++) r.metadata.hmtx.widths[d] = parseInt(r.metadata.hmtx.widths[d] * (1e3 / r.metadata.head.unitsPerEm));
        i("<</Subtype/TrueType/Type/Font/ToUnicode " + l + " 0 R/BaseFont/" + F(r.fontName) + "/FontDescriptor " + f + " 0 R/Encoding/" + r.encoding + " /FirstChar 29 /LastChar 255 /Widths " + t.API.PDFObject.convert(r.metadata.hmtx.widths) + ">>"), i("endobj"), r.isAlreadyPutted = !0;
      }
    }(e);
  }]);
  var i = function (t) {
    var e,
      n = t.text || "",
      i = t.x,
      a = t.y,
      o = t.options || {},
      s = t.mutex || {},
      c = s.pdfEscape,
      u = s.activeFontKey,
      h = s.fonts,
      l = u,
      f = "",
      d = 0,
      p = "",
      g = h[l].encoding;
    if ("Identity-H" !== h[l].encoding) return {
      text: n,
      x: i,
      y: a,
      options: o,
      mutex: s
    };
    for (p = n, l = u, Array.isArray(n) && (p = n[0]), d = 0; d < p.length; d += 1) h[l].metadata.hasOwnProperty("cmap") && (e = h[l].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]), e || p[d].charCodeAt(0) < 256 && h[l].metadata.hasOwnProperty("Unicode") ? f += p[d] : f += "";
    var m = "";
    return parseInt(l.slice(1)) < 14 || "WinAnsiEncoding" === g ? m = c(f, l).split("").map(function (t) {
      return t.charCodeAt(0).toString(16);
    }).join("") : "Identity-H" === g && (m = r(f, h[l])), s.isHex = !0, {
      text: m,
      x: i,
      y: a,
      options: o,
      mutex: s
    };
  };
  e.events.push(["postProcessText", function (t) {
    var e = t.text || "",
      r = [],
      n = {
        text: e,
        x: t.x,
        y: t.y,
        options: t.options,
        mutex: t.mutex
      };
    if (Array.isArray(e)) {
      var a = 0;
      for (a = 0; a < e.length; a += 1) Array.isArray(e[a]) && 3 === e[a].length ? r.push([i(Object.assign({}, n, {
        text: e[a][0]
      })).text, e[a][1], e[a][2]]) : r.push(i(Object.assign({}, n, {
        text: e[a]
      })).text);
      t.text = r;
    } else t.text = i(Object.assign({}, n, {
      text: e
    })).text;
  }]);
}(E),
/**
 * @license
 * jsPDF virtual FileSystem functionality
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function () {
    return void 0 === this.internal.vFS && (this.internal.vFS = {}), !0;
  };
  t.existsFileInVFS = function (t) {
    return e.call(this), void 0 !== this.internal.vFS[t];
  }, t.addFileToVFS = function (t, r) {
    return e.call(this), this.internal.vFS[t] = r, this;
  }, t.getFileFromVFS = function (t) {
    return e.call(this), void 0 !== this.internal.vFS[t] ? this.internal.vFS[t] : null;
  };
}(E.API),
/**
 * @license
 * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)
 * MIT License
 */
function (t) {
  t.__bidiEngine__ = t.prototype.__bidiEngine__ = function (t) {
    var r,
      n,
      i,
      a,
      o,
      s,
      c,
      u = e,
      h = [[0, 3, 0, 1, 0, 0, 0], [0, 3, 0, 1, 2, 2, 0], [0, 3, 0, 17, 2, 0, 1], [0, 3, 5, 5, 4, 1, 0], [0, 3, 21, 21, 4, 0, 1], [0, 3, 5, 5, 4, 2, 0]],
      l = [[2, 0, 1, 1, 0, 1, 0], [2, 0, 1, 1, 0, 2, 0], [2, 0, 2, 1, 3, 2, 0], [2, 0, 2, 33, 3, 1, 1]],
      f = {
        L: 0,
        R: 1,
        EN: 2,
        AN: 3,
        N: 4,
        B: 5,
        S: 6
      },
      d = {
        0: 0,
        5: 1,
        6: 2,
        7: 3,
        32: 4,
        251: 5,
        254: 6,
        255: 7
      },
      p = ["(", ")", "(", "<", ">", "<", "[", "]", "[", "{", "}", "{", "«", "»", "«", "‹", "›", "‹", "⁅", "⁆", "⁅", "⁽", "⁾", "⁽", "₍", "₎", "₍", "≤", "≥", "≤", "〈", "〉", "〈", "﹙", "﹚", "﹙", "﹛", "﹜", "﹛", "﹝", "﹞", "﹝", "﹤", "﹥", "﹤"],
      g = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/),
      m = !1,
      v = 0;
    this.__bidiEngine__ = {};
    var b = function (t) {
        var e = t.charCodeAt(),
          r = e >> 8,
          n = d[r];
        return void 0 !== n ? u[256 * n + (255 & e)] : 252 === r || 253 === r ? "AL" : g.test(r) ? "L" : 8 === r ? "R" : "N";
      },
      y = function (t) {
        for (var e, r = 0; r < t.length; r++) {
          if ("L" === (e = b(t.charAt(r)))) return !1;
          if ("R" === e) return !0;
        }
        return !1;
      },
      w = function (t, e, o, s) {
        var c,
          u,
          h,
          l,
          f = e[s];
        switch (f) {
          case "L":
          case "R":
            m = !1;
            break;
          case "N":
          case "AN":
            break;
          case "EN":
            m && (f = "AN");
            break;
          case "AL":
            m = !0, f = "R";
            break;
          case "WS":
            f = "N";
            break;
          case "CS":
            s < 1 || s + 1 >= e.length || "EN" !== (c = o[s - 1]) && "AN" !== c || "EN" !== (u = e[s + 1]) && "AN" !== u ? f = "N" : m && (u = "AN"), f = u === c ? u : "N";
            break;
          case "ES":
            f = "EN" === (c = s > 0 ? o[s - 1] : "B") && s + 1 < e.length && "EN" === e[s + 1] ? "EN" : "N";
            break;
          case "ET":
            if (s > 0 && "EN" === o[s - 1]) {
              f = "EN";
              break;
            }
            if (m) {
              f = "N";
              break;
            }
            for (h = s + 1, l = e.length; h < l && "ET" === e[h];) h++;
            f = h < l && "EN" === e[h] ? "EN" : "N";
            break;
          case "NSM":
            if (i && !a) {
              for (l = e.length, h = s + 1; h < l && "NSM" === e[h];) h++;
              if (h < l) {
                var d = t[s],
                  p = d >= 1425 && d <= 2303 || 64286 === d;
                if (c = e[h], p && ("R" === c || "AL" === c)) {
                  f = "R";
                  break;
                }
              }
            }
            f = s < 1 || "B" === (c = e[s - 1]) ? "N" : o[s - 1];
            break;
          case "B":
            m = !1, r = !0, f = v;
            break;
          case "S":
            n = !0, f = "N";
            break;
          case "LRE":
          case "RLE":
          case "LRO":
          case "RLO":
          case "PDF":
            m = !1;
            break;
          case "BN":
            f = "N";
        }
        return f;
      },
      N = function (t, e, r) {
        var n = t.split("");
        return r && L(n, r, {
          hiLevel: v
        }), n.reverse(), e && e.reverse(), n.join("");
      },
      L = function (t, e, i) {
        var a,
          o,
          s,
          c,
          u,
          d = -1,
          p = t.length,
          g = 0,
          y = [],
          N = v ? l : h,
          L = [];
        for (m = !1, r = !1, n = !1, o = 0; o < p; o++) L[o] = b(t[o]);
        for (s = 0; s < p; s++) {
          if (u = g, y[s] = w(t, L, y, s), a = 240 & (g = N[u][f[y[s]]]), g &= 15, e[s] = c = N[g][5], a > 0) if (16 === a) {
            for (o = d; o < s; o++) e[o] = 1;
            d = -1;
          } else d = -1;
          if (N[g][6]) -1 === d && (d = s);else if (d > -1) {
            for (o = d; o < s; o++) e[o] = c;
            d = -1;
          }
          "B" === L[s] && (e[s] = 0), i.hiLevel |= c;
        }
        n && function (t, e, r) {
          for (var n = 0; n < r; n++) if ("S" === t[n]) {
            e[n] = v;
            for (var i = n - 1; i >= 0 && "WS" === t[i]; i--) e[i] = v;
          }
        }(L, e, p);
      },
      A = function (t, e, n, i, a) {
        if (!(a.hiLevel < t)) {
          if (1 === t && 1 === v && !r) return e.reverse(), void (n && n.reverse());
          for (var o, s, c, u, h = e.length, l = 0; l < h;) {
            if (i[l] >= t) {
              for (c = l + 1; c < h && i[c] >= t;) c++;
              for (u = l, s = c - 1; u < s; u++, s--) o = e[u], e[u] = e[s], e[s] = o, n && (o = n[u], n[u] = n[s], n[s] = o);
              l = c;
            }
            l++;
          }
        }
      },
      x = function (t, e, r) {
        var n = t.split(""),
          i = {
            hiLevel: v
          };
        return r || (r = []), L(n, r, i), function (t, e, r) {
          if (0 !== r.hiLevel && c) for (var n, i = 0; i < t.length; i++) 1 === e[i] && (n = p.indexOf(t[i])) >= 0 && (t[i] = p[n + 1]);
        }(n, r, i), A(2, n, e, r, i), A(1, n, e, r, i), n.join("");
      };
    return this.__bidiEngine__.doBidiReorder = function (t, e, r) {
      if (function (t, e) {
        if (e) for (var r = 0; r < t.length; r++) e[r] = r;
        void 0 === a && (a = y(t)), void 0 === s && (s = y(t));
      }(t, e), i || !o || s) {
        if (i && o && a ^ s) v = a ? 1 : 0, t = N(t, e, r);else if (!i && o && s) v = a ? 1 : 0, t = x(t, e, r), t = N(t, e);else if (!i || a || o || s) {
          if (i && !o && a ^ s) t = N(t, e), a ? (v = 0, t = x(t, e, r)) : (v = 1, t = x(t, e, r), t = N(t, e));else if (i && a && !o && s) v = 1, t = x(t, e, r), t = N(t, e);else if (!i && !o && a ^ s) {
            var n = c;
            a ? (v = 1, t = x(t, e, r), v = 0, c = !1, t = x(t, e, r), c = n) : (v = 0, t = x(t, e, r), t = N(t, e), v = 1, c = !1, t = x(t, e, r), c = n, t = N(t, e));
          }
        } else v = 0, t = x(t, e, r);
      } else v = a ? 1 : 0, t = x(t, e, r);
      return t;
    }, this.__bidiEngine__.setOptions = function (t) {
      t && (i = t.isInputVisual, o = t.isOutputVisual, a = t.isInputRtl, s = t.isOutputRtl, c = t.isSymmetricSwapping);
    }, this.__bidiEngine__.setOptions(t), this.__bidiEngine__;
  };
  var e = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "N", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "L", "N", "N", "BN", "N", "N", "ET", "ET", "EN", "EN", "N", "L", "N", "N", "N", "EN", "L", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "N", "N", "N", "N", "N", "ET", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "NSM", "R", "NSM", "NSM", "R", "NSM", "NSM", "R", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AN", "AN", "AN", "AN", "AN", "AN", "N", "N", "AL", "ET", "ET", "AL", "CS", "AL", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "N", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "R", "N", "N", "N", "N", "R", "N", "N", "N", "N", "N", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "BN", "BN", "BN", "L", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "B", "LRE", "RLE", "PDF", "LRO", "RLO", "CS", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "BN", "BN", "BN", "BN", "BN", "N", "LRI", "RLI", "FSI", "PDI", "BN", "BN", "BN", "BN", "BN", "BN", "EN", "L", "N", "N", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "L", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "R", "NSM", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "ES", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "R", "R", "R", "R", "R", "N", "R", "N", "R", "R", "N", "R", "R", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "CS", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "ET", "N", "N", "ES", "ES", "N", "N", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "BN", "N", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "N", "N", "N", "ET", "ET", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N"],
    r = new t.__bidiEngine__({
      isInputVisual: !0
    });
  t.API.events.push(["postProcessText", function (t) {
    var e = t.text,
      n = (t.x, t.y, t.options || {}),
      i = (t.mutex, n.lang, []);
    if (n.isInputVisual = "boolean" != typeof n.isInputVisual || n.isInputVisual, r.setOptions(n), "[object Array]" === Object.prototype.toString.call(e)) {
      var a = 0;
      for (i = [], a = 0; a < e.length; a += 1) "[object Array]" === Object.prototype.toString.call(e[a]) ? i.push([r.doBidiReorder(e[a][0]), e[a][1], e[a][2]]) : i.push([r.doBidiReorder(e[a])]);
      t.text = i;
    } else t.text = r.doBidiReorder(e);
    r.setOptions({
      isInputVisual: !0
    });
  }]);
}(E), E.API.TTFFont = function () {
  function t(t) {
    var e;
    if (this.rawData = t, e = this.contents = new ne(t), this.contents.pos = 4, "ttcf" === e.readString(4)) throw new Error("TTCF not supported.");
    e.pos = 0, this.parse(), this.subset = new Le(this), this.registerTTF();
  }
  return t.open = function (e) {
    return new t(e);
  }, t.prototype.parse = function () {
    return this.directory = new ie(this.contents), this.head = new se(this), this.name = new pe(this), this.cmap = new ue(this), this.toUnicode = {}, this.hhea = new he(this), this.maxp = new ge(this), this.hmtx = new me(this), this.post = new fe(this), this.os2 = new le(this), this.loca = new Ne(this), this.glyf = new be(this), this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender, this.decender = this.os2.exists && this.os2.decender || this.hhea.decender, this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap, this.bbox = [this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax];
  }, t.prototype.registerTTF = function () {
    var t, e, r, n, i;
    if (this.scaleFactor = 1e3 / this.head.unitsPerEm, this.bbox = function () {
      var e, r, n, i;
      for (i = [], e = 0, r = (n = this.bbox).length; e < r; e++) t = n[e], i.push(Math.round(t * this.scaleFactor));
      return i;
    }.call(this), this.stemV = 0, this.post.exists ? (r = 255 & (n = this.post.italic_angle), 0 != (32768 & (e = n >> 16)) && (e = -(1 + (65535 ^ e))), this.italicAngle = +(e + "." + r)) : this.italicAngle = 0, this.ascender = Math.round(this.ascender * this.scaleFactor), this.decender = Math.round(this.decender * this.scaleFactor), this.lineGap = Math.round(this.lineGap * this.scaleFactor), this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender, this.xHeight = this.os2.exists && this.os2.xHeight || 0, this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8, this.isSerif = 1 === (i = this.familyClass) || 2 === i || 3 === i || 4 === i || 5 === i || 7 === i, this.isScript = 10 === this.familyClass, this.flags = 0, this.post.isFixedPitch && (this.flags |= 1), this.isSerif && (this.flags |= 2), this.isScript && (this.flags |= 8), 0 !== this.italicAngle && (this.flags |= 64), this.flags |= 32, !this.cmap.unicode) throw new Error("No unicode cmap for font");
  }, t.prototype.characterToGlyph = function (t) {
    var e;
    return (null != (e = this.cmap.unicode) ? e.codeMap[t] : void 0) || 0;
  }, t.prototype.widthOfGlyph = function (t) {
    var e;
    return e = 1e3 / this.head.unitsPerEm, this.hmtx.forGlyph(t).advance * e;
  }, t.prototype.widthOfString = function (t, e, r) {
    var n, i, a, o;
    for (a = 0, i = 0, o = (t = "" + t).length; 0 <= o ? i < o : i > o; i = 0 <= o ? ++i : --i) n = t.charCodeAt(i), a += this.widthOfGlyph(this.characterToGlyph(n)) + r * (1e3 / e) || 0;
    return a * (e / 1e3);
  }, t.prototype.lineHeight = function (t, e) {
    var r;
    return null == e && (e = !1), r = e ? this.lineGap : 0, (this.ascender + r - this.decender) / 1e3 * t;
  }, t;
}();
var re,
  ne = function () {
    function t(t) {
      this.data = null != t ? t : [], this.pos = 0, this.length = this.data.length;
    }
    return t.prototype.readByte = function () {
      return this.data[this.pos++];
    }, t.prototype.writeByte = function (t) {
      return this.data[this.pos++] = t;
    }, t.prototype.readUInt32 = function () {
      return 16777216 * this.readByte() + (this.readByte() << 16) + (this.readByte() << 8) + this.readByte();
    }, t.prototype.writeUInt32 = function (t) {
      return this.writeByte(t >>> 24 & 255), this.writeByte(t >> 16 & 255), this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
    }, t.prototype.readInt32 = function () {
      var t;
      return (t = this.readUInt32()) >= 2147483648 ? t - 4294967296 : t;
    }, t.prototype.writeInt32 = function (t) {
      return t < 0 && (t += 4294967296), this.writeUInt32(t);
    }, t.prototype.readUInt16 = function () {
      return this.readByte() << 8 | this.readByte();
    }, t.prototype.writeUInt16 = function (t) {
      return this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
    }, t.prototype.readInt16 = function () {
      var t;
      return (t = this.readUInt16()) >= 32768 ? t - 65536 : t;
    }, t.prototype.writeInt16 = function (t) {
      return t < 0 && (t += 65536), this.writeUInt16(t);
    }, t.prototype.readString = function (t) {
      var e, r;
      for (r = [], e = 0; 0 <= t ? e < t : e > t; e = 0 <= t ? ++e : --e) r[e] = String.fromCharCode(this.readByte());
      return r.join("");
    }, t.prototype.writeString = function (t) {
      var e, r, n;
      for (n = [], e = 0, r = t.length; 0 <= r ? e < r : e > r; e = 0 <= r ? ++e : --e) n.push(this.writeByte(t.charCodeAt(e)));
      return n;
    }, t.prototype.readShort = function () {
      return this.readInt16();
    }, t.prototype.writeShort = function (t) {
      return this.writeInt16(t);
    }, t.prototype.readLongLong = function () {
      var t, e, r, n, i, a, o, s;
      return t = this.readByte(), e = this.readByte(), r = this.readByte(), n = this.readByte(), i = this.readByte(), a = this.readByte(), o = this.readByte(), s = this.readByte(), 128 & t ? -1 * (72057594037927940 * (255 ^ t) + 281474976710656 * (255 ^ e) + 1099511627776 * (255 ^ r) + 4294967296 * (255 ^ n) + 16777216 * (255 ^ i) + 65536 * (255 ^ a) + 256 * (255 ^ o) + (255 ^ s) + 1) : 72057594037927940 * t + 281474976710656 * e + 1099511627776 * r + 4294967296 * n + 16777216 * i + 65536 * a + 256 * o + s;
    }, t.prototype.writeLongLong = function (t) {
      var e, r;
      return e = Math.floor(t / 4294967296), r = 4294967295 & t, this.writeByte(e >> 24 & 255), this.writeByte(e >> 16 & 255), this.writeByte(e >> 8 & 255), this.writeByte(255 & e), this.writeByte(r >> 24 & 255), this.writeByte(r >> 16 & 255), this.writeByte(r >> 8 & 255), this.writeByte(255 & r);
    }, t.prototype.readInt = function () {
      return this.readInt32();
    }, t.prototype.writeInt = function (t) {
      return this.writeInt32(t);
    }, t.prototype.read = function (t) {
      var e, r;
      for (e = [], r = 0; 0 <= t ? r < t : r > t; r = 0 <= t ? ++r : --r) e.push(this.readByte());
      return e;
    }, t.prototype.write = function (t) {
      var e, r, n, i;
      for (i = [], r = 0, n = t.length; r < n; r++) e = t[r], i.push(this.writeByte(e));
      return i;
    }, t;
  }(),
  ie = function () {
    var t;
    function e(t) {
      var e, r, n;
      for (this.scalarType = t.readInt(), this.tableCount = t.readShort(), this.searchRange = t.readShort(), this.entrySelector = t.readShort(), this.rangeShift = t.readShort(), this.tables = {}, r = 0, n = this.tableCount; 0 <= n ? r < n : r > n; r = 0 <= n ? ++r : --r) e = {
        tag: t.readString(4),
        checksum: t.readInt(),
        offset: t.readInt(),
        length: t.readInt()
      }, this.tables[e.tag] = e;
    }
    return e.prototype.encode = function (e) {
      var r, n, i, a, o, s, c, u, h, l, f, d, p;
      for (p in f = Object.keys(e).length, s = Math.log(2), h = 16 * Math.floor(Math.log(f) / s), a = Math.floor(h / s), u = 16 * f - h, (n = new ne()).writeInt(this.scalarType), n.writeShort(f), n.writeShort(h), n.writeShort(a), n.writeShort(u), i = 16 * f, c = n.pos + i, o = null, d = [], e) for (l = e[p], n.writeString(p), n.writeInt(t(l)), n.writeInt(c), n.writeInt(l.length), d = d.concat(l), "head" === p && (o = c), c += l.length; c % 4;) d.push(0), c++;
      return n.write(d), r = 2981146554 - t(n.data), n.pos = o + 8, n.writeUInt32(r), n.data;
    }, t = function (t) {
      var e, r, n, i;
      for (t = ve.call(t); t.length % 4;) t.push(0);
      for (n = new ne(t), r = 0, e = 0, i = t.length; e < i; e = e += 4) r += n.readUInt32();
      return 4294967295 & r;
    }, e;
  }(),
  ae = {}.hasOwnProperty,
  oe = function (t, e) {
    for (var r in e) ae.call(e, r) && (t[r] = e[r]);
    function n() {
      this.constructor = t;
    }
    return n.prototype = e.prototype, t.prototype = new n(), t.__super__ = e.prototype, t;
  };
re = function () {
  function t(t) {
    var e;
    this.file = t, e = this.file.directory.tables[this.tag], this.exists = !!e, e && (this.offset = e.offset, this.length = e.length, this.parse(this.file.contents));
  }
  return t.prototype.parse = function () {}, t.prototype.encode = function () {}, t.prototype.raw = function () {
    return this.exists ? (this.file.contents.pos = this.offset, this.file.contents.read(this.length)) : null;
  }, t;
}();
var se = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "head", e.prototype.parse = function (t) {
      return t.pos = this.offset, this.version = t.readInt(), this.revision = t.readInt(), this.checkSumAdjustment = t.readInt(), this.magicNumber = t.readInt(), this.flags = t.readShort(), this.unitsPerEm = t.readShort(), this.created = t.readLongLong(), this.modified = t.readLongLong(), this.xMin = t.readShort(), this.yMin = t.readShort(), this.xMax = t.readShort(), this.yMax = t.readShort(), this.macStyle = t.readShort(), this.lowestRecPPEM = t.readShort(), this.fontDirectionHint = t.readShort(), this.indexToLocFormat = t.readShort(), this.glyphDataFormat = t.readShort();
    }, e.prototype.encode = function (t) {
      var e;
      return (e = new ne()).writeInt(this.version), e.writeInt(this.revision), e.writeInt(this.checkSumAdjustment), e.writeInt(this.magicNumber), e.writeShort(this.flags), e.writeShort(this.unitsPerEm), e.writeLongLong(this.created), e.writeLongLong(this.modified), e.writeShort(this.xMin), e.writeShort(this.yMin), e.writeShort(this.xMax), e.writeShort(this.yMax), e.writeShort(this.macStyle), e.writeShort(this.lowestRecPPEM), e.writeShort(this.fontDirectionHint), e.writeShort(t), e.writeShort(this.glyphDataFormat), e.data;
    }, e;
  }(),
  ce = function () {
    function t(t, e) {
      var r, n, i, a, o, s, c, u, h, l, f, d, p, g, m, v, b;
      switch (this.platformID = t.readUInt16(), this.encodingID = t.readShort(), this.offset = e + t.readInt(), h = t.pos, t.pos = this.offset, this.format = t.readUInt16(), this.length = t.readUInt16(), this.language = t.readUInt16(), this.isUnicode = 3 === this.platformID && 1 === this.encodingID && 4 === this.format || 0 === this.platformID && 4 === this.format, this.codeMap = {}, this.format) {
        case 0:
          for (s = 0; s < 256; ++s) this.codeMap[s] = t.readByte();
          break;
        case 4:
          for (f = t.readUInt16(), l = f / 2, t.pos += 6, i = function () {
            var e, r;
            for (r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e) r.push(t.readUInt16());
            return r;
          }(), t.pos += 2, p = function () {
            var e, r;
            for (r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e) r.push(t.readUInt16());
            return r;
          }(), c = function () {
            var e, r;
            for (r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e) r.push(t.readUInt16());
            return r;
          }(), u = function () {
            var e, r;
            for (r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e) r.push(t.readUInt16());
            return r;
          }(), n = (this.length - t.pos + this.offset) / 2, o = function () {
            var e, r;
            for (r = [], s = e = 0; 0 <= n ? e < n : e > n; s = 0 <= n ? ++e : --e) r.push(t.readUInt16());
            return r;
          }(), s = m = 0, b = i.length; m < b; s = ++m) for (g = i[s], r = v = d = p[s]; d <= g ? v <= g : v >= g; r = d <= g ? ++v : --v) 0 === u[s] ? a = r + c[s] : 0 !== (a = o[u[s] / 2 + (r - d) - (l - s)] || 0) && (a += c[s]), this.codeMap[r] = 65535 & a;
      }
      t.pos = h;
    }
    return t.encode = function (t, e) {
      var r, n, i, a, o, s, c, u, h, l, f, d, p, g, m, v, b, y, w, N, L, A, x, S, _, P, k, I, F, C, j, O, B, M, E, q, D, R, T, U, z, H, W, V, G, Y;
      switch (I = new ne(), a = Object.keys(t).sort(function (t, e) {
        return t - e;
      }), e) {
        case "macroman":
          for (p = 0, g = function () {
            var t = [];
            for (d = 0; d < 256; ++d) t.push(0);
            return t;
          }(), v = {
            0: 0
          }, i = {}, F = 0, B = a.length; F < B; F++) null == v[W = t[n = a[F]]] && (v[W] = ++p), i[n] = {
            old: t[n],
            new: v[t[n]]
          }, g[n] = v[t[n]];
          return I.writeUInt16(1), I.writeUInt16(0), I.writeUInt32(12), I.writeUInt16(0), I.writeUInt16(262), I.writeUInt16(0), I.write(g), {
            charMap: i,
            subtable: I.data,
            maxGlyphID: p + 1
          };
        case "unicode":
          for (P = [], h = [], b = 0, v = {}, r = {}, m = c = null, C = 0, M = a.length; C < M; C++) null == v[w = t[n = a[C]]] && (v[w] = ++b), r[n] = {
            old: w,
            new: v[w]
          }, o = v[w] - n, null != m && o === c || (m && h.push(m), P.push(n), c = o), m = n;
          for (m && h.push(m), h.push(65535), P.push(65535), S = 2 * (x = P.length), A = 2 * Math.pow(Math.log(x) / Math.LN2, 2), l = Math.log(A / 2) / Math.LN2, L = 2 * x - A, s = [], N = [], f = [], d = j = 0, E = P.length; j < E; d = ++j) {
            if (_ = P[d], u = h[d], 65535 === _) {
              s.push(0), N.push(0);
              break;
            }
            if (_ - (k = r[_].new) >= 32768) for (s.push(0), N.push(2 * (f.length + x - d)), n = O = _; _ <= u ? O <= u : O >= u; n = _ <= u ? ++O : --O) f.push(r[n].new);else s.push(k - _), N.push(0);
          }
          for (I.writeUInt16(3), I.writeUInt16(1), I.writeUInt32(12), I.writeUInt16(4), I.writeUInt16(16 + 8 * x + 2 * f.length), I.writeUInt16(0), I.writeUInt16(S), I.writeUInt16(A), I.writeUInt16(l), I.writeUInt16(L), z = 0, q = h.length; z < q; z++) n = h[z], I.writeUInt16(n);
          for (I.writeUInt16(0), H = 0, D = P.length; H < D; H++) n = P[H], I.writeUInt16(n);
          for (V = 0, R = s.length; V < R; V++) o = s[V], I.writeUInt16(o);
          for (G = 0, T = N.length; G < T; G++) y = N[G], I.writeUInt16(y);
          for (Y = 0, U = f.length; Y < U; Y++) p = f[Y], I.writeUInt16(p);
          return {
            charMap: r,
            subtable: I.data,
            maxGlyphID: b + 1
          };
      }
    }, t;
  }(),
  ue = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "cmap", e.prototype.parse = function (t) {
      var e, r, n;
      for (t.pos = this.offset, this.version = t.readUInt16(), n = t.readUInt16(), this.tables = [], this.unicode = null, r = 0; 0 <= n ? r < n : r > n; r = 0 <= n ? ++r : --r) e = new ce(t, this.offset), this.tables.push(e), e.isUnicode && null == this.unicode && (this.unicode = e);
      return !0;
    }, e.encode = function (t, e) {
      var r, n;
      return null == e && (e = "macroman"), r = ce.encode(t, e), (n = new ne()).writeUInt16(0), n.writeUInt16(1), r.table = n.data.concat(r.subtable), r;
    }, e;
  }(),
  he = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "hhea", e.prototype.parse = function (t) {
      return t.pos = this.offset, this.version = t.readInt(), this.ascender = t.readShort(), this.decender = t.readShort(), this.lineGap = t.readShort(), this.advanceWidthMax = t.readShort(), this.minLeftSideBearing = t.readShort(), this.minRightSideBearing = t.readShort(), this.xMaxExtent = t.readShort(), this.caretSlopeRise = t.readShort(), this.caretSlopeRun = t.readShort(), this.caretOffset = t.readShort(), t.pos += 8, this.metricDataFormat = t.readShort(), this.numberOfMetrics = t.readUInt16();
    }, e;
  }(),
  le = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "OS/2", e.prototype.parse = function (t) {
      if (t.pos = this.offset, this.version = t.readUInt16(), this.averageCharWidth = t.readShort(), this.weightClass = t.readUInt16(), this.widthClass = t.readUInt16(), this.type = t.readShort(), this.ySubscriptXSize = t.readShort(), this.ySubscriptYSize = t.readShort(), this.ySubscriptXOffset = t.readShort(), this.ySubscriptYOffset = t.readShort(), this.ySuperscriptXSize = t.readShort(), this.ySuperscriptYSize = t.readShort(), this.ySuperscriptXOffset = t.readShort(), this.ySuperscriptYOffset = t.readShort(), this.yStrikeoutSize = t.readShort(), this.yStrikeoutPosition = t.readShort(), this.familyClass = t.readShort(), this.panose = function () {
        var e, r;
        for (r = [], e = 0; e < 10; ++e) r.push(t.readByte());
        return r;
      }(), this.charRange = function () {
        var e, r;
        for (r = [], e = 0; e < 4; ++e) r.push(t.readInt());
        return r;
      }(), this.vendorID = t.readString(4), this.selection = t.readShort(), this.firstCharIndex = t.readShort(), this.lastCharIndex = t.readShort(), this.version > 0 && (this.ascent = t.readShort(), this.descent = t.readShort(), this.lineGap = t.readShort(), this.winAscent = t.readShort(), this.winDescent = t.readShort(), this.codePageRange = function () {
        var e, r;
        for (r = [], e = 0; e < 2; e = ++e) r.push(t.readInt());
        return r;
      }(), this.version > 1)) return this.xHeight = t.readShort(), this.capHeight = t.readShort(), this.defaultChar = t.readShort(), this.breakChar = t.readShort(), this.maxContext = t.readShort();
    }, e;
  }(),
  fe = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "post", e.prototype.parse = function (t) {
      var e, r, n;
      switch (t.pos = this.offset, this.format = t.readInt(), this.italicAngle = t.readInt(), this.underlinePosition = t.readShort(), this.underlineThickness = t.readShort(), this.isFixedPitch = t.readInt(), this.minMemType42 = t.readInt(), this.maxMemType42 = t.readInt(), this.minMemType1 = t.readInt(), this.maxMemType1 = t.readInt(), this.format) {
        case 65536:
          break;
        case 131072:
          var i;
          for (r = t.readUInt16(), this.glyphNameIndex = [], i = 0; 0 <= r ? i < r : i > r; i = 0 <= r ? ++i : --i) this.glyphNameIndex.push(t.readUInt16());
          for (this.names = [], n = []; t.pos < this.offset + this.length;) e = t.readByte(), n.push(this.names.push(t.readString(e)));
          return n;
        case 151552:
          return r = t.readUInt16(), this.offsets = t.read(r);
        case 196608:
          break;
        case 262144:
          return this.map = function () {
            var e, r, n;
            for (n = [], i = e = 0, r = this.file.maxp.numGlyphs; 0 <= r ? e < r : e > r; i = 0 <= r ? ++e : --e) n.push(t.readUInt32());
            return n;
          }.call(this);
      }
    }, e;
  }(),
  de = function (t, e) {
    this.raw = t, this.length = t.length, this.platformID = e.platformID, this.encodingID = e.encodingID, this.languageID = e.languageID;
  },
  pe = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "name", e.prototype.parse = function (t) {
      var e, r, n, i, a, o, s, c, u, h, l;
      for (t.pos = this.offset, t.readShort(), e = t.readShort(), o = t.readShort(), r = [], i = 0; 0 <= e ? i < e : i > e; i = 0 <= e ? ++i : --i) r.push({
        platformID: t.readShort(),
        encodingID: t.readShort(),
        languageID: t.readShort(),
        nameID: t.readShort(),
        length: t.readShort(),
        offset: this.offset + o + t.readShort()
      });
      for (s = {}, i = u = 0, h = r.length; u < h; i = ++u) n = r[i], t.pos = n.offset, c = t.readString(n.length), a = new de(c, n), null == s[l = n.nameID] && (s[l] = []), s[n.nameID].push(a);
      this.strings = s, this.copyright = s[0], this.fontFamily = s[1], this.fontSubfamily = s[2], this.uniqueSubfamily = s[3], this.fontName = s[4], this.version = s[5];
      try {
        this.postscriptName = s[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
      } catch (t) {
        this.postscriptName = s[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
      }
      return this.trademark = s[7], this.manufacturer = s[8], this.designer = s[9], this.description = s[10], this.vendorUrl = s[11], this.designerUrl = s[12], this.license = s[13], this.licenseUrl = s[14], this.preferredFamily = s[15], this.preferredSubfamily = s[17], this.compatibleFull = s[18], this.sampleText = s[19];
    }, e;
  }(),
  ge = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "maxp", e.prototype.parse = function (t) {
      return t.pos = this.offset, this.version = t.readInt(), this.numGlyphs = t.readUInt16(), this.maxPoints = t.readUInt16(), this.maxContours = t.readUInt16(), this.maxCompositePoints = t.readUInt16(), this.maxComponentContours = t.readUInt16(), this.maxZones = t.readUInt16(), this.maxTwilightPoints = t.readUInt16(), this.maxStorage = t.readUInt16(), this.maxFunctionDefs = t.readUInt16(), this.maxInstructionDefs = t.readUInt16(), this.maxStackElements = t.readUInt16(), this.maxSizeOfInstructions = t.readUInt16(), this.maxComponentElements = t.readUInt16(), this.maxComponentDepth = t.readUInt16();
    }, e;
  }(),
  me = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "hmtx", e.prototype.parse = function (t) {
      var e, r, n, i, a, o, s;
      for (t.pos = this.offset, this.metrics = [], e = 0, o = this.file.hhea.numberOfMetrics; 0 <= o ? e < o : e > o; e = 0 <= o ? ++e : --e) this.metrics.push({
        advance: t.readUInt16(),
        lsb: t.readInt16()
      });
      for (n = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics, this.leftSideBearings = function () {
        var r, i;
        for (i = [], e = r = 0; 0 <= n ? r < n : r > n; e = 0 <= n ? ++r : --r) i.push(t.readInt16());
        return i;
      }(), this.widths = function () {
        var t, e, r, n;
        for (n = [], t = 0, e = (r = this.metrics).length; t < e; t++) i = r[t], n.push(i.advance);
        return n;
      }.call(this), r = this.widths[this.widths.length - 1], s = [], e = a = 0; 0 <= n ? a < n : a > n; e = 0 <= n ? ++a : --a) s.push(this.widths.push(r));
      return s;
    }, e.prototype.forGlyph = function (t) {
      return t in this.metrics ? this.metrics[t] : {
        advance: this.metrics[this.metrics.length - 1].advance,
        lsb: this.leftSideBearings[t - this.metrics.length]
      };
    }, e;
  }(),
  ve = [].slice,
  be = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "glyf", e.prototype.parse = function () {
      return this.cache = {};
    }, e.prototype.glyphFor = function (t) {
      var e, r, n, i, a, o, s, c, u, h;
      return t in this.cache ? this.cache[t] : (i = this.file.loca, e = this.file.contents, r = i.indexOf(t), 0 === (n = i.lengthOf(t)) ? this.cache[t] = null : (e.pos = this.offset + r, a = (o = new ne(e.read(n))).readShort(), c = o.readShort(), h = o.readShort(), s = o.readShort(), u = o.readShort(), this.cache[t] = -1 === a ? new we(o, c, h, s, u) : new ye(o, a, c, h, s, u), this.cache[t]));
    }, e.prototype.encode = function (t, e, r) {
      var n, i, a, o, s;
      for (a = [], i = [], o = 0, s = e.length; o < s; o++) n = t[e[o]], i.push(a.length), n && (a = a.concat(n.encode(r)));
      return i.push(a.length), {
        table: a,
        offsets: i
      };
    }, e;
  }(),
  ye = function () {
    function t(t, e, r, n, i, a) {
      this.raw = t, this.numberOfContours = e, this.xMin = r, this.yMin = n, this.xMax = i, this.yMax = a, this.compound = !1;
    }
    return t.prototype.encode = function () {
      return this.raw.data;
    }, t;
  }(),
  we = function () {
    function t(t, e, r, n, i) {
      var a, o;
      for (this.raw = t, this.xMin = e, this.yMin = r, this.xMax = n, this.yMax = i, this.compound = !0, this.glyphIDs = [], this.glyphOffsets = [], a = this.raw; o = a.readShort(), this.glyphOffsets.push(a.pos), this.glyphIDs.push(a.readUInt16()), 32 & o;) a.pos += 1 & o ? 4 : 2, 128 & o ? a.pos += 8 : 64 & o ? a.pos += 4 : 8 & o && (a.pos += 2);
    }
    return 1, 8, 32, 64, 128, t.prototype.encode = function () {
      var t, e, r;
      for (e = new ne(ve.call(this.raw.data)), t = 0, r = this.glyphIDs.length; t < r; ++t) e.pos = this.glyphOffsets[t];
      return e.data;
    }, t;
  }(),
  Ne = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "loca", e.prototype.parse = function (t) {
      var e, r;
      return t.pos = this.offset, e = this.file.head.indexToLocFormat, this.offsets = 0 === e ? function () {
        var e, n;
        for (n = [], r = 0, e = this.length; r < e; r += 2) n.push(2 * t.readUInt16());
        return n;
      }.call(this) : function () {
        var e, n;
        for (n = [], r = 0, e = this.length; r < e; r += 4) n.push(t.readUInt32());
        return n;
      }.call(this);
    }, e.prototype.indexOf = function (t) {
      return this.offsets[t];
    }, e.prototype.lengthOf = function (t) {
      return this.offsets[t + 1] - this.offsets[t];
    }, e.prototype.encode = function (t, e) {
      for (var r = new Uint32Array(this.offsets.length), n = 0, i = 0, a = 0; a < r.length; ++a) if (r[a] = n, i < e.length && e[i] == a) {
        ++i, r[a] = n;
        var o = this.offsets[a],
          s = this.offsets[a + 1] - o;
        s > 0 && (n += s);
      }
      for (var c = new Array(4 * r.length), u = 0; u < r.length; ++u) c[4 * u + 3] = 255 & r[u], c[4 * u + 2] = (65280 & r[u]) >> 8, c[4 * u + 1] = (16711680 & r[u]) >> 16, c[4 * u] = (4278190080 & r[u]) >> 24;
      return c;
    }, e;
  }(),
  Le = function () {
    function t(t) {
      this.font = t, this.subset = {}, this.unicodes = {}, this.next = 33;
    }
    return t.prototype.generateCmap = function () {
      var t, e, r, n, i;
      for (e in n = this.font.cmap.tables[0].codeMap, t = {}, i = this.subset) r = i[e], t[e] = n[r];
      return t;
    }, t.prototype.glyphsFor = function (t) {
      var e, r, n, i, a, o, s;
      for (n = {}, a = 0, o = t.length; a < o; a++) n[i = t[a]] = this.font.glyf.glyphFor(i);
      for (i in e = [], n) (null != (r = n[i]) ? r.compound : void 0) && e.push.apply(e, r.glyphIDs);
      if (e.length > 0) for (i in s = this.glyphsFor(e)) r = s[i], n[i] = r;
      return n;
    }, t.prototype.encode = function (t, e) {
      var r, n, i, a, o, s, c, u, h, l, f, d, p, g, m;
      for (n in r = ue.encode(this.generateCmap(), "unicode"), a = this.glyphsFor(t), f = {
        0: 0
      }, m = r.charMap) f[(s = m[n]).old] = s.new;
      for (d in l = r.maxGlyphID, a) d in f || (f[d] = l++);
      return u = function (t) {
        var e, r;
        for (e in r = {}, t) r[t[e]] = e;
        return r;
      }(f), h = Object.keys(u).sort(function (t, e) {
        return t - e;
      }), p = function () {
        var t, e, r;
        for (r = [], t = 0, e = h.length; t < e; t++) o = h[t], r.push(u[o]);
        return r;
      }(), i = this.font.glyf.encode(a, p, f), c = this.font.loca.encode(i.offsets, p), g = {
        cmap: this.font.cmap.raw(),
        glyf: i.table,
        loca: c,
        hmtx: this.font.hmtx.raw(),
        hhea: this.font.hhea.raw(),
        maxp: this.font.maxp.raw(),
        post: this.font.post.raw(),
        name: this.font.name.raw(),
        head: this.font.head.encode(e)
      }, this.font.os2.exists && (g["OS/2"] = this.font.os2.raw()), this.font.directory.encode(g);
    }, t;
  }();
E.API.PDFObject = function () {
  var t;
  function e() {}
  return t = function (t, e) {
    return (Array(e + 1).join("0") + t).slice(-e);
  }, e.convert = function (r) {
    var n, i, a, o;
    if (Array.isArray(r)) return "[" + function () {
      var t, i, a;
      for (a = [], t = 0, i = r.length; t < i; t++) n = r[t], a.push(e.convert(n));
      return a;
    }().join(" ") + "]";
    if ("string" == typeof r) return "/" + r;
    if (null != r ? r.isString : void 0) return "(" + r + ")";
    if (r instanceof Date) return "(D:" + t(r.getUTCFullYear(), 4) + t(r.getUTCMonth(), 2) + t(r.getUTCDate(), 2) + t(r.getUTCHours(), 2) + t(r.getUTCMinutes(), 2) + t(r.getUTCSeconds(), 2) + "Z)";
    if ("[object Object]" === {}.toString.call(r)) {
      for (i in a = ["<<"], r) o = r[i], a.push("/" + i + " " + e.convert(o));
      return a.push(">>"), a.join("\n");
    }
    return "" + r;
  }, e;
}();
var _default = E;
exports.default = _default;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"@babel/runtime/helpers/typeof":1,"fflate":2}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global_1 = require("./Global");
var now = (function () {
    if (Global_1.glob.performance && Global_1.glob.performance.now) {
        return function () {
            return Global_1.glob.performance.now();
        };
    }
    return function () {
        return new Date().getTime();
    };
})();
var Animation = (function () {
    function Animation(func, layers) {
        this.id = Animation.animIdCounter++;
        this.frame = {
            time: 0,
            timeDiff: 0,
            lastTime: now(),
            frameRate: 0
        };
        this.func = func;
        this.setLayers(layers);
    }
    Animation.prototype.setLayers = function (layers) {
        var lays = [];
        if (!layers) {
            lays = [];
        }
        else if (layers.length > 0) {
            lays = layers;
        }
        else {
            lays = [layers];
        }
        this.layers = lays;
        return this;
    };
    Animation.prototype.getLayers = function () {
        return this.layers;
    };
    Animation.prototype.addLayer = function (layer) {
        var layers = this.layers, len = layers.length, n;
        for (n = 0; n < len; n++) {
            if (layers[n]._id === layer._id) {
                return false;
            }
        }
        this.layers.push(layer);
        return true;
    };
    Animation.prototype.isRunning = function () {
        var a = Animation, animations = a.animations, len = animations.length, n;
        for (n = 0; n < len; n++) {
            if (animations[n].id === this.id) {
                return true;
            }
        }
        return false;
    };
    Animation.prototype.start = function () {
        this.stop();
        this.frame.timeDiff = 0;
        this.frame.lastTime = now();
        Animation._addAnimation(this);
        return this;
    };
    Animation.prototype.stop = function () {
        Animation._removeAnimation(this);
        return this;
    };
    Animation.prototype._updateFrameObject = function (time) {
        this.frame.timeDiff = time - this.frame.lastTime;
        this.frame.lastTime = time;
        this.frame.time += this.frame.timeDiff;
        this.frame.frameRate = 1000 / this.frame.timeDiff;
    };
    Animation._addAnimation = function (anim) {
        this.animations.push(anim);
        this._handleAnimation();
    };
    Animation._removeAnimation = function (anim) {
        var id = anim.id, animations = this.animations, len = animations.length, n;
        for (n = 0; n < len; n++) {
            if (animations[n].id === id) {
                this.animations.splice(n, 1);
                break;
            }
        }
    };
    Animation._runFrames = function () {
        var layerHash = {}, animations = this.animations, anim, layers, func, n, i, layersLen, layer, key, needRedraw;
        for (n = 0; n < animations.length; n++) {
            anim = animations[n];
            layers = anim.layers;
            func = anim.func;
            anim._updateFrameObject(now());
            layersLen = layers.length;
            if (func) {
                needRedraw = func.call(anim, anim.frame) !== false;
            }
            else {
                needRedraw = true;
            }
            if (!needRedraw) {
                continue;
            }
            for (i = 0; i < layersLen; i++) {
                layer = layers[i];
                if (layer._id !== undefined) {
                    layerHash[layer._id] = layer;
                }
            }
        }
        for (key in layerHash) {
            if (!layerHash.hasOwnProperty(key)) {
                continue;
            }
            layerHash[key].draw();
        }
    };
    Animation._animationLoop = function () {
        var Anim = Animation;
        if (Anim.animations.length) {
            Anim._runFrames();
            requestAnimationFrame(Anim._animationLoop);
        }
        else {
            Anim.animRunning = false;
        }
    };
    Animation._handleAnimation = function () {
        if (!this.animRunning) {
            this.animRunning = true;
            requestAnimationFrame(this._animationLoop);
        }
    };
    Animation.animations = [];
    Animation.animIdCounter = 0;
    Animation.animRunning = false;
    return Animation;
}());
exports.Animation = Animation;

},{"./Global":14}],7:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Container_1 = require("./Container");
var Node_1 = require("./Node");
var Factory_1 = require("./Factory");
var Canvas_1 = require("./Canvas");
var BaseLayer = (function (_super) {
    __extends(BaseLayer, _super);
    function BaseLayer(config) {
        var _this = _super.call(this, config) || this;
        _this.canvas = new Canvas_1.SceneCanvas();
        _this._waitingForDraw = false;
        _this.on('visibleChange', _this._checkVisibility);
        _this._checkVisibility();
        _this.on('imageSmoothingEnabledChange', _this._setSmoothEnabled);
        _this._setSmoothEnabled();
        return _this;
    }
    BaseLayer.prototype.createPNGStream = function () {
        var c = this.canvas._canvas;
        return c.createPNGStream();
    };
    BaseLayer.prototype.getCanvas = function () {
        return this.canvas;
    };
    BaseLayer.prototype.getHitCanvas = function () {
        return this.hitCanvas;
    };
    BaseLayer.prototype.getContext = function () {
        return this.getCanvas().getContext();
    };
    BaseLayer.prototype.clear = function (bounds) {
        this.getContext().clear(bounds);
        return this;
    };
    BaseLayer.prototype.setZIndex = function (index) {
        _super.prototype.setZIndex.call(this, index);
        var stage = this.getStage();
        if (stage) {
            stage.content.removeChild(this.getCanvas()._canvas);
            if (index < stage.children.length - 1) {
                stage.content.insertBefore(this.getCanvas()._canvas, stage.children[index + 1].getCanvas()._canvas);
            }
            else {
                stage.content.appendChild(this.getCanvas()._canvas);
            }
        }
        return this;
    };
    BaseLayer.prototype.moveToTop = function () {
        Node_1.Node.prototype.moveToTop.call(this);
        var stage = this.getStage();
        if (stage) {
            stage.content.removeChild(this.getCanvas()._canvas);
            stage.content.appendChild(this.getCanvas()._canvas);
        }
        return true;
    };
    BaseLayer.prototype.moveUp = function () {
        var moved = Node_1.Node.prototype.moveUp.call(this);
        if (!moved) {
            return false;
        }
        var stage = this.getStage();
        if (!stage) {
            return false;
        }
        stage.content.removeChild(this.getCanvas()._canvas);
        if (this.index < stage.children.length - 1) {
            stage.content.insertBefore(this.getCanvas()._canvas, stage.children[this.index + 1].getCanvas()._canvas);
        }
        else {
            stage.content.appendChild(this.getCanvas()._canvas);
        }
        return true;
    };
    BaseLayer.prototype.moveDown = function () {
        if (Node_1.Node.prototype.moveDown.call(this)) {
            var stage = this.getStage();
            if (stage) {
                var children = stage.children;
                stage.content.removeChild(this.getCanvas()._canvas);
                stage.content.insertBefore(this.getCanvas()._canvas, children[this.index + 1].getCanvas()._canvas);
            }
            return true;
        }
        return false;
    };
    BaseLayer.prototype.moveToBottom = function () {
        if (Node_1.Node.prototype.moveToBottom.call(this)) {
            var stage = this.getStage();
            if (stage) {
                var children = stage.children;
                stage.content.removeChild(this.getCanvas()._canvas);
                stage.content.insertBefore(this.getCanvas()._canvas, children[1].getCanvas()._canvas);
            }
            return true;
        }
        return false;
    };
    BaseLayer.prototype.getLayer = function () {
        return this;
    };
    BaseLayer.prototype.hitGraphEnabled = function () {
        return true;
    };
    BaseLayer.prototype.remove = function () {
        var _canvas = this.getCanvas()._canvas;
        Node_1.Node.prototype.remove.call(this);
        if (_canvas && _canvas.parentNode && Util_1.Util._isInDocument(_canvas)) {
            _canvas.parentNode.removeChild(_canvas);
        }
        return this;
    };
    BaseLayer.prototype.getStage = function () {
        return this.parent;
    };
    BaseLayer.prototype.setSize = function (_a) {
        var width = _a.width, height = _a.height;
        this.canvas.setSize(width, height);
        this._setSmoothEnabled();
        return this;
    };
    BaseLayer.prototype._toKonvaCanvas = function (config) {
        config = config || {};
        config.width = config.width || this.getWidth();
        config.height = config.height || this.getHeight();
        config.x = config.x !== undefined ? config.x : this.x();
        config.y = config.y !== undefined ? config.y : this.y();
        return Node_1.Node.prototype._toKonvaCanvas.call(this, config);
    };
    BaseLayer.prototype._checkVisibility = function () {
        var visible = this.visible();
        if (visible) {
            this.canvas._canvas.style.display = 'block';
        }
        else {
            this.canvas._canvas.style.display = 'none';
        }
    };
    BaseLayer.prototype._setSmoothEnabled = function () {
        this.getContext()._context.imageSmoothingEnabled = this.imageSmoothingEnabled();
    };
    BaseLayer.prototype.getWidth = function () {
        if (this.parent) {
            return this.parent.width();
        }
    };
    BaseLayer.prototype.setWidth = function () {
        Util_1.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.');
    };
    BaseLayer.prototype.getHeight = function () {
        if (this.parent) {
            return this.parent.height();
        }
    };
    BaseLayer.prototype.setHeight = function () {
        Util_1.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.');
    };
    BaseLayer.prototype.getIntersection = function (pos, selector) {
        return null;
    };
    BaseLayer.prototype.batchDraw = function () {
        var _this = this;
        if (!this._waitingForDraw) {
            this._waitingForDraw = true;
            Util_1.Util.requestAnimFrame(function () {
                _this.draw();
                _this._waitingForDraw = false;
            });
        }
        return this;
    };
    BaseLayer.prototype._applyTransform = function (shape, context, top) {
        var m = shape.getAbsoluteTransform(top).getMatrix();
        context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
    };
    return BaseLayer;
}(Container_1.Container));
exports.BaseLayer = BaseLayer;
BaseLayer.prototype.nodeType = 'BaseLayer';
Factory_1.Factory.addGetterSetter(BaseLayer, 'imageSmoothingEnabled', true);
Factory_1.Factory.addGetterSetter(BaseLayer, 'clearBeforeDraw', true);
Util_1.Collection.mapMethods(BaseLayer);

},{"./Canvas":8,"./Container":9,"./Factory":12,"./Node":17,"./Util":22}],8:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Context_1 = require("./Context");
var Global_1 = require("./Global");
var Factory_1 = require("./Factory");
var Validators_1 = require("./Validators");
var _pixelRatio;
function getDevicePixelRatio() {
    if (_pixelRatio) {
        return _pixelRatio;
    }
    var canvas = Util_1.Util.createCanvasElement();
    var context = canvas.getContext('2d');
    _pixelRatio = (function () {
        var devicePixelRatio = Global_1.Konva._global.devicePixelRatio || 1, backingStoreRatio = context.webkitBackingStorePixelRatio ||
            context.mozBackingStorePixelRatio ||
            context.msBackingStorePixelRatio ||
            context.oBackingStorePixelRatio ||
            context.backingStorePixelRatio ||
            1;
        return devicePixelRatio / backingStoreRatio;
    })();
    return _pixelRatio;
}
var Canvas = (function () {
    function Canvas(config) {
        this.pixelRatio = 1;
        this.width = 0;
        this.height = 0;
        this.isCache = false;
        var conf = config || {};
        var pixelRatio = conf.pixelRatio || Global_1.Konva.pixelRatio || getDevicePixelRatio();
        this.pixelRatio = pixelRatio;
        this._canvas = Util_1.Util.createCanvasElement();
        this._canvas.style.padding = '0';
        this._canvas.style.margin = '0';
        this._canvas.style.border = '0';
        this._canvas.style.background = 'transparent';
        this._canvas.style.position = 'absolute';
        this._canvas.style.top = '0';
        this._canvas.style.left = '0';
    }
    Canvas.prototype.getContext = function () {
        return this.context;
    };
    Canvas.prototype.getPixelRatio = function () {
        return this.pixelRatio;
    };
    Canvas.prototype.setPixelRatio = function (pixelRatio) {
        var previousRatio = this.pixelRatio;
        this.pixelRatio = pixelRatio;
        this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);
    };
    Canvas.prototype.setWidth = function (width) {
        this.width = this._canvas.width = width * this.pixelRatio;
        this._canvas.style.width = width + 'px';
        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;
        _context.scale(pixelRatio, pixelRatio);
    };
    Canvas.prototype.setHeight = function (height) {
        this.height = this._canvas.height = height * this.pixelRatio;
        this._canvas.style.height = height + 'px';
        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;
        _context.scale(pixelRatio, pixelRatio);
    };
    Canvas.prototype.getWidth = function () {
        return this.width;
    };
    Canvas.prototype.getHeight = function () {
        return this.height;
    };
    Canvas.prototype.setSize = function (width, height) {
        this.setWidth(width || 0);
        this.setHeight(height || 0);
    };
    Canvas.prototype.toDataURL = function (mimeType, quality) {
        try {
            return this._canvas.toDataURL(mimeType, quality);
        }
        catch (e) {
            try {
                return this._canvas.toDataURL();
            }
            catch (err) {
                Util_1.Util.error('Unable to get data URL. ' +
                    err.message +
                    ' For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html.');
                return '';
            }
        }
    };
    return Canvas;
}());
exports.Canvas = Canvas;
Factory_1.Factory.addGetterSetter(Canvas, 'pixelRatio', undefined, Validators_1.getNumberValidator());
var SceneCanvas = (function (_super) {
    __extends(SceneCanvas, _super);
    function SceneCanvas(config) {
        if (config === void 0) { config = { width: 0, height: 0 }; }
        var _this = _super.call(this, config) || this;
        _this.context = new Context_1.SceneContext(_this);
        _this.setSize(config.width, config.height);
        return _this;
    }
    return SceneCanvas;
}(Canvas));
exports.SceneCanvas = SceneCanvas;
var HitCanvas = (function (_super) {
    __extends(HitCanvas, _super);
    function HitCanvas(config) {
        if (config === void 0) { config = { width: 0, height: 0 }; }
        var _this = _super.call(this, config) || this;
        _this.hitCanvas = true;
        _this.context = new Context_1.HitContext(_this);
        _this.setSize(config.width, config.height);
        return _this;
    }
    return HitCanvas;
}(Canvas));
exports.HitCanvas = HitCanvas;

},{"./Context":10,"./Factory":12,"./Global":14,"./Util":22,"./Validators":23}],9:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Factory_1 = require("./Factory");
var Node_1 = require("./Node");
var DragAndDrop_1 = require("./DragAndDrop");
var Validators_1 = require("./Validators");
var Global_1 = require("./Global");
var Container = (function (_super) {
    __extends(Container, _super);
    function Container() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.children = new Util_1.Collection();
        return _this;
    }
    Container.prototype.getChildren = function (filterFunc) {
        if (!filterFunc) {
            return this.children;
        }
        var results = new Util_1.Collection();
        this.children.each(function (child) {
            if (filterFunc(child)) {
                results.push(child);
            }
        });
        return results;
    };
    Container.prototype.hasChildren = function () {
        return this.getChildren().length > 0;
    };
    Container.prototype.removeChildren = function () {
        var child;
        for (var i = 0; i < this.children.length; i++) {
            child = this.children[i];
            child.parent = null;
            child.index = 0;
            child.remove();
        }
        this.children = new Util_1.Collection();
        return this;
    };
    Container.prototype.destroyChildren = function () {
        var child;
        for (var i = 0; i < this.children.length; i++) {
            child = this.children[i];
            child.parent = null;
            child.index = 0;
            child.destroy();
        }
        this.children = new Util_1.Collection();
        return this;
    };
    Container.prototype.add = function () {
        var children = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            children[_i] = arguments[_i];
        }
        if (arguments.length > 1) {
            for (var i = 0; i < arguments.length; i++) {
                this.add(arguments[i]);
            }
            return this;
        }
        var child = children[0];
        if (child.getParent()) {
            child.moveTo(this);
            return this;
        }
        var _children = this.children;
        this._validateAdd(child);
        child._clearCaches();
        child.index = _children.length;
        child.parent = this;
        _children.push(child);
        this._fire('add', {
            child: child
        });
        return this;
    };
    Container.prototype.destroy = function () {
        if (this.hasChildren()) {
            this.destroyChildren();
        }
        _super.prototype.destroy.call(this);
        return this;
    };
    Container.prototype.find = function (selector) {
        return this._generalFind(selector, false);
    };
    Container.prototype.get = function (selector) {
        Util_1.Util.warn('collection.get() method is deprecated. Please use collection.find() instead.');
        return this.find(selector);
    };
    Container.prototype.findOne = function (selector) {
        var result = this._generalFind(selector, true);
        return result.length > 0 ? result[0] : undefined;
    };
    Container.prototype._generalFind = function (selector, findOne) {
        var retArr = [];
        this._descendants(function (node) {
            var valid = node._isMatch(selector);
            if (valid) {
                retArr.push(node);
            }
            if (valid && findOne) {
                return true;
            }
            return false;
        });
        return Util_1.Collection.toCollection(retArr);
    };
    Container.prototype._descendants = function (fn) {
        var shouldStop = false;
        for (var i = 0; i < this.children.length; i++) {
            var child = this.children[i];
            shouldStop = fn(child);
            if (shouldStop) {
                return true;
            }
            if (!child.hasChildren()) {
                continue;
            }
            shouldStop = child._descendants(fn);
            if (shouldStop) {
                return true;
            }
        }
        return false;
    };
    Container.prototype.toObject = function () {
        var obj = Node_1.Node.prototype.toObject.call(this);
        obj.children = [];
        var children = this.getChildren();
        var len = children.length;
        for (var n = 0; n < len; n++) {
            var child = children[n];
            obj.children.push(child.toObject());
        }
        return obj;
    };
    Container.prototype.isAncestorOf = function (node) {
        var parent = node.getParent();
        while (parent) {
            if (parent._id === this._id) {
                return true;
            }
            parent = parent.getParent();
        }
        return false;
    };
    Container.prototype.clone = function (obj) {
        var node = Node_1.Node.prototype.clone.call(this, obj);
        this.getChildren().each(function (no) {
            node.add(no.clone());
        });
        return node;
    };
    Container.prototype.getAllIntersections = function (pos) {
        var arr = [];
        this.find('Shape').each(function (shape) {
            if (shape.isVisible() && shape.intersects(pos)) {
                arr.push(shape);
            }
        });
        return arr;
    };
    Container.prototype._setChildrenIndices = function () {
        this.children.each(function (child, n) {
            child.index = n;
        });
    };
    Container.prototype.drawScene = function (can, top, caching) {
        var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas()), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedSceneCanvas = cachedCanvas && cachedCanvas.scene;
        if (this.isVisible() || caching) {
            if (!caching && cachedSceneCanvas) {
                context.save();
                layer._applyTransform(this, context, top);
                this._drawCachedSceneCanvas(context);
                context.restore();
            }
            else {
                this._drawChildren(canvas, 'drawScene', top, false, caching, caching);
            }
        }
        return this;
    };
    Container.prototype.drawHit = function (can, top, caching) {
        var layer = this.getLayer(), canvas = can || (layer && layer.hitCanvas), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;
        if (this.shouldDrawHit(canvas) || caching) {
            if (!caching && cachedHitCanvas) {
                context.save();
                layer._applyTransform(this, context, top);
                this._drawCachedHitCanvas(context);
                context.restore();
            }
            else {
                this._drawChildren(canvas, 'drawHit', top, false, caching, caching);
            }
        }
        return this;
    };
    Container.prototype._drawChildren = function (canvas, drawMethod, top, caching, skipBuffer, skipComposition) {
        var layer = this.getLayer(), context = canvas && canvas.getContext(), clipWidth = this.clipWidth(), clipHeight = this.clipHeight(), clipFunc = this.clipFunc(), hasClip = (clipWidth && clipHeight) || clipFunc, clipX, clipY;
        if (hasClip && layer) {
            context.save();
            var transform = this.getAbsoluteTransform(top);
            var m = transform.getMatrix();
            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
            context.beginPath();
            if (clipFunc) {
                clipFunc.call(this, context, this);
            }
            else {
                clipX = this.clipX();
                clipY = this.clipY();
                context.rect(clipX, clipY, clipWidth, clipHeight);
            }
            context.clip();
            m = transform
                .copy()
                .invert()
                .getMatrix();
            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
        }
        var hasComposition = this.globalCompositeOperation() !== 'source-over' &&
            !skipComposition &&
            drawMethod === 'drawScene';
        if (hasComposition && layer) {
            context.save();
            context._applyGlobalCompositeOperation(this);
        }
        this.children.each(function (child) {
            child[drawMethod](canvas, top, caching, skipBuffer);
        });
        if (hasComposition && layer) {
            context.restore();
        }
        if (hasClip && layer) {
            context.restore();
        }
    };
    Container.prototype.shouldDrawHit = function (canvas) {
        if (canvas && canvas.isCache) {
            return true;
        }
        var layer = this.getLayer();
        var layerUnderDrag = false;
        DragAndDrop_1.DD._dragElements.forEach(function (elem) {
            if (elem.dragStatus === 'dragging' && elem.node.getLayer() === layer) {
                layerUnderDrag = true;
            }
        });
        var dragSkip = !Global_1.Konva.hitOnDragEnabled && layerUnderDrag;
        return layer && layer.hitGraphEnabled() && this.isVisible() && !dragSkip;
    };
    Container.prototype.getClientRect = function (config) {
        config = config || {};
        var skipTransform = config.skipTransform;
        var relativeTo = config.relativeTo;
        var minX, minY, maxX, maxY;
        var selfRect = {
            x: Infinity,
            y: Infinity,
            width: 0,
            height: 0
        };
        var that = this;
        this.children.each(function (child) {
            if (!child.visible()) {
                return;
            }
            var rect = child.getClientRect({
                relativeTo: that,
                skipShadow: config.skipShadow,
                skipStroke: config.skipStroke
            });
            if (rect.width === 0 && rect.height === 0) {
                return;
            }
            if (minX === undefined) {
                minX = rect.x;
                minY = rect.y;
                maxX = rect.x + rect.width;
                maxY = rect.y + rect.height;
            }
            else {
                minX = Math.min(minX, rect.x);
                minY = Math.min(minY, rect.y);
                maxX = Math.max(maxX, rect.x + rect.width);
                maxY = Math.max(maxY, rect.y + rect.height);
            }
        });
        var shapes = this.find('Shape');
        var hasVisible = false;
        for (var i = 0; i < shapes.length; i++) {
            var shape = shapes[i];
            if (shape._isVisible(this)) {
                hasVisible = true;
                break;
            }
        }
        if (hasVisible && minX !== undefined) {
            selfRect = {
                x: minX,
                y: minY,
                width: maxX - minX,
                height: maxY - minY
            };
        }
        else {
            selfRect = {
                x: 0,
                y: 0,
                width: 0,
                height: 0
            };
        }
        if (!skipTransform) {
            return this._transformedRect(selfRect, relativeTo);
        }
        return selfRect;
    };
    return Container;
}(Node_1.Node));
exports.Container = Container;
Factory_1.Factory.addComponentsGetterSetter(Container, 'clip', [
    'x',
    'y',
    'width',
    'height'
]);
Factory_1.Factory.addGetterSetter(Container, 'clipX', undefined, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Container, 'clipY', undefined, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Container, 'clipWidth', undefined, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Container, 'clipHeight', undefined, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Container, 'clipFunc');
Util_1.Collection.mapMethods(Container);

},{"./DragAndDrop":11,"./Factory":12,"./Global":14,"./Node":17,"./Util":22,"./Validators":23}],10:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Global_1 = require("./Global");
var COMMA = ',', OPEN_PAREN = '(', CLOSE_PAREN = ')', OPEN_PAREN_BRACKET = '([', CLOSE_BRACKET_PAREN = '])', SEMICOLON = ';', DOUBLE_PAREN = '()', EQUALS = '=', CONTEXT_METHODS = [
    'arc',
    'arcTo',
    'beginPath',
    'bezierCurveTo',
    'clearRect',
    'clip',
    'closePath',
    'createLinearGradient',
    'createPattern',
    'createRadialGradient',
    'drawImage',
    'ellipse',
    'fill',
    'fillText',
    'getImageData',
    'createImageData',
    'lineTo',
    'moveTo',
    'putImageData',
    'quadraticCurveTo',
    'rect',
    'restore',
    'rotate',
    'save',
    'scale',
    'setLineDash',
    'setTransform',
    'stroke',
    'strokeText',
    'transform',
    'translate'
];
var CONTEXT_PROPERTIES = [
    'fillStyle',
    'strokeStyle',
    'shadowColor',
    'shadowBlur',
    'shadowOffsetX',
    'shadowOffsetY',
    'lineCap',
    'lineDashOffset',
    'lineJoin',
    'lineWidth',
    'miterLimit',
    'font',
    'textAlign',
    'textBaseline',
    'globalAlpha',
    'globalCompositeOperation',
    'imageSmoothingEnabled'
];
var traceArrMax = 100;
var Context = (function () {
    function Context(canvas) {
        this.canvas = canvas;
        this._context = canvas._canvas.getContext('2d');
        if (Global_1.Konva.enableTrace) {
            this.traceArr = [];
            this._enableTrace();
        }
    }
    Context.prototype.fillShape = function (shape) {
        if (shape.fillEnabled()) {
            this._fill(shape);
        }
    };
    Context.prototype._fill = function (shape) {
    };
    Context.prototype.strokeShape = function (shape) {
        if (shape.hasStroke()) {
            this._stroke(shape);
        }
    };
    Context.prototype._stroke = function (shape) {
    };
    Context.prototype.fillStrokeShape = function (shape) {
        this.fillShape(shape);
        this.strokeShape(shape);
    };
    Context.prototype.getTrace = function (relaxed) {
        var traceArr = this.traceArr, len = traceArr.length, str = '', n, trace, method, args;
        for (n = 0; n < len; n++) {
            trace = traceArr[n];
            method = trace.method;
            if (method) {
                args = trace.args;
                str += method;
                if (relaxed) {
                    str += DOUBLE_PAREN;
                }
                else {
                    if (Util_1.Util._isArray(args[0])) {
                        str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;
                    }
                    else {
                        str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;
                    }
                }
            }
            else {
                str += trace.property;
                if (!relaxed) {
                    str += EQUALS + trace.val;
                }
            }
            str += SEMICOLON;
        }
        return str;
    };
    Context.prototype.clearTrace = function () {
        this.traceArr = [];
    };
    Context.prototype._trace = function (str) {
        var traceArr = this.traceArr, len;
        traceArr.push(str);
        len = traceArr.length;
        if (len >= traceArrMax) {
            traceArr.shift();
        }
    };
    Context.prototype.reset = function () {
        var pixelRatio = this.getCanvas().getPixelRatio();
        this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);
    };
    Context.prototype.getCanvas = function () {
        return this.canvas;
    };
    Context.prototype.clear = function (bounds) {
        var canvas = this.getCanvas();
        if (bounds) {
            this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);
        }
        else {
            this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);
        }
    };
    Context.prototype._applyLineCap = function (shape) {
        var lineCap = shape.getLineCap();
        if (lineCap) {
            this.setAttr('lineCap', lineCap);
        }
    };
    Context.prototype._applyOpacity = function (shape) {
        var absOpacity = shape.getAbsoluteOpacity();
        if (absOpacity !== 1) {
            this.setAttr('globalAlpha', absOpacity);
        }
    };
    Context.prototype._applyLineJoin = function (shape) {
        var lineJoin = shape.getLineJoin();
        if (lineJoin) {
            this.setAttr('lineJoin', lineJoin);
        }
    };
    Context.prototype.setAttr = function (attr, val) {
        this._context[attr] = val;
    };
    Context.prototype.arc = function (a0, a1, a2, a3, a4, a5) {
        this._context.arc(a0, a1, a2, a3, a4, a5);
    };
    Context.prototype.arcTo = function (a0, a1, a2, a3, a4) {
        this._context.arcTo(a0, a1, a2, a3, a4);
    };
    Context.prototype.beginPath = function () {
        this._context.beginPath();
    };
    Context.prototype.bezierCurveTo = function (a0, a1, a2, a3, a4, a5) {
        this._context.bezierCurveTo(a0, a1, a2, a3, a4, a5);
    };
    Context.prototype.clearRect = function (a0, a1, a2, a3) {
        this._context.clearRect(a0, a1, a2, a3);
    };
    Context.prototype.clip = function () {
        this._context.clip();
    };
    Context.prototype.closePath = function () {
        this._context.closePath();
    };
    Context.prototype.createImageData = function (a0, a1) {
        var a = arguments;
        if (a.length === 2) {
            return this._context.createImageData(a0, a1);
        }
        else if (a.length === 1) {
            return this._context.createImageData(a0);
        }
    };
    Context.prototype.createLinearGradient = function (a0, a1, a2, a3) {
        return this._context.createLinearGradient(a0, a1, a2, a3);
    };
    Context.prototype.createPattern = function (a0, a1) {
        return this._context.createPattern(a0, a1);
    };
    Context.prototype.createRadialGradient = function (a0, a1, a2, a3, a4, a5) {
        return this._context.createRadialGradient(a0, a1, a2, a3, a4, a5);
    };
    Context.prototype.drawImage = function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        var a = arguments, _context = this._context;
        if (a.length === 3) {
            _context.drawImage(a0, a1, a2);
        }
        else if (a.length === 5) {
            _context.drawImage(a0, a1, a2, a3, a4);
        }
        else if (a.length === 9) {
            _context.drawImage(a0, a1, a2, a3, a4, a5, a6, a7, a8);
        }
    };
    Context.prototype.ellipse = function (a0, a1, a2, a3, a4, a5, a6, a7) {
        this._context.ellipse(a0, a1, a2, a3, a4, a5, a6, a7);
    };
    Context.prototype.isPointInPath = function (x, y) {
        return this._context.isPointInPath(x, y);
    };
    Context.prototype.fill = function () {
        this._context.fill();
    };
    Context.prototype.fillRect = function (x, y, width, height) {
        this._context.fillRect(x, y, width, height);
    };
    Context.prototype.strokeRect = function (x, y, width, height) {
        this._context.strokeRect(x, y, width, height);
    };
    Context.prototype.fillText = function (a0, a1, a2) {
        this._context.fillText(a0, a1, a2);
    };
    Context.prototype.measureText = function (text) {
        return this._context.measureText(text);
    };
    Context.prototype.getImageData = function (a0, a1, a2, a3) {
        return this._context.getImageData(a0, a1, a2, a3);
    };
    Context.prototype.lineTo = function (a0, a1) {
        this._context.lineTo(a0, a1);
    };
    Context.prototype.moveTo = function (a0, a1) {
        this._context.moveTo(a0, a1);
    };
    Context.prototype.rect = function (a0, a1, a2, a3) {
        this._context.rect(a0, a1, a2, a3);
    };
    Context.prototype.putImageData = function (a0, a1, a2) {
        this._context.putImageData(a0, a1, a2);
    };
    Context.prototype.quadraticCurveTo = function (a0, a1, a2, a3) {
        this._context.quadraticCurveTo(a0, a1, a2, a3);
    };
    Context.prototype.restore = function () {
        this._context.restore();
    };
    Context.prototype.rotate = function (a0) {
        this._context.rotate(a0);
    };
    Context.prototype.save = function () {
        this._context.save();
    };
    Context.prototype.scale = function (a0, a1) {
        this._context.scale(a0, a1);
    };
    Context.prototype.setLineDash = function (a0) {
        if (this._context.setLineDash) {
            this._context.setLineDash(a0);
        }
        else if ('mozDash' in this._context) {
            this._context['mozDash'] = a0;
        }
        else if ('webkitLineDash' in this._context) {
            this._context['webkitLineDash'] = a0;
        }
    };
    Context.prototype.getLineDash = function () {
        return this._context.getLineDash();
    };
    Context.prototype.setTransform = function (a0, a1, a2, a3, a4, a5) {
        this._context.setTransform(a0, a1, a2, a3, a4, a5);
    };
    Context.prototype.stroke = function () {
        this._context.stroke();
    };
    Context.prototype.strokeText = function (a0, a1, a2, a3) {
        this._context.strokeText(a0, a1, a2, a3);
    };
    Context.prototype.transform = function (a0, a1, a2, a3, a4, a5) {
        this._context.transform(a0, a1, a2, a3, a4, a5);
    };
    Context.prototype.translate = function (a0, a1) {
        this._context.translate(a0, a1);
    };
    Context.prototype._enableTrace = function () {
        var that = this, len = CONTEXT_METHODS.length, _simplifyArray = Util_1.Util._simplifyArray, origSetter = this.setAttr, n, args;
        var func = function (methodName) {
            var origMethod = that[methodName], ret;
            that[methodName] = function () {
                args = _simplifyArray(Array.prototype.slice.call(arguments, 0));
                ret = origMethod.apply(that, arguments);
                that._trace({
                    method: methodName,
                    args: args
                });
                return ret;
            };
        };
        for (n = 0; n < len; n++) {
            func(CONTEXT_METHODS[n]);
        }
        that.setAttr = function () {
            origSetter.apply(that, arguments);
            var prop = arguments[0];
            var val = arguments[1];
            if (prop === 'shadowOffsetX' ||
                prop === 'shadowOffsetY' ||
                prop === 'shadowBlur') {
                val = val / this.canvas.getPixelRatio();
            }
            that._trace({
                property: prop,
                val: val
            });
        };
    };
    Context.prototype._applyGlobalCompositeOperation = function (node) {
        var globalCompositeOperation = node.getGlobalCompositeOperation();
        if (globalCompositeOperation !== 'source-over') {
            this.setAttr('globalCompositeOperation', globalCompositeOperation);
        }
    };
    return Context;
}());
exports.Context = Context;
CONTEXT_PROPERTIES.forEach(function (prop) {
    Object.defineProperty(Context.prototype, prop, {
        get: function () {
            return this._context[prop];
        },
        set: function (val) {
            this._context[prop] = val;
        }
    });
});
var SceneContext = (function (_super) {
    __extends(SceneContext, _super);
    function SceneContext() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SceneContext.prototype._fillColor = function (shape) {
        var fill = shape.fill();
        this.setAttr('fillStyle', fill);
        shape._fillFunc(this);
    };
    SceneContext.prototype._fillPattern = function (shape) {
        var fillPatternX = shape.getFillPatternX(), fillPatternY = shape.getFillPatternY(), fillPatternRotation = Global_1.Konva.getAngle(shape.getFillPatternRotation()), fillPatternOffsetX = shape.getFillPatternOffsetX(), fillPatternOffsetY = shape.getFillPatternOffsetY(), fillPatternScaleX = shape.getFillPatternScaleX(), fillPatternScaleY = shape.getFillPatternScaleY();
        if (fillPatternX || fillPatternY) {
            this.translate(fillPatternX || 0, fillPatternY || 0);
        }
        if (fillPatternRotation) {
            this.rotate(fillPatternRotation);
        }
        if (fillPatternScaleX || fillPatternScaleY) {
            this.scale(fillPatternScaleX, fillPatternScaleY);
        }
        if (fillPatternOffsetX || fillPatternOffsetY) {
            this.translate(-1 * fillPatternOffsetX, -1 * fillPatternOffsetY);
        }
        this.setAttr('fillStyle', shape._getFillPattern());
        shape._fillFunc(this);
    };
    SceneContext.prototype._fillLinearGradient = function (shape) {
        var grd = shape._getLinearGradient();
        if (grd) {
            this.setAttr('fillStyle', grd);
            shape._fillFunc(this);
        }
    };
    SceneContext.prototype._fillRadialGradient = function (shape) {
        var grd = shape._getRadialGradient();
        if (grd) {
            this.setAttr('fillStyle', grd);
            shape._fillFunc(this);
        }
    };
    SceneContext.prototype._fill = function (shape) {
        var hasColor = shape.fill(), fillPriority = shape.getFillPriority();
        if (hasColor && fillPriority === 'color') {
            this._fillColor(shape);
            return;
        }
        var hasPattern = shape.getFillPatternImage();
        if (hasPattern && fillPriority === 'pattern') {
            this._fillPattern(shape);
            return;
        }
        var hasLinearGradient = shape.getFillLinearGradientColorStops();
        if (hasLinearGradient && fillPriority === 'linear-gradient') {
            this._fillLinearGradient(shape);
            return;
        }
        var hasRadialGradient = shape.getFillRadialGradientColorStops();
        if (hasRadialGradient && fillPriority === 'radial-gradient') {
            this._fillRadialGradient(shape);
            return;
        }
        if (hasColor) {
            this._fillColor(shape);
        }
        else if (hasPattern) {
            this._fillPattern(shape);
        }
        else if (hasLinearGradient) {
            this._fillLinearGradient(shape);
        }
        else if (hasRadialGradient) {
            this._fillRadialGradient(shape);
        }
    };
    SceneContext.prototype._strokeLinearGradient = function (shape) {
        var start = shape.getStrokeLinearGradientStartPoint(), end = shape.getStrokeLinearGradientEndPoint(), colorStops = shape.getStrokeLinearGradientColorStops(), grd = this.createLinearGradient(start.x, start.y, end.x, end.y);
        if (colorStops) {
            for (var n = 0; n < colorStops.length; n += 2) {
                grd.addColorStop(colorStops[n], colorStops[n + 1]);
            }
            this.setAttr('strokeStyle', grd);
        }
    };
    SceneContext.prototype._stroke = function (shape) {
        var dash = shape.dash(), strokeScaleEnabled = shape.getStrokeScaleEnabled();
        if (shape.hasStroke()) {
            if (!strokeScaleEnabled) {
                this.save();
                var pixelRatio = this.getCanvas().getPixelRatio();
                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
            }
            this._applyLineCap(shape);
            if (dash && shape.dashEnabled()) {
                this.setLineDash(dash);
                this.setAttr('lineDashOffset', shape.dashOffset());
            }
            this.setAttr('lineWidth', shape.strokeWidth());
            if (!shape.getShadowForStrokeEnabled()) {
                this.setAttr('shadowColor', 'rgba(0,0,0,0)');
            }
            var hasLinearGradient = shape.getStrokeLinearGradientColorStops();
            if (hasLinearGradient) {
                this._strokeLinearGradient(shape);
            }
            else {
                this.setAttr('strokeStyle', shape.stroke());
            }
            shape._strokeFunc(this);
            if (!strokeScaleEnabled) {
                this.restore();
            }
        }
    };
    SceneContext.prototype._applyShadow = function (shape) {
        var util = Util_1.Util, color = util.get(shape.getShadowRGBA(), 'black'), blur = util.get(shape.getShadowBlur(), 5), offset = util.get(shape.getShadowOffset(), {
            x: 0,
            y: 0
        }), scale = shape.getAbsoluteScale(), ratio = this.canvas.getPixelRatio(), scaleX = scale.x * ratio, scaleY = scale.y * ratio;
        this.setAttr('shadowColor', color);
        this.setAttr('shadowBlur', blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));
        this.setAttr('shadowOffsetX', offset.x * scaleX);
        this.setAttr('shadowOffsetY', offset.y * scaleY);
    };
    return SceneContext;
}(Context));
exports.SceneContext = SceneContext;
var HitContext = (function (_super) {
    __extends(HitContext, _super);
    function HitContext() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HitContext.prototype._fill = function (shape) {
        this.save();
        this.setAttr('fillStyle', shape.colorKey);
        shape._fillFuncHit(this);
        this.restore();
    };
    HitContext.prototype.strokeShape = function (shape) {
        if (shape.hasHitStroke()) {
            this._stroke(shape);
        }
    };
    HitContext.prototype._stroke = function (shape) {
        if (shape.hasHitStroke()) {
            var strokeScaleEnabled = shape.getStrokeScaleEnabled();
            if (!strokeScaleEnabled) {
                this.save();
                var pixelRatio = this.getCanvas().getPixelRatio();
                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
            }
            this._applyLineCap(shape);
            var hitStrokeWidth = shape.hitStrokeWidth();
            var strokeWidth = hitStrokeWidth === 'auto' ? shape.strokeWidth() : hitStrokeWidth;
            this.setAttr('lineWidth', strokeWidth);
            this.setAttr('strokeStyle', shape.colorKey);
            shape._strokeFuncHit(this);
            if (!strokeScaleEnabled) {
                this.restore();
            }
        }
    };
    return HitContext;
}(Context));
exports.HitContext = HitContext;

},{"./Global":14,"./Util":22}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global_1 = require("./Global");
var Util_1 = require("./Util");
exports.DD = {
    get isDragging() {
        var flag = false;
        exports.DD._dragElements.forEach(function (elem) {
            if (elem.dragStatus === 'dragging') {
                flag = true;
            }
        });
        return flag;
    },
    justDragged: false,
    get node() {
        var node;
        exports.DD._dragElements.forEach(function (elem) {
            node = elem.node;
        });
        return node;
    },
    _dragElements: new Map(),
    _drag: function (evt) {
        exports.DD._dragElements.forEach(function (elem, key) {
            var node = elem.node;
            var stage = node.getStage();
            stage.setPointersPositions(evt);
            if (elem.pointerId === undefined) {
                elem.pointerId = Util_1.Util._getFirstPointerId(evt);
            }
            var pos = stage._changedPointerPositions.find(function (pos) { return pos.id === elem.pointerId; });
            if (!pos) {
                return;
            }
            if (elem.dragStatus !== 'dragging') {
                var dragDistance = node.dragDistance();
                var distance = Math.max(Math.abs(pos.x - elem.startPointerPos.x), Math.abs(pos.y - elem.startPointerPos.y));
                if (distance < dragDistance) {
                    return;
                }
                node.startDrag({ evt: evt });
                if (!node.isDragging()) {
                    return;
                }
            }
            node._setDragPosition(evt, elem);
            node.fire('dragmove', {
                type: 'dragmove',
                target: node,
                evt: evt
            }, true);
        });
    },
    _endDragBefore: function (evt) {
        exports.DD._dragElements.forEach(function (elem, key) {
            var node = elem.node;
            var stage = node.getStage();
            if (evt) {
                stage.setPointersPositions(evt);
            }
            var pos = stage._changedPointerPositions.find(function (pos) { return pos.id === elem.pointerId; });
            if (!pos) {
                return;
            }
            if (elem.dragStatus === 'dragging' || elem.dragStatus === 'stopped') {
                exports.DD.justDragged = true;
                Global_1.Konva.listenClickTap = false;
                elem.dragStatus = 'stopped';
            }
            var drawNode = elem.node.getLayer() ||
                (elem.node instanceof Global_1.Konva['Stage'] && elem.node);
            if (drawNode) {
                drawNode.draw();
            }
        });
    },
    _endDragAfter: function (evt) {
        exports.DD._dragElements.forEach(function (elem, key) {
            if (elem.dragStatus === 'stopped') {
                elem.node.fire('dragend', {
                    type: 'dragend',
                    target: elem.node,
                    evt: evt
                }, true);
            }
            if (elem.dragStatus !== 'dragging') {
                exports.DD._dragElements.delete(key);
            }
        });
    }
};
if (Global_1.Konva.isBrowser) {
    window.addEventListener('mouseup', exports.DD._endDragBefore, true);
    window.addEventListener('touchend', exports.DD._endDragBefore, true);
    window.addEventListener('mousemove', exports.DD._drag);
    window.addEventListener('touchmove', exports.DD._drag);
    window.addEventListener('mouseup', exports.DD._endDragAfter, false);
    window.addEventListener('touchend', exports.DD._endDragAfter, false);
}

},{"./Global":14,"./Util":22}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Validators_1 = require("./Validators");
var GET = 'get', SET = 'set';
exports.Factory = {
    addGetterSetter: function (constructor, attr, def, validator, after) {
        this.addGetter(constructor, attr, def);
        this.addSetter(constructor, attr, validator, after);
        this.addOverloadedGetterSetter(constructor, attr);
    },
    addGetter: function (constructor, attr, def) {
        var method = GET + Util_1.Util._capitalize(attr);
        constructor.prototype[method] =
            constructor.prototype[method] ||
                function () {
                    var val = this.attrs[attr];
                    return val === undefined ? def : val;
                };
    },
    addSetter: function (constructor, attr, validator, after) {
        var method = SET + Util_1.Util._capitalize(attr);
        if (!constructor.prototype[method]) {
            exports.Factory.overWriteSetter(constructor, attr, validator, after);
        }
    },
    overWriteSetter: function (constructor, attr, validator, after) {
        var method = SET + Util_1.Util._capitalize(attr);
        constructor.prototype[method] = function (val) {
            if (validator && val !== undefined && val !== null) {
                val = validator.call(this, val, attr);
            }
            this._setAttr(attr, val);
            if (after) {
                after.call(this);
            }
            return this;
        };
    },
    addComponentsGetterSetter: function (constructor, attr, components, validator, after) {
        var len = components.length, capitalize = Util_1.Util._capitalize, getter = GET + capitalize(attr), setter = SET + capitalize(attr), n, component;
        constructor.prototype[getter] = function () {
            var ret = {};
            for (n = 0; n < len; n++) {
                component = components[n];
                ret[component] = this.getAttr(attr + capitalize(component));
            }
            return ret;
        };
        var basicValidator = Validators_1.getComponentValidator(components);
        constructor.prototype[setter] = function (val) {
            var oldVal = this.attrs[attr], key;
            if (validator) {
                val = validator.call(this, val);
            }
            if (basicValidator) {
                basicValidator.call(this, val, attr);
            }
            for (key in val) {
                if (!val.hasOwnProperty(key)) {
                    continue;
                }
                this._setAttr(attr + capitalize(key), val[key]);
            }
            this._fireChangeEvent(attr, oldVal, val);
            if (after) {
                after.call(this);
            }
            return this;
        };
        this.addOverloadedGetterSetter(constructor, attr);
    },
    addOverloadedGetterSetter: function (constructor, attr) {
        var capitalizedAttr = Util_1.Util._capitalize(attr), setter = SET + capitalizedAttr, getter = GET + capitalizedAttr;
        constructor.prototype[attr] = function () {
            if (arguments.length) {
                this[setter](arguments[0]);
                return this;
            }
            return this[getter]();
        };
    },
    addDeprecatedGetterSetter: function (constructor, attr, def, validator) {
        Util_1.Util.error('Adding deprecated ' + attr);
        var method = GET + Util_1.Util._capitalize(attr);
        var message = attr +
            ' property is deprecated and will be removed soon. Look at Konva change log for more information.';
        constructor.prototype[method] = function () {
            Util_1.Util.error(message);
            var val = this.attrs[attr];
            return val === undefined ? def : val;
        };
        this.addSetter(constructor, attr, validator, function () {
            Util_1.Util.error(message);
        });
        this.addOverloadedGetterSetter(constructor, attr);
    },
    backCompat: function (constructor, methods) {
        Util_1.Util.each(methods, function (oldMethodName, newMethodName) {
            var method = constructor.prototype[newMethodName];
            var oldGetter = GET + Util_1.Util._capitalize(oldMethodName);
            var oldSetter = SET + Util_1.Util._capitalize(oldMethodName);
            function deprecated() {
                method.apply(this, arguments);
                Util_1.Util.error('"' +
                    oldMethodName +
                    '" method is deprecated and will be removed soon. Use ""' +
                    newMethodName +
                    '" instead.');
            }
            constructor.prototype[oldMethodName] = deprecated;
            constructor.prototype[oldGetter] = deprecated;
            constructor.prototype[oldSetter] = deprecated;
        });
    },
    afterSetFilter: function () {
        this._filterUpToDate = false;
    }
};

},{"./Util":22,"./Validators":23}],13:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Container_1 = require("./Container");
var BaseLayer_1 = require("./BaseLayer");
var Global_1 = require("./Global");
var FastLayer = (function (_super) {
    __extends(FastLayer, _super);
    function FastLayer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FastLayer.prototype._validateAdd = function (child) {
        var type = child.getType();
        if (type !== 'Shape') {
            Util_1.Util.throw('You may only add shapes to a fast layer.');
        }
    };
    FastLayer.prototype.hitGraphEnabled = function () {
        return false;
    };
    FastLayer.prototype.drawScene = function (can) {
        var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas());
        if (this.clearBeforeDraw()) {
            canvas.getContext().clear();
        }
        Container_1.Container.prototype.drawScene.call(this, canvas);
        return this;
    };
    FastLayer.prototype.draw = function () {
        this.drawScene();
        return this;
    };
    return FastLayer;
}(BaseLayer_1.BaseLayer));
exports.FastLayer = FastLayer;
FastLayer.prototype.nodeType = 'FastLayer';
Global_1._registerNode(FastLayer);
Util_1.Collection.mapMethods(FastLayer);

},{"./BaseLayer":7,"./Container":9,"./Global":14,"./Util":22}],14:[function(require,module,exports){
(function (global){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PI_OVER_180 = Math.PI / 180;
function detectBrowser() {
    return (typeof window !== 'undefined' &&
        ({}.toString.call(window) === '[object Window]' ||
            {}.toString.call(window) === '[object global]'));
}
var _detectIE = function (ua) {
    var msie = ua.indexOf('msie ');
    if (msie > 0) {
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    }
    var trident = ua.indexOf('trident/');
    if (trident > 0) {
        var rv = ua.indexOf('rv:');
        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
    }
    var edge = ua.indexOf('edge/');
    if (edge > 0) {
        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
    }
    return false;
};
exports._parseUA = function (userAgent) {
    var ua = userAgent.toLowerCase(), match = /(chrome)[ /]([\w.]+)/.exec(ua) ||
        /(webkit)[ /]([\w.]+)/.exec(ua) ||
        /(opera)(?:.*version|)[ /]([\w.]+)/.exec(ua) ||
        /(msie) ([\w.]+)/.exec(ua) ||
        (ua.indexOf('compatible') < 0 &&
            /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua)) ||
        [], mobile = !!userAgent.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i), ieMobile = !!userAgent.match(/IEMobile/i);
    return {
        browser: match[1] || '',
        version: match[2] || '0',
        isIE: _detectIE(ua),
        mobile: mobile,
        ieMobile: ieMobile
    };
};
exports.glob = typeof global !== 'undefined'
    ? global
    : typeof window !== 'undefined'
        ? window
        : typeof WorkerGlobalScope !== 'undefined'
            ? self
            : {};
exports.Konva = {
    _global: exports.glob,
    version: '6.0.0',
    isBrowser: detectBrowser(),
    isUnminified: /param/.test(function (param) { }.toString()),
    dblClickWindow: 400,
    getAngle: function (angle) {
        return exports.Konva.angleDeg ? angle * PI_OVER_180 : angle;
    },
    enableTrace: false,
    _pointerEventsEnabled: false,
    hitOnDragEnabled: false,
    captureTouchEventsEnabled: false,
    listenClickTap: false,
    inDblClickWindow: false,
    pixelRatio: undefined,
    dragDistance: 3,
    angleDeg: true,
    showWarnings: true,
    dragButtons: [0, 1],
    isDragging: function () {
        return exports.Konva['DD'].isDragging;
    },
    isDragReady: function () {
        return !!exports.Konva['DD'].node;
    },
    UA: exports._parseUA((exports.glob.navigator && exports.glob.navigator.userAgent) || ''),
    document: exports.glob.document,
    _injectGlobal: function (Konva) {
        exports.glob.Konva = Konva;
    },
    _parseUA: exports._parseUA
};
exports._NODES_REGISTRY = {};
exports._registerNode = function (NodeClass) {
    exports._NODES_REGISTRY[NodeClass.prototype.getClassName()] = NodeClass;
    exports.Konva[NodeClass.prototype.getClassName()] = NodeClass;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],15:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Container_1 = require("./Container");
var Global_1 = require("./Global");
var Group = (function (_super) {
    __extends(Group, _super);
    function Group() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Group.prototype._validateAdd = function (child) {
        var type = child.getType();
        if (type !== 'Group' && type !== 'Shape') {
            Util_1.Util.throw('You may only add groups and shapes to groups.');
        }
    };
    return Group;
}(Container_1.Container));
exports.Group = Group;
Group.prototype.nodeType = 'Group';
Global_1._registerNode(Group);
Util_1.Collection.mapMethods(Group);

},{"./Container":9,"./Global":14,"./Util":22}],16:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Container_1 = require("./Container");
var Factory_1 = require("./Factory");
var BaseLayer_1 = require("./BaseLayer");
var Canvas_1 = require("./Canvas");
var Shape_1 = require("./Shape");
var Validators_1 = require("./Validators");
var Global_1 = require("./Global");
var HASH = '#', BEFORE_DRAW = 'beforeDraw', DRAW = 'draw', INTERSECTION_OFFSETS = [
    { x: 0, y: 0 },
    { x: -1, y: -1 },
    { x: 1, y: -1 },
    { x: 1, y: 1 },
    { x: -1, y: 1 }
], INTERSECTION_OFFSETS_LEN = INTERSECTION_OFFSETS.length;
var Layer = (function (_super) {
    __extends(Layer, _super);
    function Layer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hitCanvas = new Canvas_1.HitCanvas({
            pixelRatio: 1
        });
        return _this;
    }
    Layer.prototype.setSize = function (_a) {
        var width = _a.width, height = _a.height;
        _super.prototype.setSize.call(this, { width: width, height: height });
        this.hitCanvas.setSize(width, height);
        return this;
    };
    Layer.prototype._validateAdd = function (child) {
        var type = child.getType();
        if (type !== 'Group' && type !== 'Shape') {
            Util_1.Util.throw('You may only add groups and shapes to a layer.');
        }
    };
    Layer.prototype.getIntersection = function (pos, selector) {
        var obj, i, intersectionOffset, shape;
        if (!this.hitGraphEnabled() || !this.isVisible()) {
            return null;
        }
        var spiralSearchDistance = 1;
        var continueSearch = false;
        while (true) {
            for (i = 0; i < INTERSECTION_OFFSETS_LEN; i++) {
                intersectionOffset = INTERSECTION_OFFSETS[i];
                obj = this._getIntersection({
                    x: pos.x + intersectionOffset.x * spiralSearchDistance,
                    y: pos.y + intersectionOffset.y * spiralSearchDistance
                });
                shape = obj.shape;
                if (shape && selector) {
                    return shape.findAncestor(selector, true);
                }
                else if (shape) {
                    return shape;
                }
                continueSearch = !!obj.antialiased;
                if (!obj.antialiased) {
                    break;
                }
            }
            if (continueSearch) {
                spiralSearchDistance += 1;
            }
            else {
                return null;
            }
        }
    };
    Layer.prototype._getIntersection = function (pos) {
        var ratio = this.hitCanvas.pixelRatio;
        var p = this.hitCanvas.context.getImageData(Math.round(pos.x * ratio), Math.round(pos.y * ratio), 1, 1).data, p3 = p[3], colorKey, shape;
        if (p3 === 255) {
            colorKey = Util_1.Util._rgbToHex(p[0], p[1], p[2]);
            shape = Shape_1.shapes[HASH + colorKey];
            if (shape) {
                return {
                    shape: shape
                };
            }
            return {
                antialiased: true
            };
        }
        else if (p3 > 0) {
            return {
                antialiased: true
            };
        }
        return {};
    };
    Layer.prototype.drawScene = function (can, top) {
        var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas());
        this._fire(BEFORE_DRAW, {
            node: this
        });
        if (this.clearBeforeDraw()) {
            canvas.getContext().clear();
        }
        Container_1.Container.prototype.drawScene.call(this, canvas, top);
        this._fire(DRAW, {
            node: this
        });
        return this;
    };
    Layer.prototype.drawHit = function (can, top) {
        var layer = this.getLayer(), canvas = can || (layer && layer.hitCanvas);
        if (layer && layer.clearBeforeDraw()) {
            layer
                .getHitCanvas()
                .getContext()
                .clear();
        }
        Container_1.Container.prototype.drawHit.call(this, canvas, top);
        return this;
    };
    Layer.prototype.clear = function (bounds) {
        BaseLayer_1.BaseLayer.prototype.clear.call(this, bounds);
        this.getHitCanvas()
            .getContext()
            .clear(bounds);
        return this;
    };
    Layer.prototype.enableHitGraph = function () {
        this.hitGraphEnabled(true);
        return this;
    };
    Layer.prototype.disableHitGraph = function () {
        this.hitGraphEnabled(false);
        return this;
    };
    Layer.prototype.toggleHitCanvas = function () {
        if (!this.parent) {
            return;
        }
        var parent = this.parent;
        var added = !!this.hitCanvas._canvas.parentNode;
        if (added) {
            parent.content.removeChild(this.hitCanvas._canvas);
        }
        else {
            parent.content.appendChild(this.hitCanvas._canvas);
        }
    };
    return Layer;
}(BaseLayer_1.BaseLayer));
exports.Layer = Layer;
Layer.prototype.nodeType = 'Layer';
Global_1._registerNode(Layer);
Factory_1.Factory.addGetterSetter(Layer, 'hitGraphEnabled', true, Validators_1.getBooleanValidator());
Util_1.Collection.mapMethods(Layer);

},{"./BaseLayer":7,"./Canvas":8,"./Container":9,"./Factory":12,"./Global":14,"./Shape":19,"./Util":22,"./Validators":23}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Factory_1 = require("./Factory");
var Canvas_1 = require("./Canvas");
var Global_1 = require("./Global");
var DragAndDrop_1 = require("./DragAndDrop");
var Validators_1 = require("./Validators");
exports.ids = {};
exports.names = {};
var _addId = function (node, id) {
    if (!id) {
        return;
    }
    exports.ids[id] = node;
};
exports._removeId = function (id, node) {
    if (!id) {
        return;
    }
    if (exports.ids[id] !== node) {
        return;
    }
    delete exports.ids[id];
};
exports._addName = function (node, name) {
    if (name) {
        if (!exports.names[name]) {
            exports.names[name] = [];
        }
        exports.names[name].push(node);
    }
};
exports._removeName = function (name, _id) {
    if (!name) {
        return;
    }
    var nodes = exports.names[name];
    if (!nodes) {
        return;
    }
    for (var n = 0; n < nodes.length; n++) {
        var no = nodes[n];
        if (no._id === _id) {
            nodes.splice(n, 1);
        }
    }
    if (nodes.length === 0) {
        delete exports.names[name];
    }
};
var ABSOLUTE_OPACITY = 'absoluteOpacity', ABSOLUTE_TRANSFORM = 'absoluteTransform', ABSOLUTE_SCALE = 'absoluteScale', CANVAS = 'canvas', CHANGE = 'Change', CHILDREN = 'children', KONVA = 'konva', LISTENING = 'listening', MOUSEENTER = 'mouseenter', MOUSELEAVE = 'mouseleave', NAME = 'name', SET = 'set', SHAPE = 'Shape', SPACE = ' ', STAGE = 'stage', TRANSFORM = 'transform', UPPER_STAGE = 'Stage', VISIBLE = 'visible', TRANSFORM_CHANGE_STR = [
    'xChange.konva',
    'yChange.konva',
    'scaleXChange.konva',
    'scaleYChange.konva',
    'skewXChange.konva',
    'skewYChange.konva',
    'rotationChange.konva',
    'offsetXChange.konva',
    'offsetYChange.konva',
    'transformsEnabledChange.konva',
].join(SPACE), SCALE_CHANGE_STR = ['scaleXChange.konva', 'scaleYChange.konva'].join(SPACE);
var emptyChildren = new Util_1.Collection();
var idCounter = 1;
var Node = (function () {
    function Node(config) {
        var _this = this;
        this._id = idCounter++;
        this.eventListeners = {};
        this.attrs = {};
        this.index = 0;
        this.parent = null;
        this._cache = new Map();
        this._lastPos = null;
        this._batchingTransformChange = false;
        this._needClearTransformCache = false;
        this._filterUpToDate = false;
        this._isUnderCache = false;
        this.children = emptyChildren;
        this._dragEventId = null;
        this.setAttrs(config);
        this.on(TRANSFORM_CHANGE_STR, function () {
            if (_this._batchingTransformChange) {
                _this._needClearTransformCache = true;
                return;
            }
            _this._clearCache(TRANSFORM);
            _this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
        });
        this.on('visibleChange.konva', function () {
            _this._clearSelfAndDescendantCache(VISIBLE);
        });
        this.on('listeningChange.konva', function () {
            _this._clearSelfAndDescendantCache(LISTENING);
        });
        this.on('opacityChange.konva', function () {
            _this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
        });
    }
    Node.prototype.hasChildren = function () {
        return false;
    };
    Node.prototype.getChildren = function () {
        return emptyChildren;
    };
    Node.prototype._clearCache = function (attr) {
        if (attr) {
            this._cache.delete(attr);
        }
        else {
            this._cache.clear();
        }
    };
    Node.prototype._getCache = function (attr, privateGetter) {
        var cache = this._cache.get(attr);
        if (cache === undefined) {
            cache = privateGetter.call(this);
            this._cache.set(attr, cache);
        }
        return cache;
    };
    Node.prototype._getCanvasCache = function () {
        return this._cache.get(CANVAS);
    };
    Node.prototype._clearSelfAndDescendantCache = function (attr, forceEvent) {
        this._clearCache(attr);
        if (forceEvent && attr === ABSOLUTE_TRANSFORM) {
            this.fire('_clearTransformCache');
        }
        if (this.isCached()) {
            return;
        }
        if (this.children) {
            this.children.each(function (node) {
                node._clearSelfAndDescendantCache(attr, true);
            });
        }
    };
    Node.prototype.clearCache = function () {
        this._cache.delete(CANVAS);
        this._clearSelfAndDescendantCache();
        return this;
    };
    Node.prototype.cache = function (config) {
        var conf = config || {};
        var rect = {};
        if (conf.x === undefined ||
            conf.y === undefined ||
            conf.width === undefined ||
            conf.height === undefined) {
            rect = this.getClientRect({
                skipTransform: true,
                relativeTo: this.getParent(),
            });
        }
        var width = Math.ceil(conf.width || rect.width), height = Math.ceil(conf.height || rect.height), pixelRatio = conf.pixelRatio, x = conf.x === undefined ? rect.x : conf.x, y = conf.y === undefined ? rect.y : conf.y, offset = conf.offset || 0, drawBorder = conf.drawBorder || false;
        if (!width || !height) {
            Util_1.Util.error('Can not cache the node. Width or height of the node equals 0. Caching is skipped.');
            return;
        }
        width += offset * 2;
        height += offset * 2;
        x -= offset;
        y -= offset;
        var cachedSceneCanvas = new Canvas_1.SceneCanvas({
            pixelRatio: pixelRatio,
            width: width,
            height: height,
        }), cachedFilterCanvas = new Canvas_1.SceneCanvas({
            pixelRatio: pixelRatio,
            width: 0,
            height: 0,
        }), cachedHitCanvas = new Canvas_1.HitCanvas({
            pixelRatio: 1,
            width: width,
            height: height,
        }), sceneContext = cachedSceneCanvas.getContext(), hitContext = cachedHitCanvas.getContext();
        cachedHitCanvas.isCache = true;
        this._cache.delete('canvas');
        this._filterUpToDate = false;
        if (conf.imageSmoothingEnabled === false) {
            cachedSceneCanvas.getContext()._context.imageSmoothingEnabled = false;
            cachedFilterCanvas.getContext()._context.imageSmoothingEnabled = false;
        }
        sceneContext.save();
        hitContext.save();
        sceneContext.translate(-x, -y);
        hitContext.translate(-x, -y);
        this._isUnderCache = true;
        this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
        this._clearSelfAndDescendantCache(ABSOLUTE_SCALE);
        this.drawScene(cachedSceneCanvas, this, true);
        this.drawHit(cachedHitCanvas, this, true);
        this._isUnderCache = false;
        sceneContext.restore();
        hitContext.restore();
        if (drawBorder) {
            sceneContext.save();
            sceneContext.beginPath();
            sceneContext.rect(0, 0, width, height);
            sceneContext.closePath();
            sceneContext.setAttr('strokeStyle', 'red');
            sceneContext.setAttr('lineWidth', 5);
            sceneContext.stroke();
            sceneContext.restore();
        }
        this._cache.set(CANVAS, {
            scene: cachedSceneCanvas,
            filter: cachedFilterCanvas,
            hit: cachedHitCanvas,
            x: x,
            y: y,
        });
        return this;
    };
    Node.prototype.isCached = function () {
        return this._cache.has('canvas');
    };
    Node.prototype.getClientRect = function (config) {
        throw new Error('abstract "getClientRect" method call');
    };
    Node.prototype._transformedRect = function (rect, top) {
        var points = [
            { x: rect.x, y: rect.y },
            { x: rect.x + rect.width, y: rect.y },
            { x: rect.x + rect.width, y: rect.y + rect.height },
            { x: rect.x, y: rect.y + rect.height },
        ];
        var minX, minY, maxX, maxY;
        var trans = this.getAbsoluteTransform(top);
        points.forEach(function (point) {
            var transformed = trans.point(point);
            if (minX === undefined) {
                minX = maxX = transformed.x;
                minY = maxY = transformed.y;
            }
            minX = Math.min(minX, transformed.x);
            minY = Math.min(minY, transformed.y);
            maxX = Math.max(maxX, transformed.x);
            maxY = Math.max(maxY, transformed.y);
        });
        return {
            x: minX,
            y: minY,
            width: maxX - minX,
            height: maxY - minY,
        };
    };
    Node.prototype._drawCachedSceneCanvas = function (context) {
        context.save();
        context._applyOpacity(this);
        context._applyGlobalCompositeOperation(this);
        var canvasCache = this._getCanvasCache();
        context.translate(canvasCache.x, canvasCache.y);
        var cacheCanvas = this._getCachedSceneCanvas();
        var ratio = cacheCanvas.pixelRatio;
        context.drawImage(cacheCanvas._canvas, 0, 0, cacheCanvas.width / ratio, cacheCanvas.height / ratio);
        context.restore();
    };
    Node.prototype._drawCachedHitCanvas = function (context) {
        var canvasCache = this._getCanvasCache(), hitCanvas = canvasCache.hit;
        context.save();
        context.translate(canvasCache.x, canvasCache.y);
        context.drawImage(hitCanvas._canvas, 0, 0);
        context.restore();
    };
    Node.prototype._getCachedSceneCanvas = function () {
        var filters = this.filters(), cachedCanvas = this._getCanvasCache(), sceneCanvas = cachedCanvas.scene, filterCanvas = cachedCanvas.filter, filterContext = filterCanvas.getContext(), len, imageData, n, filter;
        if (filters) {
            if (!this._filterUpToDate) {
                var ratio = sceneCanvas.pixelRatio;
                filterCanvas.setSize(sceneCanvas.width / sceneCanvas.pixelRatio, sceneCanvas.height / sceneCanvas.pixelRatio);
                try {
                    len = filters.length;
                    filterContext.clear();
                    filterContext.drawImage(sceneCanvas._canvas, 0, 0, sceneCanvas.getWidth() / ratio, sceneCanvas.getHeight() / ratio);
                    imageData = filterContext.getImageData(0, 0, filterCanvas.getWidth(), filterCanvas.getHeight());
                    for (n = 0; n < len; n++) {
                        filter = filters[n];
                        if (typeof filter !== 'function') {
                            Util_1.Util.error('Filter should be type of function, but got ' +
                                typeof filter +
                                ' instead. Please check correct filters');
                            continue;
                        }
                        filter.call(this, imageData);
                        filterContext.putImageData(imageData, 0, 0);
                    }
                }
                catch (e) {
                    Util_1.Util.error('Unable to apply filter. ' +
                        e.message +
                        ' This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.');
                }
                this._filterUpToDate = true;
            }
            return filterCanvas;
        }
        return sceneCanvas;
    };
    Node.prototype.on = function (evtStr, handler) {
        if (arguments.length === 3) {
            return this._delegate.apply(this, arguments);
        }
        var events = evtStr.split(SPACE), len = events.length, n, event, parts, baseEvent, name;
        for (n = 0; n < len; n++) {
            event = events[n];
            parts = event.split('.');
            baseEvent = parts[0];
            name = parts[1] || '';
            if (!this.eventListeners[baseEvent]) {
                this.eventListeners[baseEvent] = [];
            }
            this.eventListeners[baseEvent].push({
                name: name,
                handler: handler,
            });
        }
        return this;
    };
    Node.prototype.off = function (evtStr, callback) {
        var events = (evtStr || '').split(SPACE), len = events.length, n, t, event, parts, baseEvent, name;
        if (!evtStr) {
            for (t in this.eventListeners) {
                this._off(t);
            }
        }
        for (n = 0; n < len; n++) {
            event = events[n];
            parts = event.split('.');
            baseEvent = parts[0];
            name = parts[1];
            if (baseEvent) {
                if (this.eventListeners[baseEvent]) {
                    this._off(baseEvent, name, callback);
                }
            }
            else {
                for (t in this.eventListeners) {
                    this._off(t, name, callback);
                }
            }
        }
        return this;
    };
    Node.prototype.dispatchEvent = function (evt) {
        var e = {
            target: this,
            type: evt.type,
            evt: evt,
        };
        this.fire(evt.type, e);
        return this;
    };
    Node.prototype.addEventListener = function (type, handler) {
        this.on(type, function (evt) {
            handler.call(this, evt.evt);
        });
        return this;
    };
    Node.prototype.removeEventListener = function (type) {
        this.off(type);
        return this;
    };
    Node.prototype._delegate = function (event, selector, handler) {
        var stopNode = this;
        this.on(event, function (evt) {
            var targets = evt.target.findAncestors(selector, true, stopNode);
            for (var i = 0; i < targets.length; i++) {
                evt = Util_1.Util.cloneObject(evt);
                evt.currentTarget = targets[i];
                handler.call(targets[i], evt);
            }
        });
    };
    Node.prototype.remove = function () {
        if (this.isDragging()) {
            this.stopDrag();
        }
        DragAndDrop_1.DD._dragElements.delete(this._id);
        this._remove();
        return this;
    };
    Node.prototype._clearCaches = function () {
        this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
        this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
        this._clearSelfAndDescendantCache(ABSOLUTE_SCALE);
        this._clearSelfAndDescendantCache(STAGE);
        this._clearSelfAndDescendantCache(VISIBLE);
        this._clearSelfAndDescendantCache(LISTENING);
    };
    Node.prototype._remove = function () {
        this._clearCaches();
        var parent = this.getParent();
        if (parent && parent.children) {
            parent.children.splice(this.index, 1);
            parent._setChildrenIndices();
            this.parent = null;
        }
    };
    Node.prototype.destroy = function () {
        exports._removeId(this.id(), this);
        var names = (this.name() || '').split(/\s/g);
        for (var i = 0; i < names.length; i++) {
            var subname = names[i];
            exports._removeName(subname, this._id);
        }
        this.remove();
        return this;
    };
    Node.prototype.getAttr = function (attr) {
        var method = 'get' + Util_1.Util._capitalize(attr);
        if (Util_1.Util._isFunction(this[method])) {
            return this[method]();
        }
        return this.attrs[attr];
    };
    Node.prototype.getAncestors = function () {
        var parent = this.getParent(), ancestors = new Util_1.Collection();
        while (parent) {
            ancestors.push(parent);
            parent = parent.getParent();
        }
        return ancestors;
    };
    Node.prototype.getAttrs = function () {
        return this.attrs || {};
    };
    Node.prototype.setAttrs = function (config) {
        var key, method;
        if (!config) {
            return this;
        }
        for (key in config) {
            if (key === CHILDREN) {
                continue;
            }
            method = SET + Util_1.Util._capitalize(key);
            if (Util_1.Util._isFunction(this[method])) {
                this[method](config[key]);
            }
            else {
                this._setAttr(key, config[key]);
            }
        }
        return this;
    };
    Node.prototype.isListening = function () {
        return this._getCache(LISTENING, this._isListening);
    };
    Node.prototype._isListening = function () {
        var listening = this.listening(), parent = this.getParent();
        if (listening === 'inherit') {
            if (parent) {
                return parent.isListening();
            }
            else {
                return true;
            }
        }
        else {
            return listening;
        }
    };
    Node.prototype.isVisible = function () {
        return this._getCache(VISIBLE, this._isVisible);
    };
    Node.prototype._isVisible = function (relativeTo) {
        var visible = this.visible(), parent = this.getParent();
        if (visible === 'inherit') {
            if (parent && parent !== relativeTo) {
                return parent._isVisible(relativeTo);
            }
            else {
                return true;
            }
        }
        else if (relativeTo && relativeTo !== parent) {
            return visible && parent._isVisible(relativeTo);
        }
        else {
            return visible;
        }
    };
    Node.prototype.shouldDrawHit = function () {
        var layer = this.getLayer();
        return ((!layer && this.isListening() && this.isVisible()) ||
            (layer &&
                layer.hitGraphEnabled() &&
                this.isListening() &&
                this.isVisible()));
    };
    Node.prototype.show = function () {
        this.visible(true);
        return this;
    };
    Node.prototype.hide = function () {
        this.visible(false);
        return this;
    };
    Node.prototype.getZIndex = function () {
        return this.index || 0;
    };
    Node.prototype.getAbsoluteZIndex = function () {
        var depth = this.getDepth(), that = this, index = 0, nodes, len, n, child;
        function addChildren(children) {
            nodes = [];
            len = children.length;
            for (n = 0; n < len; n++) {
                child = children[n];
                index++;
                if (child.nodeType !== SHAPE) {
                    nodes = nodes.concat(child.getChildren().toArray());
                }
                if (child._id === that._id) {
                    n = len;
                }
            }
            if (nodes.length > 0 && nodes[0].getDepth() <= depth) {
                addChildren(nodes);
            }
        }
        if (that.nodeType !== UPPER_STAGE) {
            addChildren(that.getStage().getChildren());
        }
        return index;
    };
    Node.prototype.getDepth = function () {
        var depth = 0, parent = this.parent;
        while (parent) {
            depth++;
            parent = parent.parent;
        }
        return depth;
    };
    Node.prototype._batchTransformChanges = function (func) {
        this._batchingTransformChange = true;
        func();
        this._batchingTransformChange = false;
        if (this._needClearTransformCache) {
            this._clearCache(TRANSFORM);
            this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM, true);
        }
        this._needClearTransformCache = false;
    };
    Node.prototype.setPosition = function (pos) {
        var _this = this;
        this._batchTransformChanges(function () {
            _this.x(pos.x);
            _this.y(pos.y);
        });
        return this;
    };
    Node.prototype.getPosition = function () {
        return {
            x: this.x(),
            y: this.y(),
        };
    };
    Node.prototype.getAbsolutePosition = function (top) {
        var haveCachedParent = false;
        var parent = this.parent;
        while (parent) {
            if (parent.isCached()) {
                haveCachedParent = true;
                break;
            }
            parent = parent.parent;
        }
        if (haveCachedParent && !top) {
            top = true;
        }
        var absoluteMatrix = this.getAbsoluteTransform(top).getMatrix(), absoluteTransform = new Util_1.Transform(), offset = this.offset();
        absoluteTransform.m = absoluteMatrix.slice();
        absoluteTransform.translate(offset.x, offset.y);
        return absoluteTransform.getTranslation();
    };
    Node.prototype.setAbsolutePosition = function (pos) {
        var origTrans = this._clearTransform(), it;
        this.attrs.x = origTrans.x;
        this.attrs.y = origTrans.y;
        delete origTrans.x;
        delete origTrans.y;
        this._clearCache(TRANSFORM);
        it = this._getAbsoluteTransform();
        it.invert();
        it.translate(pos.x, pos.y);
        pos = {
            x: this.attrs.x + it.getTranslation().x,
            y: this.attrs.y + it.getTranslation().y,
        };
        this._setTransform(origTrans);
        this.setPosition({ x: pos.x, y: pos.y });
        return this;
    };
    Node.prototype._setTransform = function (trans) {
        var key;
        for (key in trans) {
            this.attrs[key] = trans[key];
        }
    };
    Node.prototype._clearTransform = function () {
        var trans = {
            x: this.x(),
            y: this.y(),
            rotation: this.rotation(),
            scaleX: this.scaleX(),
            scaleY: this.scaleY(),
            offsetX: this.offsetX(),
            offsetY: this.offsetY(),
            skewX: this.skewX(),
            skewY: this.skewY(),
        };
        this.attrs.x = 0;
        this.attrs.y = 0;
        this.attrs.rotation = 0;
        this.attrs.scaleX = 1;
        this.attrs.scaleY = 1;
        this.attrs.offsetX = 0;
        this.attrs.offsetY = 0;
        this.attrs.skewX = 0;
        this.attrs.skewY = 0;
        return trans;
    };
    Node.prototype.move = function (change) {
        var changeX = change.x, changeY = change.y, x = this.x(), y = this.y();
        if (changeX !== undefined) {
            x += changeX;
        }
        if (changeY !== undefined) {
            y += changeY;
        }
        this.setPosition({ x: x, y: y });
        return this;
    };
    Node.prototype._eachAncestorReverse = function (func, top) {
        var family = [], parent = this.getParent(), len, n;
        if (top && top._id === this._id) {
            func(this);
            return;
        }
        family.unshift(this);
        while (parent && (!top || parent._id !== top._id)) {
            family.unshift(parent);
            parent = parent.parent;
        }
        len = family.length;
        for (n = 0; n < len; n++) {
            func(family[n]);
        }
    };
    Node.prototype.rotate = function (theta) {
        this.rotation(this.rotation() + theta);
        return this;
    };
    Node.prototype.moveToTop = function () {
        if (!this.parent) {
            Util_1.Util.warn('Node has no parent. moveToTop function is ignored.');
            return false;
        }
        var index = this.index;
        this.parent.children.splice(index, 1);
        this.parent.children.push(this);
        this.parent._setChildrenIndices();
        return true;
    };
    Node.prototype.moveUp = function () {
        if (!this.parent) {
            Util_1.Util.warn('Node has no parent. moveUp function is ignored.');
            return false;
        }
        var index = this.index, len = this.parent.getChildren().length;
        if (index < len - 1) {
            this.parent.children.splice(index, 1);
            this.parent.children.splice(index + 1, 0, this);
            this.parent._setChildrenIndices();
            return true;
        }
        return false;
    };
    Node.prototype.moveDown = function () {
        if (!this.parent) {
            Util_1.Util.warn('Node has no parent. moveDown function is ignored.');
            return false;
        }
        var index = this.index;
        if (index > 0) {
            this.parent.children.splice(index, 1);
            this.parent.children.splice(index - 1, 0, this);
            this.parent._setChildrenIndices();
            return true;
        }
        return false;
    };
    Node.prototype.moveToBottom = function () {
        if (!this.parent) {
            Util_1.Util.warn('Node has no parent. moveToBottom function is ignored.');
            return false;
        }
        var index = this.index;
        if (index > 0) {
            this.parent.children.splice(index, 1);
            this.parent.children.unshift(this);
            this.parent._setChildrenIndices();
            return true;
        }
        return false;
    };
    Node.prototype.setZIndex = function (zIndex) {
        if (!this.parent) {
            Util_1.Util.warn('Node has no parent. zIndex parameter is ignored.');
            return this;
        }
        if (zIndex < 0 || zIndex >= this.parent.children.length) {
            Util_1.Util.warn('Unexpected value ' +
                zIndex +
                ' for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to ' +
                (this.parent.children.length - 1) +
                '.');
        }
        var index = this.index;
        this.parent.children.splice(index, 1);
        this.parent.children.splice(zIndex, 0, this);
        this.parent._setChildrenIndices();
        return this;
    };
    Node.prototype.getAbsoluteOpacity = function () {
        return this._getCache(ABSOLUTE_OPACITY, this._getAbsoluteOpacity);
    };
    Node.prototype._getAbsoluteOpacity = function () {
        var absOpacity = this.opacity();
        var parent = this.getParent();
        if (parent && !parent._isUnderCache) {
            absOpacity *= parent.getAbsoluteOpacity();
        }
        return absOpacity;
    };
    Node.prototype.moveTo = function (newContainer) {
        if (this.getParent() !== newContainer) {
            this._remove();
            newContainer.add(this);
        }
        return this;
    };
    Node.prototype.toObject = function () {
        var obj = {}, attrs = this.getAttrs(), key, val, getter, defaultValue, nonPlainObject;
        obj.attrs = {};
        for (key in attrs) {
            val = attrs[key];
            nonPlainObject =
                Util_1.Util.isObject(val) && !Util_1.Util._isPlainObject(val) && !Util_1.Util._isArray(val);
            if (nonPlainObject) {
                continue;
            }
            getter = typeof this[key] === 'function' && this[key];
            delete attrs[key];
            defaultValue = getter ? getter.call(this) : null;
            attrs[key] = val;
            if (defaultValue !== val) {
                obj.attrs[key] = val;
            }
        }
        obj.className = this.getClassName();
        return Util_1.Util._prepareToStringify(obj);
    };
    Node.prototype.toJSON = function () {
        return JSON.stringify(this.toObject());
    };
    Node.prototype.getParent = function () {
        return this.parent;
    };
    Node.prototype.findAncestors = function (selector, includeSelf, stopNode) {
        var res = [];
        if (includeSelf && this._isMatch(selector)) {
            res.push(this);
        }
        var ancestor = this.parent;
        while (ancestor) {
            if (ancestor === stopNode) {
                return res;
            }
            if (ancestor._isMatch(selector)) {
                res.push(ancestor);
            }
            ancestor = ancestor.parent;
        }
        return res;
    };
    Node.prototype.isAncestorOf = function (node) {
        return false;
    };
    Node.prototype.findAncestor = function (selector, includeSelf, stopNode) {
        return this.findAncestors(selector, includeSelf, stopNode)[0];
    };
    Node.prototype._isMatch = function (selector) {
        if (!selector) {
            return false;
        }
        if (typeof selector === 'function') {
            return selector(this);
        }
        var selectorArr = selector.replace(/ /g, '').split(','), len = selectorArr.length, n, sel;
        for (n = 0; n < len; n++) {
            sel = selectorArr[n];
            if (!Util_1.Util.isValidSelector(sel)) {
                Util_1.Util.warn('Selector "' +
                    sel +
                    '" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".');
                Util_1.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".');
                Util_1.Util.warn('Konva is awesome, right?');
            }
            if (sel.charAt(0) === '#') {
                if (this.id() === sel.slice(1)) {
                    return true;
                }
            }
            else if (sel.charAt(0) === '.') {
                if (this.hasName(sel.slice(1))) {
                    return true;
                }
            }
            else if (this.className === sel || this.nodeType === sel) {
                return true;
            }
        }
        return false;
    };
    Node.prototype.getLayer = function () {
        var parent = this.getParent();
        return parent ? parent.getLayer() : null;
    };
    Node.prototype.getStage = function () {
        return this._getCache(STAGE, this._getStage);
    };
    Node.prototype._getStage = function () {
        var parent = this.getParent();
        if (parent) {
            return parent.getStage();
        }
        else {
            return undefined;
        }
    };
    Node.prototype.fire = function (eventType, evt, bubble) {
        if (evt === void 0) { evt = {}; }
        evt.target = evt.target || this;
        if (bubble) {
            this._fireAndBubble(eventType, evt);
        }
        else {
            this._fire(eventType, evt);
        }
        return this;
    };
    Node.prototype.getAbsoluteTransform = function (top) {
        if (top) {
            return this._getAbsoluteTransform(top);
        }
        else {
            return this._getCache(ABSOLUTE_TRANSFORM, this._getAbsoluteTransform);
        }
    };
    Node.prototype._getAbsoluteTransform = function (top) {
        var at;
        if (top) {
            at = new Util_1.Transform();
            this._eachAncestorReverse(function (node) {
                var transformsEnabled = node.transformsEnabled();
                if (transformsEnabled === 'all') {
                    at.multiply(node.getTransform());
                }
                else if (transformsEnabled === 'position') {
                    at.translate(node.x() - node.offsetX(), node.y() - node.offsetY());
                }
            }, top);
            return at;
        }
        else {
            if (this.parent) {
                at = this.parent.getAbsoluteTransform().copy();
            }
            else {
                at = new Util_1.Transform();
            }
            var transformsEnabled = this.transformsEnabled();
            if (transformsEnabled === 'all') {
                at.multiply(this.getTransform());
            }
            else if (transformsEnabled === 'position') {
                at.translate(this.x() - this.offsetX(), this.y() - this.offsetY());
            }
            return at;
        }
    };
    Node.prototype.getAbsoluteScale = function (top) {
        var parent = this;
        while (parent) {
            if (parent._isUnderCache) {
                top = parent;
            }
            parent = parent.getParent();
        }
        var transform = this.getAbsoluteTransform(top);
        var attrs = transform.decompose();
        return {
            x: attrs.scaleX,
            y: attrs.scaleY,
        };
    };
    Node.prototype.getAbsoluteRotation = function () {
        return this.getAbsoluteTransform().decompose().rotation;
    };
    Node.prototype.getTransform = function () {
        return this._getCache(TRANSFORM, this._getTransform);
    };
    Node.prototype._getTransform = function () {
        var m = new Util_1.Transform(), x = this.x(), y = this.y(), rotation = Global_1.Konva.getAngle(this.rotation()), scaleX = this.scaleX(), scaleY = this.scaleY(), skewX = this.skewX(), skewY = this.skewY(), offsetX = this.offsetX(), offsetY = this.offsetY();
        if (x !== 0 || y !== 0) {
            m.translate(x, y);
        }
        if (rotation !== 0) {
            m.rotate(rotation);
        }
        if (skewX !== 0 || skewY !== 0) {
            m.skew(skewX, skewY);
        }
        if (scaleX !== 1 || scaleY !== 1) {
            m.scale(scaleX, scaleY);
        }
        if (offsetX !== 0 || offsetY !== 0) {
            m.translate(-1 * offsetX, -1 * offsetY);
        }
        return m;
    };
    Node.prototype.clone = function (obj) {
        var attrs = Util_1.Util.cloneObject(this.attrs), key, allListeners, len, n, listener;
        for (key in obj) {
            attrs[key] = obj[key];
        }
        var node = new this.constructor(attrs);
        for (key in this.eventListeners) {
            allListeners = this.eventListeners[key];
            len = allListeners.length;
            for (n = 0; n < len; n++) {
                listener = allListeners[n];
                if (listener.name.indexOf(KONVA) < 0) {
                    if (!node.eventListeners[key]) {
                        node.eventListeners[key] = [];
                    }
                    node.eventListeners[key].push(listener);
                }
            }
        }
        return node;
    };
    Node.prototype._toKonvaCanvas = function (config) {
        config = config || {};
        var box = this.getClientRect();
        var stage = this.getStage(), x = config.x !== undefined ? config.x : box.x, y = config.y !== undefined ? config.y : box.y, pixelRatio = config.pixelRatio || 1, canvas = new Canvas_1.SceneCanvas({
            width: config.width || box.width || (stage ? stage.width() : 0),
            height: config.height || box.height || (stage ? stage.height() : 0),
            pixelRatio: pixelRatio,
        }), context = canvas.getContext();
        context.save();
        if (x || y) {
            context.translate(-1 * x, -1 * y);
        }
        this.drawScene(canvas);
        context.restore();
        return canvas;
    };
    Node.prototype.toCanvas = function (config) {
        return this._toKonvaCanvas(config)._canvas;
    };
    Node.prototype.toDataURL = function (config) {
        config = config || {};
        var mimeType = config.mimeType || null, quality = config.quality || null;
        var url = this._toKonvaCanvas(config).toDataURL(mimeType, quality);
        if (config.callback) {
            config.callback(url);
        }
        return url;
    };
    Node.prototype.toImage = function (config) {
        if (!config || !config.callback) {
            throw 'callback required for toImage method config argument';
        }
        var callback = config.callback;
        delete config.callback;
        Util_1.Util._urlToImage(this.toDataURL(config), function (img) {
            callback(img);
        });
    };
    Node.prototype.setSize = function (size) {
        this.width(size.width);
        this.height(size.height);
        return this;
    };
    Node.prototype.getSize = function () {
        return {
            width: this.width(),
            height: this.height(),
        };
    };
    Node.prototype.getClassName = function () {
        return this.className || this.nodeType;
    };
    Node.prototype.getType = function () {
        return this.nodeType;
    };
    Node.prototype.getDragDistance = function () {
        if (this.attrs.dragDistance !== undefined) {
            return this.attrs.dragDistance;
        }
        else if (this.parent) {
            return this.parent.getDragDistance();
        }
        else {
            return Global_1.Konva.dragDistance;
        }
    };
    Node.prototype._off = function (type, name, callback) {
        var evtListeners = this.eventListeners[type], i, evtName, handler;
        for (i = 0; i < evtListeners.length; i++) {
            evtName = evtListeners[i].name;
            handler = evtListeners[i].handler;
            if ((evtName !== 'konva' || name === 'konva') &&
                (!name || evtName === name) &&
                (!callback || callback === handler)) {
                evtListeners.splice(i, 1);
                if (evtListeners.length === 0) {
                    delete this.eventListeners[type];
                    break;
                }
                i--;
            }
        }
    };
    Node.prototype._fireChangeEvent = function (attr, oldVal, newVal) {
        this._fire(attr + CHANGE, {
            oldVal: oldVal,
            newVal: newVal,
        });
    };
    Node.prototype.setId = function (id) {
        var oldId = this.id();
        exports._removeId(oldId, this);
        _addId(this, id);
        this._setAttr('id', id);
        return this;
    };
    Node.prototype.setName = function (name) {
        var oldNames = (this.name() || '').split(/\s/g);
        var newNames = (name || '').split(/\s/g);
        var subname, i;
        for (i = 0; i < oldNames.length; i++) {
            subname = oldNames[i];
            if (newNames.indexOf(subname) === -1 && subname) {
                exports._removeName(subname, this._id);
            }
        }
        for (i = 0; i < newNames.length; i++) {
            subname = newNames[i];
            if (oldNames.indexOf(subname) === -1 && subname) {
                exports._addName(this, subname);
            }
        }
        this._setAttr(NAME, name);
        return this;
    };
    Node.prototype.addName = function (name) {
        if (!this.hasName(name)) {
            var oldName = this.name();
            var newName = oldName ? oldName + ' ' + name : name;
            this.setName(newName);
        }
        return this;
    };
    Node.prototype.hasName = function (name) {
        if (!name) {
            return false;
        }
        var fullName = this.name();
        if (!fullName) {
            return false;
        }
        var names = (fullName || '').split(/\s/g);
        return names.indexOf(name) !== -1;
    };
    Node.prototype.removeName = function (name) {
        var names = (this.name() || '').split(/\s/g);
        var index = names.indexOf(name);
        if (index !== -1) {
            names.splice(index, 1);
            this.setName(names.join(' '));
        }
        return this;
    };
    Node.prototype.setAttr = function (attr, val) {
        var func = this[SET + Util_1.Util._capitalize(attr)];
        if (Util_1.Util._isFunction(func)) {
            func.call(this, val);
        }
        else {
            this._setAttr(attr, val);
        }
        return this;
    };
    Node.prototype._setAttr = function (key, val) {
        var oldVal = this.attrs[key];
        if (oldVal === val && !Util_1.Util.isObject(val)) {
            return;
        }
        if (val === undefined || val === null) {
            delete this.attrs[key];
        }
        else {
            this.attrs[key] = val;
        }
        this._fireChangeEvent(key, oldVal, val);
    };
    Node.prototype._setComponentAttr = function (key, component, val) {
        var oldVal;
        if (val !== undefined) {
            oldVal = this.attrs[key];
            if (!oldVal) {
                this.attrs[key] = this.getAttr(key);
            }
            this.attrs[key][component] = val;
            this._fireChangeEvent(key, oldVal, val);
        }
    };
    Node.prototype._fireAndBubble = function (eventType, evt, compareShape) {
        if (evt && this.nodeType === SHAPE) {
            evt.target = this;
        }
        var shouldStop = (eventType === MOUSEENTER || eventType === MOUSELEAVE) &&
            ((compareShape &&
                (this === compareShape ||
                    (this.isAncestorOf && this.isAncestorOf(compareShape)))) ||
                (this.nodeType === 'Stage' && !compareShape));
        if (!shouldStop) {
            this._fire(eventType, evt);
            var stopBubble = (eventType === MOUSEENTER || eventType === MOUSELEAVE) &&
                compareShape &&
                compareShape.isAncestorOf &&
                compareShape.isAncestorOf(this) &&
                !compareShape.isAncestorOf(this.parent);
            if (((evt && !evt.cancelBubble) || !evt) &&
                this.parent &&
                this.parent.isListening() &&
                !stopBubble) {
                if (compareShape && compareShape.parent) {
                    this._fireAndBubble.call(this.parent, eventType, evt, compareShape);
                }
                else {
                    this._fireAndBubble.call(this.parent, eventType, evt);
                }
            }
        }
    };
    Node.prototype._fire = function (eventType, evt) {
        var events = this.eventListeners[eventType], i;
        if (events) {
            evt = evt || {};
            evt.currentTarget = this;
            evt.type = eventType;
            for (i = 0; i < events.length; i++) {
                events[i].handler.call(this, evt);
            }
        }
    };
    Node.prototype.draw = function () {
        this.drawScene();
        this.drawHit();
        return this;
    };
    Node.prototype._createDragElement = function (evt) {
        var pointerId = evt ? evt.pointerId : undefined;
        var stage = this.getStage();
        var ap = this.getAbsolutePosition();
        var pos = stage._getPointerById(pointerId) ||
            stage._changedPointerPositions[0] ||
            ap;
        DragAndDrop_1.DD._dragElements.set(this._id, {
            node: this,
            startPointerPos: pos,
            offset: {
                x: pos.x - ap.x,
                y: pos.y - ap.y,
            },
            dragStatus: 'ready',
            pointerId: pointerId,
        });
    };
    Node.prototype.startDrag = function (evt) {
        if (!DragAndDrop_1.DD._dragElements.has(this._id)) {
            this._createDragElement(evt);
        }
        var elem = DragAndDrop_1.DD._dragElements.get(this._id);
        elem.dragStatus = 'dragging';
        this.fire('dragstart', {
            type: 'dragstart',
            target: this,
            evt: evt && evt.evt,
        }, true);
    };
    Node.prototype._setDragPosition = function (evt, elem) {
        var pos = this.getStage()._getPointerById(elem.pointerId);
        if (!pos) {
            return;
        }
        var newNodePos = {
            x: pos.x - elem.offset.x,
            y: pos.y - elem.offset.y,
        };
        var dbf = this.dragBoundFunc();
        if (dbf !== undefined) {
            var bounded = dbf.call(this, newNodePos, evt);
            if (!bounded) {
                Util_1.Util.warn('dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.');
            }
            else {
                newNodePos = bounded;
            }
        }
        if (!this._lastPos ||
            this._lastPos.x !== newNodePos.x ||
            this._lastPos.y !== newNodePos.y) {
            this.setAbsolutePosition(newNodePos);
            if (this.getLayer()) {
                this.getLayer().batchDraw();
            }
            else if (this.getStage()) {
                this.getStage().batchDraw();
            }
        }
        this._lastPos = newNodePos;
    };
    Node.prototype.stopDrag = function (evt) {
        var elem = DragAndDrop_1.DD._dragElements.get(this._id);
        if (elem) {
            elem.dragStatus = 'stopped';
        }
        DragAndDrop_1.DD._endDragBefore(evt);
        DragAndDrop_1.DD._endDragAfter(evt);
    };
    Node.prototype.setDraggable = function (draggable) {
        this._setAttr('draggable', draggable);
        this._dragChange();
    };
    Node.prototype.isDragging = function () {
        var elem = DragAndDrop_1.DD._dragElements.get(this._id);
        return elem ? elem.dragStatus === 'dragging' : false;
    };
    Node.prototype._listenDrag = function () {
        this._dragCleanup();
        this.on('mousedown.konva touchstart.konva', function (evt) {
            var _this = this;
            var shouldCheckButton = evt.evt['button'] !== undefined;
            var canDrag = !shouldCheckButton || Global_1.Konva.dragButtons.indexOf(evt.evt['button']) >= 0;
            if (!canDrag) {
                return;
            }
            if (this.isDragging()) {
                return;
            }
            var hasDraggingChild = false;
            DragAndDrop_1.DD._dragElements.forEach(function (elem) {
                if (_this.isAncestorOf(elem.node)) {
                    hasDraggingChild = true;
                }
            });
            if (!hasDraggingChild) {
                this._createDragElement(evt);
            }
        });
    };
    Node.prototype._dragChange = function () {
        if (this.attrs.draggable) {
            this._listenDrag();
        }
        else {
            this._dragCleanup();
            var stage = this.getStage();
            if (stage && DragAndDrop_1.DD._dragElements.has(this._id)) {
                this.stopDrag();
            }
        }
    };
    Node.prototype._dragCleanup = function () {
        this.off('mousedown.konva');
        this.off('touchstart.konva');
    };
    Node.create = function (data, container) {
        if (Util_1.Util._isString(data)) {
            data = JSON.parse(data);
        }
        return this._createNode(data, container);
    };
    Node._createNode = function (obj, container) {
        var className = Node.prototype.getClassName.call(obj), children = obj.children, no, len, n;
        if (container) {
            obj.attrs.container = container;
        }
        if (!Global_1._NODES_REGISTRY[className]) {
            Util_1.Util.warn('Can not find a node with class name "' +
                className +
                '". Fallback to "Shape".');
            className = 'Shape';
        }
        var Class = Global_1._NODES_REGISTRY[className];
        no = new Class(obj.attrs);
        if (children) {
            len = children.length;
            for (n = 0; n < len; n++) {
                no.add(Node._createNode(children[n]));
            }
        }
        return no;
    };
    return Node;
}());
exports.Node = Node;
Node.prototype.nodeType = 'Node';
Node.prototype._attrsAffectingSize = [];
Factory_1.Factory.addGetterSetter(Node, 'zIndex');
Factory_1.Factory.addGetterSetter(Node, 'absolutePosition');
Factory_1.Factory.addGetterSetter(Node, 'position');
Factory_1.Factory.addGetterSetter(Node, 'x', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Node, 'y', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Node, 'globalCompositeOperation', 'source-over', Validators_1.getStringValidator());
Factory_1.Factory.addGetterSetter(Node, 'opacity', 1, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Node, 'name', '', Validators_1.getStringValidator());
Factory_1.Factory.addGetterSetter(Node, 'id', '', Validators_1.getStringValidator());
Factory_1.Factory.addGetterSetter(Node, 'rotation', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addComponentsGetterSetter(Node, 'scale', ['x', 'y']);
Factory_1.Factory.addGetterSetter(Node, 'scaleX', 1, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Node, 'scaleY', 1, Validators_1.getNumberValidator());
Factory_1.Factory.addComponentsGetterSetter(Node, 'skew', ['x', 'y']);
Factory_1.Factory.addGetterSetter(Node, 'skewX', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Node, 'skewY', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addComponentsGetterSetter(Node, 'offset', ['x', 'y']);
Factory_1.Factory.addGetterSetter(Node, 'offsetX', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Node, 'offsetY', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Node, 'dragDistance', null, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Node, 'width', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Node, 'height', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Node, 'listening', 'inherit', function (val) {
    var isValid = val === true || val === false || val === 'inherit';
    if (!isValid) {
        Util_1.Util.warn(val +
            ' is a not valid value for "listening" attribute. The value may be true, false or "inherit".');
    }
    return val;
});
Factory_1.Factory.addGetterSetter(Node, 'preventDefault', true, Validators_1.getBooleanValidator());
Factory_1.Factory.addGetterSetter(Node, 'filters', null, function (val) {
    this._filterUpToDate = false;
    return val;
});
Factory_1.Factory.addGetterSetter(Node, 'visible', 'inherit', function (val) {
    var isValid = val === true || val === false || val === 'inherit';
    if (!isValid) {
        Util_1.Util.warn(val +
            ' is a not valid value for "visible" attribute. The value may be true, false or "inherit".');
    }
    return val;
});
Factory_1.Factory.addGetterSetter(Node, 'transformsEnabled', 'all', Validators_1.getStringValidator());
Factory_1.Factory.addGetterSetter(Node, 'size');
Factory_1.Factory.addGetterSetter(Node, 'dragBoundFunc');
Factory_1.Factory.addGetterSetter(Node, 'draggable', false, Validators_1.getBooleanValidator());
Factory_1.Factory.backCompat(Node, {
    rotateDeg: 'rotate',
    setRotationDeg: 'setRotation',
    getRotationDeg: 'getRotation',
});
Util_1.Collection.mapMethods(Node);

},{"./Canvas":8,"./DragAndDrop":11,"./Factory":12,"./Global":14,"./Util":22,"./Validators":23}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global_1 = require("./Global");
var Captures = new Map();
var SUPPORT_POINTER_EVENTS = Global_1.Konva._global['PointerEvent'] !== undefined;
function getCapturedShape(pointerId) {
    return Captures.get(pointerId);
}
exports.getCapturedShape = getCapturedShape;
function createEvent(evt) {
    return {
        evt: evt,
        pointerId: evt.pointerId
    };
}
exports.createEvent = createEvent;
function hasPointerCapture(pointerId, shape) {
    return Captures.get(pointerId) === shape;
}
exports.hasPointerCapture = hasPointerCapture;
function setPointerCapture(pointerId, shape) {
    releaseCapture(pointerId);
    var stage = shape.getStage();
    if (!stage)
        return;
    Captures.set(pointerId, shape);
    if (SUPPORT_POINTER_EVENTS) {
        shape._fire('gotpointercapture', createEvent(new PointerEvent('gotpointercapture')));
    }
}
exports.setPointerCapture = setPointerCapture;
function releaseCapture(pointerId, target) {
    var shape = Captures.get(pointerId);
    if (!shape)
        return;
    var stage = shape.getStage();
    if (stage && stage.content) {
    }
    Captures.delete(pointerId);
    if (SUPPORT_POINTER_EVENTS) {
        shape._fire('lostpointercapture', createEvent(new PointerEvent('lostpointercapture')));
    }
}
exports.releaseCapture = releaseCapture;

},{"./Global":14}],19:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Factory_1 = require("./Factory");
var Node_1 = require("./Node");
var Validators_1 = require("./Validators");
var Global_1 = require("./Global");
var PointerEvents = require("./PointerEvents");
var HAS_SHADOW = 'hasShadow';
var SHADOW_RGBA = 'shadowRGBA';
var patternImage = 'patternImage';
var linearGradient = 'linearGradient';
var radialGradient = 'radialGradient';
var dummyContext;
function getDummyContext() {
    if (dummyContext) {
        return dummyContext;
    }
    dummyContext = Util_1.Util.createCanvasElement().getContext('2d');
    return dummyContext;
}
exports.shapes = {};
function _fillFunc(context) {
    context.fill();
}
function _strokeFunc(context) {
    context.stroke();
}
function _fillFuncHit(context) {
    context.fill();
}
function _strokeFuncHit(context) {
    context.stroke();
}
function _clearHasShadowCache() {
    this._clearCache(HAS_SHADOW);
}
function _clearGetShadowRGBACache() {
    this._clearCache(SHADOW_RGBA);
}
function _clearFillPatternCache() {
    this._clearCache(patternImage);
}
function _clearLinearGradientCache() {
    this._clearCache(linearGradient);
}
function _clearRadialGradientCache() {
    this._clearCache(radialGradient);
}
var Shape = (function (_super) {
    __extends(Shape, _super);
    function Shape(config) {
        var _this = _super.call(this, config) || this;
        var key;
        while (true) {
            key = Util_1.Util.getRandomColor();
            if (key && !(key in exports.shapes)) {
                break;
            }
        }
        _this.colorKey = key;
        exports.shapes[key] = _this;
        _this.on('shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearHasShadowCache);
        _this.on('shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearGetShadowRGBACache);
        _this.on('fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva', _clearFillPatternCache);
        _this.on('fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva', _clearLinearGradientCache);
        _this.on('fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva', _clearRadialGradientCache);
        return _this;
    }
    Shape.prototype.getContext = function () {
        return this.getLayer().getContext();
    };
    Shape.prototype.getCanvas = function () {
        return this.getLayer().getCanvas();
    };
    Shape.prototype.getSceneFunc = function () {
        return this.attrs.sceneFunc || this['_sceneFunc'];
    };
    Shape.prototype.getHitFunc = function () {
        return this.attrs.hitFunc || this['_hitFunc'];
    };
    Shape.prototype.hasShadow = function () {
        return this._getCache(HAS_SHADOW, this._hasShadow);
    };
    Shape.prototype._hasShadow = function () {
        return (this.shadowEnabled() &&
            this.shadowOpacity() !== 0 &&
            !!(this.shadowColor() ||
                this.shadowBlur() ||
                this.shadowOffsetX() ||
                this.shadowOffsetY()));
    };
    Shape.prototype._getFillPattern = function () {
        return this._getCache(patternImage, this.__getFillPattern);
    };
    Shape.prototype.__getFillPattern = function () {
        if (this.fillPatternImage()) {
            var ctx = getDummyContext();
            var pattern = ctx.createPattern(this.fillPatternImage(), this.fillPatternRepeat() || 'repeat');
            return pattern;
        }
    };
    Shape.prototype._getLinearGradient = function () {
        return this._getCache(linearGradient, this.__getLinearGradient);
    };
    Shape.prototype.__getLinearGradient = function () {
        var colorStops = this.fillLinearGradientColorStops();
        if (colorStops) {
            var ctx = getDummyContext();
            var start = this.fillLinearGradientStartPoint();
            var end = this.fillLinearGradientEndPoint();
            var grd = ctx.createLinearGradient(start.x, start.y, end.x, end.y);
            for (var n = 0; n < colorStops.length; n += 2) {
                grd.addColorStop(colorStops[n], colorStops[n + 1]);
            }
            return grd;
        }
    };
    Shape.prototype._getRadialGradient = function () {
        return this._getCache(radialGradient, this.__getRadialGradient);
    };
    Shape.prototype.__getRadialGradient = function () {
        var colorStops = this.fillRadialGradientColorStops();
        if (colorStops) {
            var ctx = getDummyContext();
            var start = this.fillRadialGradientStartPoint();
            var end = this.fillRadialGradientEndPoint();
            var grd = ctx.createRadialGradient(start.x, start.y, this.fillRadialGradientStartRadius(), end.x, end.y, this.fillRadialGradientEndRadius());
            for (var n = 0; n < colorStops.length; n += 2) {
                grd.addColorStop(colorStops[n], colorStops[n + 1]);
            }
            return grd;
        }
    };
    Shape.prototype.getShadowRGBA = function () {
        return this._getCache(SHADOW_RGBA, this._getShadowRGBA);
    };
    Shape.prototype._getShadowRGBA = function () {
        if (this.hasShadow()) {
            var rgba = Util_1.Util.colorToRGBA(this.shadowColor());
            return ('rgba(' +
                rgba.r +
                ',' +
                rgba.g +
                ',' +
                rgba.b +
                ',' +
                rgba.a * (this.shadowOpacity() || 1) +
                ')');
        }
    };
    Shape.prototype.hasFill = function () {
        return (this.fillEnabled() &&
            !!(this.fill() ||
                this.fillPatternImage() ||
                this.fillLinearGradientColorStops() ||
                this.fillRadialGradientColorStops()));
    };
    Shape.prototype.hasStroke = function () {
        return (this.strokeEnabled() &&
            this.strokeWidth() &&
            !!(this.stroke() || this.strokeLinearGradientColorStops()));
    };
    Shape.prototype.hasHitStroke = function () {
        var width = this.hitStrokeWidth();
        if (width === 'auto') {
            return this.hasStroke();
        }
        return this.strokeEnabled() && !!width;
    };
    Shape.prototype.intersects = function (point) {
        var stage = this.getStage(), bufferHitCanvas = stage.bufferHitCanvas, p;
        bufferHitCanvas.getContext().clear();
        this.drawHit(bufferHitCanvas);
        p = bufferHitCanvas.context.getImageData(Math.round(point.x), Math.round(point.y), 1, 1).data;
        return p[3] > 0;
    };
    Shape.prototype.destroy = function () {
        Node_1.Node.prototype.destroy.call(this);
        delete exports.shapes[this.colorKey];
        delete this.colorKey;
        return this;
    };
    Shape.prototype._useBufferCanvas = function (caching) {
        return !!((!caching || this.hasShadow()) &&
            this.perfectDrawEnabled() &&
            this.getAbsoluteOpacity() !== 1 &&
            this.hasFill() &&
            this.hasStroke() &&
            this.getStage());
    };
    Shape.prototype.setStrokeHitEnabled = function (val) {
        Util_1.Util.warn('strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead.');
        if (val) {
            this.hitStrokeWidth('auto');
        }
        else {
            this.hitStrokeWidth(0);
        }
    };
    Shape.prototype.getStrokeHitEnabled = function () {
        if (this.hitStrokeWidth() === 0) {
            return false;
        }
        else {
            return true;
        }
    };
    Shape.prototype.getSelfRect = function () {
        var size = this.size();
        return {
            x: this._centroid ? -size.width / 2 : 0,
            y: this._centroid ? -size.height / 2 : 0,
            width: size.width,
            height: size.height
        };
    };
    Shape.prototype.getClientRect = function (attrs) {
        attrs = attrs || {};
        var skipTransform = attrs.skipTransform;
        var relativeTo = attrs.relativeTo;
        var fillRect = this.getSelfRect();
        var applyStroke = !attrs.skipStroke && this.hasStroke();
        var strokeWidth = (applyStroke && this.strokeWidth()) || 0;
        var fillAndStrokeWidth = fillRect.width + strokeWidth;
        var fillAndStrokeHeight = fillRect.height + strokeWidth;
        var applyShadow = !attrs.skipShadow && this.hasShadow();
        var shadowOffsetX = applyShadow ? this.shadowOffsetX() : 0;
        var shadowOffsetY = applyShadow ? this.shadowOffsetY() : 0;
        var preWidth = fillAndStrokeWidth + Math.abs(shadowOffsetX);
        var preHeight = fillAndStrokeHeight + Math.abs(shadowOffsetY);
        var blurRadius = (applyShadow && this.shadowBlur()) || 0;
        var width = preWidth + blurRadius * 2;
        var height = preHeight + blurRadius * 2;
        var roundingOffset = 0;
        if (Math.round(strokeWidth / 2) !== strokeWidth / 2) {
            roundingOffset = 1;
        }
        var rect = {
            width: width + roundingOffset,
            height: height + roundingOffset,
            x: -Math.round(strokeWidth / 2 + blurRadius) +
                Math.min(shadowOffsetX, 0) +
                fillRect.x,
            y: -Math.round(strokeWidth / 2 + blurRadius) +
                Math.min(shadowOffsetY, 0) +
                fillRect.y
        };
        if (!skipTransform) {
            return this._transformedRect(rect, relativeTo);
        }
        return rect;
    };
    Shape.prototype.drawScene = function (can, top, caching, skipBuffer) {
        var layer = this.getLayer(), canvas = can || layer.getCanvas(), context = canvas.getContext(), cachedCanvas = this._getCanvasCache(), drawFunc = this.sceneFunc(), hasShadow = this.hasShadow(), hasStroke = this.hasStroke(), stage, bufferCanvas, bufferContext;
        if (!this.isVisible() && !caching) {
            return this;
        }
        if (cachedCanvas) {
            context.save();
            layer._applyTransform(this, context, top);
            this._drawCachedSceneCanvas(context);
            context.restore();
            return this;
        }
        if (!drawFunc) {
            return this;
        }
        context.save();
        if (this._useBufferCanvas(caching) && !skipBuffer) {
            stage = this.getStage();
            bufferCanvas = stage.bufferCanvas;
            bufferContext = bufferCanvas.getContext();
            bufferContext.clear();
            bufferContext.save();
            bufferContext._applyLineJoin(this);
            if (!caching) {
                if (layer) {
                    layer._applyTransform(this, bufferContext, top);
                }
                else {
                    var m = this.getAbsoluteTransform(top).getMatrix();
                    context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
                }
            }
            drawFunc.call(this, bufferContext, this);
            bufferContext.restore();
            var ratio = bufferCanvas.pixelRatio;
            if (hasShadow && !canvas.hitCanvas) {
                context.save();
                context._applyShadow(this);
                context._applyOpacity(this);
                context._applyGlobalCompositeOperation(this);
                context.drawImage(bufferCanvas._canvas, 0, 0, bufferCanvas.width / ratio, bufferCanvas.height / ratio);
                context.restore();
            }
            else {
                context._applyOpacity(this);
                context._applyGlobalCompositeOperation(this);
                context.drawImage(bufferCanvas._canvas, 0, 0, bufferCanvas.width / ratio, bufferCanvas.height / ratio);
            }
        }
        else {
            context._applyLineJoin(this);
            if (!caching) {
                if (layer) {
                    layer._applyTransform(this, context, top);
                }
                else {
                    var o = this.getAbsoluteTransform(top).getMatrix();
                    context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
                }
            }
            if (hasShadow && hasStroke && !canvas.hitCanvas) {
                context.save();
                if (!caching) {
                    context._applyOpacity(this);
                    context._applyGlobalCompositeOperation(this);
                }
                context._applyShadow(this);
                drawFunc.call(this, context, this);
                context.restore();
                if (this.hasFill() && this.shadowForStrokeEnabled()) {
                    drawFunc.call(this, context, this);
                }
            }
            else if (hasShadow && !canvas.hitCanvas) {
                context.save();
                if (!caching) {
                    context._applyOpacity(this);
                    context._applyGlobalCompositeOperation(this);
                }
                context._applyShadow(this);
                drawFunc.call(this, context, this);
                context.restore();
            }
            else {
                if (!caching) {
                    context._applyOpacity(this);
                    context._applyGlobalCompositeOperation(this);
                }
                drawFunc.call(this, context, this);
            }
        }
        context.restore();
        return this;
    };
    Shape.prototype.drawHit = function (can, top, caching) {
        var layer = this.getLayer(), canvas = can || layer.hitCanvas, context = canvas && canvas.getContext(), drawFunc = this.hitFunc() || this.sceneFunc(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;
        if (!this.colorKey) {
            console.log(this);
            Util_1.Util.warn('Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. See the shape in logs above. If you want to reuse shape you should call remove() instead of destroy()');
        }
        if (!this.shouldDrawHit() && !caching) {
            return this;
        }
        if (cachedHitCanvas) {
            context.save();
            layer._applyTransform(this, context, top);
            this._drawCachedHitCanvas(context);
            context.restore();
            return this;
        }
        if (!drawFunc) {
            return this;
        }
        context.save();
        context._applyLineJoin(this);
        if (!caching) {
            if (layer) {
                layer._applyTransform(this, context, top);
            }
            else {
                var o = this.getAbsoluteTransform(top).getMatrix();
                context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
            }
        }
        drawFunc.call(this, context, this);
        context.restore();
        return this;
    };
    Shape.prototype.drawHitFromCache = function (alphaThreshold) {
        if (alphaThreshold === void 0) { alphaThreshold = 0; }
        var cachedCanvas = this._getCanvasCache(), sceneCanvas = this._getCachedSceneCanvas(), hitCanvas = cachedCanvas.hit, hitContext = hitCanvas.getContext(), hitWidth = hitCanvas.getWidth(), hitHeight = hitCanvas.getHeight(), hitImageData, hitData, len, rgbColorKey, i, alpha;
        hitContext.clear();
        hitContext.drawImage(sceneCanvas._canvas, 0, 0, hitWidth, hitHeight);
        try {
            hitImageData = hitContext.getImageData(0, 0, hitWidth, hitHeight);
            hitData = hitImageData.data;
            len = hitData.length;
            rgbColorKey = Util_1.Util._hexToRgb(this.colorKey);
            for (i = 0; i < len; i += 4) {
                alpha = hitData[i + 3];
                if (alpha > alphaThreshold) {
                    hitData[i] = rgbColorKey.r;
                    hitData[i + 1] = rgbColorKey.g;
                    hitData[i + 2] = rgbColorKey.b;
                    hitData[i + 3] = 255;
                }
                else {
                    hitData[i + 3] = 0;
                }
            }
            hitContext.putImageData(hitImageData, 0, 0);
        }
        catch (e) {
            Util_1.Util.error('Unable to draw hit graph from cached scene canvas. ' + e.message);
        }
        return this;
    };
    Shape.prototype.hasPointerCapture = function (pointerId) {
        return PointerEvents.hasPointerCapture(pointerId, this);
    };
    Shape.prototype.setPointerCapture = function (pointerId) {
        PointerEvents.setPointerCapture(pointerId, this);
    };
    Shape.prototype.releaseCapture = function (pointerId) {
        PointerEvents.releaseCapture(pointerId, this);
    };
    return Shape;
}(Node_1.Node));
exports.Shape = Shape;
Shape.prototype._fillFunc = _fillFunc;
Shape.prototype._strokeFunc = _strokeFunc;
Shape.prototype._fillFuncHit = _fillFuncHit;
Shape.prototype._strokeFuncHit = _strokeFuncHit;
Shape.prototype._centroid = false;
Shape.prototype.nodeType = 'Shape';
Global_1._registerNode(Shape);
Factory_1.Factory.addGetterSetter(Shape, 'stroke', undefined, Validators_1.getStringValidator());
Factory_1.Factory.addGetterSetter(Shape, 'strokeWidth', 2, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Shape, 'hitStrokeWidth', 'auto', Validators_1.getNumberOrAutoValidator());
Factory_1.Factory.addGetterSetter(Shape, 'strokeHitEnabled', true, Validators_1.getBooleanValidator());
Factory_1.Factory.addGetterSetter(Shape, 'perfectDrawEnabled', true, Validators_1.getBooleanValidator());
Factory_1.Factory.addGetterSetter(Shape, 'shadowForStrokeEnabled', true, Validators_1.getBooleanValidator());
Factory_1.Factory.addGetterSetter(Shape, 'lineJoin');
Factory_1.Factory.addGetterSetter(Shape, 'lineCap');
Factory_1.Factory.addGetterSetter(Shape, 'sceneFunc');
Factory_1.Factory.addGetterSetter(Shape, 'hitFunc');
Factory_1.Factory.addGetterSetter(Shape, 'dash');
Factory_1.Factory.addGetterSetter(Shape, 'dashOffset', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Shape, 'shadowColor', undefined, Validators_1.getStringValidator());
Factory_1.Factory.addGetterSetter(Shape, 'shadowBlur', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Shape, 'shadowOpacity', 1, Validators_1.getNumberValidator());
Factory_1.Factory.addComponentsGetterSetter(Shape, 'shadowOffset', ['x', 'y']);
Factory_1.Factory.addGetterSetter(Shape, 'shadowOffsetX', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Shape, 'shadowOffsetY', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Shape, 'fillPatternImage');
Factory_1.Factory.addGetterSetter(Shape, 'fill', undefined, Validators_1.getStringValidator());
Factory_1.Factory.addGetterSetter(Shape, 'fillPatternX', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Shape, 'fillPatternY', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientColorStops');
Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientColorStops');
Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartRadius', 0);
Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndRadius', 0);
Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientColorStops');
Factory_1.Factory.addGetterSetter(Shape, 'fillPatternRepeat', 'repeat');
Factory_1.Factory.addGetterSetter(Shape, 'fillEnabled', true);
Factory_1.Factory.addGetterSetter(Shape, 'strokeEnabled', true);
Factory_1.Factory.addGetterSetter(Shape, 'shadowEnabled', true);
Factory_1.Factory.addGetterSetter(Shape, 'dashEnabled', true);
Factory_1.Factory.addGetterSetter(Shape, 'strokeScaleEnabled', true);
Factory_1.Factory.addGetterSetter(Shape, 'fillPriority', 'color');
Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillPatternOffset', ['x', 'y']);
Factory_1.Factory.addGetterSetter(Shape, 'fillPatternOffsetX', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Shape, 'fillPatternOffsetY', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillPatternScale', ['x', 'y']);
Factory_1.Factory.addGetterSetter(Shape, 'fillPatternScaleX', 1, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Shape, 'fillPatternScaleY', 1, Validators_1.getNumberValidator());
Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillLinearGradientStartPoint', [
    'x',
    'y'
]);
Factory_1.Factory.addComponentsGetterSetter(Shape, 'strokeLinearGradientStartPoint', [
    'x',
    'y'
]);
Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientStartPointX', 0);
Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientStartPointX', 0);
Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientStartPointY', 0);
Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientStartPointY', 0);
Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillLinearGradientEndPoint', [
    'x',
    'y'
]);
Factory_1.Factory.addComponentsGetterSetter(Shape, 'strokeLinearGradientEndPoint', [
    'x',
    'y'
]);
Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientEndPointX', 0);
Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientEndPointX', 0);
Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientEndPointY', 0);
Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientEndPointY', 0);
Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillRadialGradientStartPoint', [
    'x',
    'y'
]);
Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartPointX', 0);
Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartPointY', 0);
Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillRadialGradientEndPoint', [
    'x',
    'y'
]);
Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndPointX', 0);
Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndPointY', 0);
Factory_1.Factory.addGetterSetter(Shape, 'fillPatternRotation', 0);
Factory_1.Factory.backCompat(Shape, {
    dashArray: 'dash',
    getDashArray: 'getDash',
    setDashArray: 'getDash',
    drawFunc: 'sceneFunc',
    getDrawFunc: 'getSceneFunc',
    setDrawFunc: 'setSceneFunc',
    drawHitFunc: 'hitFunc',
    getDrawHitFunc: 'getHitFunc',
    setDrawHitFunc: 'setHitFunc'
});
Util_1.Collection.mapMethods(Shape);

},{"./Factory":12,"./Global":14,"./Node":17,"./PointerEvents":18,"./Util":22,"./Validators":23}],20:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Factory_1 = require("./Factory");
var Container_1 = require("./Container");
var Global_1 = require("./Global");
var Canvas_1 = require("./Canvas");
var DragAndDrop_1 = require("./DragAndDrop");
var Global_2 = require("./Global");
var PointerEvents = require("./PointerEvents");
var STAGE = 'Stage', STRING = 'string', PX = 'px', MOUSEOUT = 'mouseout', MOUSELEAVE = 'mouseleave', MOUSEOVER = 'mouseover', MOUSEENTER = 'mouseenter', MOUSEMOVE = 'mousemove', MOUSEDOWN = 'mousedown', MOUSEUP = 'mouseup', POINTERMOVE = 'pointermove', POINTERDOWN = 'pointerdown', POINTERUP = 'pointerup', POINTERCANCEL = 'pointercancel', LOSTPOINTERCAPTURE = 'lostpointercapture', CONTEXTMENU = 'contextmenu', CLICK = 'click', DBL_CLICK = 'dblclick', TOUCHSTART = 'touchstart', TOUCHEND = 'touchend', TAP = 'tap', DBL_TAP = 'dbltap', TOUCHMOVE = 'touchmove', WHEEL = 'wheel', CONTENT_MOUSEOUT = 'contentMouseout', CONTENT_MOUSEOVER = 'contentMouseover', CONTENT_MOUSEMOVE = 'contentMousemove', CONTENT_MOUSEDOWN = 'contentMousedown', CONTENT_MOUSEUP = 'contentMouseup', CONTENT_CONTEXTMENU = 'contentContextmenu', CONTENT_CLICK = 'contentClick', CONTENT_DBL_CLICK = 'contentDblclick', CONTENT_TOUCHSTART = 'contentTouchstart', CONTENT_TOUCHEND = 'contentTouchend', CONTENT_DBL_TAP = 'contentDbltap', CONTENT_TAP = 'contentTap', CONTENT_TOUCHMOVE = 'contentTouchmove', CONTENT_POINTERMOVE = 'contentPointermove', CONTENT_POINTERDOWN = 'contentPointerdown', CONTENT_POINTERUP = 'contentPointerup', CONTENT_WHEEL = 'contentWheel', RELATIVE = 'relative', KONVA_CONTENT = 'konvajs-content', SPACE = ' ', UNDERSCORE = '_', CONTAINER = 'container', MAX_LAYERS_NUMBER = 5, EMPTY_STRING = '', EVENTS = [
    MOUSEENTER,
    MOUSEDOWN,
    MOUSEMOVE,
    MOUSEUP,
    MOUSEOUT,
    TOUCHSTART,
    TOUCHMOVE,
    TOUCHEND,
    MOUSEOVER,
    WHEEL,
    CONTEXTMENU,
    POINTERDOWN,
    POINTERMOVE,
    POINTERUP,
    POINTERCANCEL,
    LOSTPOINTERCAPTURE
], eventsLength = EVENTS.length;
function addEvent(ctx, eventName) {
    ctx.content.addEventListener(eventName, function (evt) {
        ctx[UNDERSCORE + eventName](evt);
    }, false);
}
var NO_POINTERS_MESSAGE = "Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);";
exports.stages = [];
function checkNoClip(attrs) {
    if (attrs === void 0) { attrs = {}; }
    if (attrs.clipFunc || attrs.clipWidth || attrs.clipHeight) {
        Util_1.Util.warn('Stage does not support clipping. Please use clip for Layers or Groups.');
    }
    return attrs;
}
var Stage = (function (_super) {
    __extends(Stage, _super);
    function Stage(config) {
        var _this = _super.call(this, checkNoClip(config)) || this;
        _this._pointerPositions = [];
        _this._changedPointerPositions = [];
        _this._buildDOM();
        _this._bindContentEvents();
        exports.stages.push(_this);
        _this.on('widthChange.konva heightChange.konva', _this._resizeDOM);
        _this.on('visibleChange.konva', _this._checkVisibility);
        _this.on('clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva', function () {
            checkNoClip(_this.attrs);
        });
        _this._checkVisibility();
        return _this;
    }
    Stage.prototype._validateAdd = function (child) {
        var isLayer = child.getType() === 'Layer';
        var isFastLayer = child.getType() === 'FastLayer';
        var valid = isLayer || isFastLayer;
        if (!valid) {
            Util_1.Util.throw('You may only add layers to the stage.');
        }
    };
    Stage.prototype._checkVisibility = function () {
        if (!this.content) {
            return;
        }
        var style = this.visible() ? '' : 'none';
        this.content.style.display = style;
    };
    Stage.prototype.setContainer = function (container) {
        if (typeof container === STRING) {
            if (container.charAt(0) === '.') {
                var className = container.slice(1);
                container = document.getElementsByClassName(className)[0];
            }
            else {
                var id;
                if (container.charAt(0) !== '#') {
                    id = container;
                }
                else {
                    id = container.slice(1);
                }
                container = document.getElementById(id);
            }
            if (!container) {
                throw 'Can not find container in document with id ' + id;
            }
        }
        this._setAttr(CONTAINER, container);
        if (this.content) {
            if (this.content.parentElement) {
                this.content.parentElement.removeChild(this.content);
            }
            container.appendChild(this.content);
        }
        return this;
    };
    Stage.prototype.shouldDrawHit = function () {
        return true;
    };
    Stage.prototype.clear = function () {
        var layers = this.children, len = layers.length, n;
        for (n = 0; n < len; n++) {
            layers[n].clear();
        }
        return this;
    };
    Stage.prototype.clone = function (obj) {
        if (!obj) {
            obj = {};
        }
        obj.container = document.createElement('div');
        return Container_1.Container.prototype.clone.call(this, obj);
    };
    Stage.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        var content = this.content;
        if (content && Util_1.Util._isInDocument(content)) {
            this.container().removeChild(content);
        }
        var index = exports.stages.indexOf(this);
        if (index > -1) {
            exports.stages.splice(index, 1);
        }
        return this;
    };
    Stage.prototype.getPointerPosition = function () {
        var pos = this._pointerPositions[0] || this._changedPointerPositions[0];
        if (!pos) {
            Util_1.Util.warn(NO_POINTERS_MESSAGE);
            return null;
        }
        return {
            x: pos.x,
            y: pos.y
        };
    };
    Stage.prototype._getPointerById = function (id) {
        return this._pointerPositions.find(function (p) { return p.id === id; });
    };
    Stage.prototype.getPointersPositions = function () {
        return this._pointerPositions;
    };
    Stage.prototype.getStage = function () {
        return this;
    };
    Stage.prototype.getContent = function () {
        return this.content;
    };
    Stage.prototype._toKonvaCanvas = function (config) {
        config = config || {};
        var x = config.x || 0, y = config.y || 0, canvas = new Canvas_1.SceneCanvas({
            width: config.width || this.width(),
            height: config.height || this.height(),
            pixelRatio: config.pixelRatio || 1
        }), _context = canvas.getContext()._context, layers = this.children;
        if (x || y) {
            _context.translate(-1 * x, -1 * y);
        }
        layers.each(function (layer) {
            if (!layer.isVisible()) {
                return;
            }
            var layerCanvas = layer._toKonvaCanvas(config);
            _context.drawImage(layerCanvas._canvas, x, y, layerCanvas.getWidth() / layerCanvas.getPixelRatio(), layerCanvas.getHeight() / layerCanvas.getPixelRatio());
        });
        return canvas;
    };
    Stage.prototype.getIntersection = function (pos, selector) {
        if (!pos) {
            return null;
        }
        var layers = this.children, len = layers.length, end = len - 1, n, shape;
        for (n = end; n >= 0; n--) {
            shape = layers[n].getIntersection(pos, selector);
            if (shape) {
                return shape;
            }
        }
        return null;
    };
    Stage.prototype._resizeDOM = function () {
        var width = this.width();
        var height = this.height();
        if (this.content) {
            this.content.style.width = width + PX;
            this.content.style.height = height + PX;
        }
        this.bufferCanvas.setSize(width, height);
        this.bufferHitCanvas.setSize(width, height);
        this.children.each(function (layer) {
            layer.setSize({ width: width, height: height });
            layer.draw();
        });
    };
    Stage.prototype.add = function (layer) {
        if (arguments.length > 1) {
            for (var i = 0; i < arguments.length; i++) {
                this.add(arguments[i]);
            }
            return this;
        }
        _super.prototype.add.call(this, layer);
        var length = this.children.length;
        if (length > MAX_LAYERS_NUMBER) {
            Util_1.Util.warn('The stage has ' +
                length +
                ' layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group.');
        }
        layer.setSize({ width: this.width(), height: this.height() });
        layer.draw();
        if (Global_1.Konva.isBrowser) {
            this.content.appendChild(layer.canvas._canvas);
        }
        return this;
    };
    Stage.prototype.getParent = function () {
        return null;
    };
    Stage.prototype.getLayer = function () {
        return null;
    };
    Stage.prototype.hasPointerCapture = function (pointerId) {
        return PointerEvents.hasPointerCapture(pointerId, this);
    };
    Stage.prototype.setPointerCapture = function (pointerId) {
        PointerEvents.setPointerCapture(pointerId, this);
    };
    Stage.prototype.releaseCapture = function (pointerId) {
        PointerEvents.releaseCapture(pointerId, this);
    };
    Stage.prototype.getLayers = function () {
        return this.getChildren();
    };
    Stage.prototype._bindContentEvents = function () {
        if (!Global_1.Konva.isBrowser) {
            return;
        }
        for (var n = 0; n < eventsLength; n++) {
            addEvent(this, EVENTS[n]);
        }
    };
    Stage.prototype._mouseenter = function (evt) {
        this.setPointersPositions(evt);
        this._fire(MOUSEENTER, { evt: evt, target: this, currentTarget: this });
    };
    Stage.prototype._mouseover = function (evt) {
        this.setPointersPositions(evt);
        this._fire(CONTENT_MOUSEOVER, { evt: evt });
        this._fire(MOUSEOVER, { evt: evt, target: this, currentTarget: this });
    };
    Stage.prototype._mouseout = function (evt) {
        var _a;
        this.setPointersPositions(evt);
        var targetShape = ((_a = this.targetShape) === null || _a === void 0 ? void 0 : _a.getStage()) ? this.targetShape : null;
        var eventsEnabled = !DragAndDrop_1.DD.isDragging || Global_1.Konva.hitOnDragEnabled;
        if (targetShape && eventsEnabled) {
            targetShape._fireAndBubble(MOUSEOUT, { evt: evt });
            targetShape._fireAndBubble(MOUSELEAVE, { evt: evt });
            this._fire(MOUSELEAVE, { evt: evt, target: this, currentTarget: this });
            this.targetShape = null;
        }
        else if (eventsEnabled) {
            this._fire(MOUSELEAVE, {
                evt: evt,
                target: this,
                currentTarget: this
            });
            this._fire(MOUSEOUT, {
                evt: evt,
                target: this,
                currentTarget: this
            });
        }
        this.pointerPos = undefined;
        this._pointerPositions = [];
        this._fire(CONTENT_MOUSEOUT, { evt: evt });
    };
    Stage.prototype._mousemove = function (evt) {
        var _a;
        if (Global_1.Konva.UA.ieMobile) {
            return this._touchmove(evt);
        }
        this.setPointersPositions(evt);
        var pointerId = Util_1.Util._getFirstPointerId(evt);
        var shape;
        var targetShape = ((_a = this.targetShape) === null || _a === void 0 ? void 0 : _a.getStage()) ? this.targetShape : null;
        var eventsEnabled = !DragAndDrop_1.DD.isDragging || Global_1.Konva.hitOnDragEnabled;
        if (eventsEnabled) {
            shape = this.getIntersection(this.getPointerPosition());
            if (shape && shape.isListening()) {
                var differentTarget = targetShape !== shape;
                if (eventsEnabled && differentTarget) {
                    if (targetShape) {
                        targetShape._fireAndBubble(MOUSEOUT, { evt: evt, pointerId: pointerId }, shape);
                        targetShape._fireAndBubble(MOUSELEAVE, { evt: evt, pointerId: pointerId }, shape);
                    }
                    shape._fireAndBubble(MOUSEOVER, { evt: evt, pointerId: pointerId }, targetShape);
                    shape._fireAndBubble(MOUSEENTER, { evt: evt, pointerId: pointerId }, targetShape);
                    shape._fireAndBubble(MOUSEMOVE, { evt: evt, pointerId: pointerId });
                    this.targetShape = shape;
                }
                else {
                    shape._fireAndBubble(MOUSEMOVE, { evt: evt, pointerId: pointerId });
                }
            }
            else {
                if (targetShape && eventsEnabled) {
                    targetShape._fireAndBubble(MOUSEOUT, { evt: evt, pointerId: pointerId });
                    targetShape._fireAndBubble(MOUSELEAVE, { evt: evt, pointerId: pointerId });
                    this._fire(MOUSEOVER, {
                        evt: evt,
                        target: this,
                        currentTarget: this,
                        pointerId: pointerId
                    });
                    this.targetShape = null;
                }
                this._fire(MOUSEMOVE, {
                    evt: evt,
                    target: this,
                    currentTarget: this,
                    pointerId: pointerId
                });
            }
            this._fire(CONTENT_MOUSEMOVE, { evt: evt });
        }
        if (evt.cancelable) {
            evt.preventDefault();
        }
    };
    Stage.prototype._mousedown = function (evt) {
        if (Global_1.Konva.UA.ieMobile) {
            return this._touchstart(evt);
        }
        this.setPointersPositions(evt);
        var pointerId = Util_1.Util._getFirstPointerId(evt);
        var shape = this.getIntersection(this.getPointerPosition());
        DragAndDrop_1.DD.justDragged = false;
        Global_1.Konva.listenClickTap = true;
        if (shape && shape.isListening()) {
            this.clickStartShape = shape;
            shape._fireAndBubble(MOUSEDOWN, { evt: evt, pointerId: pointerId });
        }
        else {
            this._fire(MOUSEDOWN, {
                evt: evt,
                target: this,
                currentTarget: this,
                pointerId: pointerId
            });
        }
        this._fire(CONTENT_MOUSEDOWN, { evt: evt });
    };
    Stage.prototype._mouseup = function (evt) {
        if (Global_1.Konva.UA.ieMobile) {
            return this._touchend(evt);
        }
        this.setPointersPositions(evt);
        var pointerId = Util_1.Util._getFirstPointerId(evt);
        var shape = this.getIntersection(this.getPointerPosition()), clickStartShape = this.clickStartShape, clickEndShape = this.clickEndShape, fireDblClick = false;
        if (Global_1.Konva.inDblClickWindow) {
            fireDblClick = true;
            clearTimeout(this.dblTimeout);
        }
        else if (!DragAndDrop_1.DD.justDragged) {
            Global_1.Konva.inDblClickWindow = true;
            clearTimeout(this.dblTimeout);
        }
        this.dblTimeout = setTimeout(function () {
            Global_1.Konva.inDblClickWindow = false;
        }, Global_1.Konva.dblClickWindow);
        if (shape && shape.isListening()) {
            this.clickEndShape = shape;
            shape._fireAndBubble(MOUSEUP, { evt: evt, pointerId: pointerId });
            if (Global_1.Konva.listenClickTap &&
                clickStartShape &&
                clickStartShape._id === shape._id) {
                shape._fireAndBubble(CLICK, { evt: evt, pointerId: pointerId });
                if (fireDblClick && clickEndShape && clickEndShape === shape) {
                    shape._fireAndBubble(DBL_CLICK, { evt: evt, pointerId: pointerId });
                }
            }
        }
        else {
            this._fire(MOUSEUP, {
                evt: evt,
                target: this,
                currentTarget: this,
                pointerId: pointerId
            });
            if (Global_1.Konva.listenClickTap) {
                this._fire(CLICK, {
                    evt: evt,
                    target: this,
                    currentTarget: this,
                    pointerId: pointerId
                });
            }
            if (fireDblClick) {
                this._fire(DBL_CLICK, {
                    evt: evt,
                    target: this,
                    currentTarget: this,
                    pointerId: pointerId
                });
            }
        }
        this._fire(CONTENT_MOUSEUP, { evt: evt });
        if (Global_1.Konva.listenClickTap) {
            this._fire(CONTENT_CLICK, { evt: evt });
            if (fireDblClick) {
                this._fire(CONTENT_DBL_CLICK, { evt: evt });
            }
        }
        Global_1.Konva.listenClickTap = false;
        if (evt.cancelable) {
            evt.preventDefault();
        }
    };
    Stage.prototype._contextmenu = function (evt) {
        this.setPointersPositions(evt);
        var shape = this.getIntersection(this.getPointerPosition());
        if (shape && shape.isListening()) {
            shape._fireAndBubble(CONTEXTMENU, { evt: evt });
        }
        else {
            this._fire(CONTEXTMENU, {
                evt: evt,
                target: this,
                currentTarget: this
            });
        }
        this._fire(CONTENT_CONTEXTMENU, { evt: evt });
    };
    Stage.prototype._touchstart = function (evt) {
        var _this = this;
        this.setPointersPositions(evt);
        var triggeredOnShape = false;
        this._changedPointerPositions.forEach(function (pos) {
            var shape = _this.getIntersection(pos);
            Global_1.Konva.listenClickTap = true;
            DragAndDrop_1.DD.justDragged = false;
            var hasShape = shape && shape.isListening();
            if (!hasShape) {
                return;
            }
            if (Global_1.Konva.captureTouchEventsEnabled) {
                shape.setPointerCapture(pos.id);
            }
            _this.tapStartShape = shape;
            shape._fireAndBubble(TOUCHSTART, { evt: evt, pointerId: pos.id }, _this);
            triggeredOnShape = true;
            if (shape.isListening() && shape.preventDefault() && evt.cancelable) {
                evt.preventDefault();
            }
        });
        if (!triggeredOnShape) {
            this._fire(TOUCHSTART, {
                evt: evt,
                target: this,
                currentTarget: this,
                pointerId: this._changedPointerPositions[0].id
            });
        }
        this._fire(CONTENT_TOUCHSTART, { evt: evt });
    };
    Stage.prototype._touchmove = function (evt) {
        var _this = this;
        this.setPointersPositions(evt);
        var eventsEnabled = !DragAndDrop_1.DD.isDragging || Global_1.Konva.hitOnDragEnabled;
        if (eventsEnabled) {
            var triggeredOnShape = false;
            var processedShapesIds = {};
            this._changedPointerPositions.forEach(function (pos) {
                var shape = PointerEvents.getCapturedShape(pos.id) || _this.getIntersection(pos);
                var hasShape = shape && shape.isListening();
                if (!hasShape) {
                    return;
                }
                if (processedShapesIds[shape._id]) {
                    return;
                }
                processedShapesIds[shape._id] = true;
                shape._fireAndBubble(TOUCHMOVE, { evt: evt, pointerId: pos.id });
                triggeredOnShape = true;
                if (shape.isListening() && shape.preventDefault() && evt.cancelable) {
                    evt.preventDefault();
                }
            });
            if (!triggeredOnShape) {
                this._fire(TOUCHMOVE, {
                    evt: evt,
                    target: this,
                    currentTarget: this,
                    pointerId: this._changedPointerPositions[0].id
                });
            }
            this._fire(CONTENT_TOUCHMOVE, { evt: evt });
        }
        if (DragAndDrop_1.DD.isDragging && DragAndDrop_1.DD.node.preventDefault() && evt.cancelable) {
            evt.preventDefault();
        }
    };
    Stage.prototype._touchend = function (evt) {
        var _this = this;
        this.setPointersPositions(evt);
        var clickEndShape = this.clickEndShape, fireDblClick = false;
        if (Global_1.Konva.inDblClickWindow) {
            fireDblClick = true;
            clearTimeout(this.dblTimeout);
        }
        else if (!DragAndDrop_1.DD.justDragged) {
            Global_1.Konva.inDblClickWindow = true;
            clearTimeout(this.dblTimeout);
        }
        this.dblTimeout = setTimeout(function () {
            Global_1.Konva.inDblClickWindow = false;
        }, Global_1.Konva.dblClickWindow);
        var triggeredOnShape = false;
        var processedShapesIds = {};
        var tapTriggered = false;
        var dblTapTriggered = false;
        this._changedPointerPositions.forEach(function (pos) {
            var shape = PointerEvents.getCapturedShape(pos.id) ||
                _this.getIntersection(pos);
            if (shape) {
                shape.releaseCapture(pos.id);
            }
            var hasShape = shape && shape.isListening();
            if (!hasShape) {
                return;
            }
            if (processedShapesIds[shape._id]) {
                return;
            }
            processedShapesIds[shape._id] = true;
            _this.clickEndShape = shape;
            shape._fireAndBubble(TOUCHEND, { evt: evt, pointerId: pos.id });
            triggeredOnShape = true;
            if (Global_1.Konva.listenClickTap && shape === _this.tapStartShape) {
                tapTriggered = true;
                shape._fireAndBubble(TAP, { evt: evt, pointerId: pos.id });
                if (fireDblClick && clickEndShape && clickEndShape === shape) {
                    dblTapTriggered = true;
                    shape._fireAndBubble(DBL_TAP, { evt: evt, pointerId: pos.id });
                }
            }
            if (shape.isListening() && shape.preventDefault() && evt.cancelable) {
                evt.preventDefault();
            }
        });
        if (!triggeredOnShape) {
            this._fire(TOUCHEND, {
                evt: evt,
                target: this,
                currentTarget: this,
                pointerId: this._changedPointerPositions[0].id
            });
        }
        if (Global_1.Konva.listenClickTap && !tapTriggered) {
            this._fire(TAP, {
                evt: evt,
                target: this,
                currentTarget: this,
                pointerId: this._changedPointerPositions[0].id
            });
        }
        if (fireDblClick && !dblTapTriggered) {
            this._fire(DBL_TAP, {
                evt: evt,
                target: this,
                currentTarget: this,
                pointerId: this._changedPointerPositions[0].id
            });
        }
        this._fire(CONTENT_TOUCHEND, { evt: evt });
        if (Global_1.Konva.listenClickTap) {
            this._fire(CONTENT_TAP, { evt: evt });
            if (fireDblClick) {
                this._fire(CONTENT_DBL_TAP, { evt: evt });
            }
        }
        Global_1.Konva.listenClickTap = false;
    };
    Stage.prototype._wheel = function (evt) {
        this.setPointersPositions(evt);
        var shape = this.getIntersection(this.getPointerPosition());
        if (shape && shape.isListening()) {
            shape._fireAndBubble(WHEEL, { evt: evt });
        }
        else {
            this._fire(WHEEL, {
                evt: evt,
                target: this,
                currentTarget: this
            });
        }
        this._fire(CONTENT_WHEEL, { evt: evt });
    };
    Stage.prototype._pointerdown = function (evt) {
        if (!Global_1.Konva._pointerEventsEnabled) {
            return;
        }
        this.setPointersPositions(evt);
        var shape = PointerEvents.getCapturedShape(evt.pointerId) ||
            this.getIntersection(this.getPointerPosition());
        if (shape) {
            shape._fireAndBubble(POINTERDOWN, PointerEvents.createEvent(evt));
        }
    };
    Stage.prototype._pointermove = function (evt) {
        if (!Global_1.Konva._pointerEventsEnabled) {
            return;
        }
        this.setPointersPositions(evt);
        var shape = PointerEvents.getCapturedShape(evt.pointerId) ||
            this.getIntersection(this.getPointerPosition());
        if (shape) {
            shape._fireAndBubble(POINTERMOVE, PointerEvents.createEvent(evt));
        }
    };
    Stage.prototype._pointerup = function (evt) {
        if (!Global_1.Konva._pointerEventsEnabled) {
            return;
        }
        this.setPointersPositions(evt);
        var shape = PointerEvents.getCapturedShape(evt.pointerId) ||
            this.getIntersection(this.getPointerPosition());
        if (shape) {
            shape._fireAndBubble(POINTERUP, PointerEvents.createEvent(evt));
        }
        PointerEvents.releaseCapture(evt.pointerId);
    };
    Stage.prototype._pointercancel = function (evt) {
        if (!Global_1.Konva._pointerEventsEnabled) {
            return;
        }
        this.setPointersPositions(evt);
        var shape = PointerEvents.getCapturedShape(evt.pointerId) ||
            this.getIntersection(this.getPointerPosition());
        if (shape) {
            shape._fireAndBubble(POINTERUP, PointerEvents.createEvent(evt));
        }
        PointerEvents.releaseCapture(evt.pointerId);
    };
    Stage.prototype._lostpointercapture = function (evt) {
        PointerEvents.releaseCapture(evt.pointerId);
    };
    Stage.prototype.setPointersPositions = function (evt) {
        var _this = this;
        var contentPosition = this._getContentPosition(), x = null, y = null;
        evt = evt ? evt : window.event;
        if (evt.touches !== undefined) {
            this._pointerPositions = [];
            this._changedPointerPositions = [];
            Util_1.Collection.prototype.each.call(evt.touches, function (touch) {
                _this._pointerPositions.push({
                    id: touch.identifier,
                    x: (touch.clientX - contentPosition.left) / contentPosition.scaleX,
                    y: (touch.clientY - contentPosition.top) / contentPosition.scaleY
                });
            });
            Util_1.Collection.prototype.each.call(evt.changedTouches || evt.touches, function (touch) {
                _this._changedPointerPositions.push({
                    id: touch.identifier,
                    x: (touch.clientX - contentPosition.left) / contentPosition.scaleX,
                    y: (touch.clientY - contentPosition.top) / contentPosition.scaleY
                });
            });
        }
        else {
            x = (evt.clientX - contentPosition.left) / contentPosition.scaleX;
            y = (evt.clientY - contentPosition.top) / contentPosition.scaleY;
            this.pointerPos = {
                x: x,
                y: y
            };
            this._pointerPositions = [{ x: x, y: y, id: Util_1.Util._getFirstPointerId(evt) }];
            this._changedPointerPositions = [
                { x: x, y: y, id: Util_1.Util._getFirstPointerId(evt) }
            ];
        }
    };
    Stage.prototype._setPointerPosition = function (evt) {
        Util_1.Util.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.');
        this.setPointersPositions(evt);
    };
    Stage.prototype._getContentPosition = function () {
        if (!this.content || !this.content.getBoundingClientRect) {
            return {
                top: 0,
                left: 0,
                scaleX: 1,
                scaleY: 1
            };
        }
        var rect = this.content.getBoundingClientRect();
        return {
            top: rect.top,
            left: rect.left,
            scaleX: rect.width / this.content.clientWidth || 1,
            scaleY: rect.height / this.content.clientHeight || 1
        };
    };
    Stage.prototype._buildDOM = function () {
        this.bufferCanvas = new Canvas_1.SceneCanvas({
            width: this.width(),
            height: this.height()
        });
        this.bufferHitCanvas = new Canvas_1.HitCanvas({
            pixelRatio: 1,
            width: this.width(),
            height: this.height()
        });
        if (!Global_1.Konva.isBrowser) {
            return;
        }
        var container = this.container();
        if (!container) {
            throw 'Stage has no container. A container is required.';
        }
        container.innerHTML = EMPTY_STRING;
        this.content = document.createElement('div');
        this.content.style.position = RELATIVE;
        this.content.style.userSelect = 'none';
        this.content.className = KONVA_CONTENT;
        this.content.setAttribute('role', 'presentation');
        container.appendChild(this.content);
        this._resizeDOM();
    };
    Stage.prototype.cache = function () {
        Util_1.Util.warn('Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.');
        return this;
    };
    Stage.prototype.clearCache = function () {
        return this;
    };
    Stage.prototype.batchDraw = function () {
        this.children.each(function (layer) {
            layer.batchDraw();
        });
        return this;
    };
    return Stage;
}(Container_1.Container));
exports.Stage = Stage;
Stage.prototype.nodeType = STAGE;
Global_2._registerNode(Stage);
Factory_1.Factory.addGetterSetter(Stage, 'container');

},{"./Canvas":8,"./Container":9,"./DragAndDrop":11,"./Factory":12,"./Global":14,"./PointerEvents":18,"./Util":22}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("./Util");
var Animation_1 = require("./Animation");
var Node_1 = require("./Node");
var Global_1 = require("./Global");
var blacklist = {
    node: 1,
    duration: 1,
    easing: 1,
    onFinish: 1,
    yoyo: 1
}, PAUSED = 1, PLAYING = 2, REVERSING = 3, idCounter = 0, colorAttrs = ['fill', 'stroke', 'shadowColor'];
var TweenEngine = (function () {
    function TweenEngine(prop, propFunc, func, begin, finish, duration, yoyo) {
        this.prop = prop;
        this.propFunc = propFunc;
        this.begin = begin;
        this._pos = begin;
        this.duration = duration;
        this._change = 0;
        this.prevPos = 0;
        this.yoyo = yoyo;
        this._time = 0;
        this._position = 0;
        this._startTime = 0;
        this._finish = 0;
        this.func = func;
        this._change = finish - this.begin;
        this.pause();
    }
    TweenEngine.prototype.fire = function (str) {
        var handler = this[str];
        if (handler) {
            handler();
        }
    };
    TweenEngine.prototype.setTime = function (t) {
        if (t > this.duration) {
            if (this.yoyo) {
                this._time = this.duration;
                this.reverse();
            }
            else {
                this.finish();
            }
        }
        else if (t < 0) {
            if (this.yoyo) {
                this._time = 0;
                this.play();
            }
            else {
                this.reset();
            }
        }
        else {
            this._time = t;
            this.update();
        }
    };
    TweenEngine.prototype.getTime = function () {
        return this._time;
    };
    TweenEngine.prototype.setPosition = function (p) {
        this.prevPos = this._pos;
        this.propFunc(p);
        this._pos = p;
    };
    TweenEngine.prototype.getPosition = function (t) {
        if (t === undefined) {
            t = this._time;
        }
        return this.func(t, this.begin, this._change, this.duration);
    };
    TweenEngine.prototype.play = function () {
        this.state = PLAYING;
        this._startTime = this.getTimer() - this._time;
        this.onEnterFrame();
        this.fire('onPlay');
    };
    TweenEngine.prototype.reverse = function () {
        this.state = REVERSING;
        this._time = this.duration - this._time;
        this._startTime = this.getTimer() - this._time;
        this.onEnterFrame();
        this.fire('onReverse');
    };
    TweenEngine.prototype.seek = function (t) {
        this.pause();
        this._time = t;
        this.update();
        this.fire('onSeek');
    };
    TweenEngine.prototype.reset = function () {
        this.pause();
        this._time = 0;
        this.update();
        this.fire('onReset');
    };
    TweenEngine.prototype.finish = function () {
        this.pause();
        this._time = this.duration;
        this.update();
        this.fire('onFinish');
    };
    TweenEngine.prototype.update = function () {
        this.setPosition(this.getPosition(this._time));
    };
    TweenEngine.prototype.onEnterFrame = function () {
        var t = this.getTimer() - this._startTime;
        if (this.state === PLAYING) {
            this.setTime(t);
        }
        else if (this.state === REVERSING) {
            this.setTime(this.duration - t);
        }
    };
    TweenEngine.prototype.pause = function () {
        this.state = PAUSED;
        this.fire('onPause');
    };
    TweenEngine.prototype.getTimer = function () {
        return new Date().getTime();
    };
    return TweenEngine;
}());
var Tween = (function () {
    function Tween(config) {
        var that = this, node = config.node, nodeId = node._id, duration, easing = config.easing || exports.Easings.Linear, yoyo = !!config.yoyo, key;
        if (typeof config.duration === 'undefined') {
            duration = 0.3;
        }
        else if (config.duration === 0) {
            duration = 0.001;
        }
        else {
            duration = config.duration;
        }
        this.node = node;
        this._id = idCounter++;
        var layers = node.getLayer() ||
            (node instanceof Global_1.Konva['Stage'] ? node.getLayers() : null);
        if (!layers) {
            Util_1.Util.error('Tween constructor have `node` that is not in a layer. Please add node into layer first.');
        }
        this.anim = new Animation_1.Animation(function () {
            that.tween.onEnterFrame();
        }, layers);
        this.tween = new TweenEngine(key, function (i) {
            that._tweenFunc(i);
        }, easing, 0, 1, duration * 1000, yoyo);
        this._addListeners();
        if (!Tween.attrs[nodeId]) {
            Tween.attrs[nodeId] = {};
        }
        if (!Tween.attrs[nodeId][this._id]) {
            Tween.attrs[nodeId][this._id] = {};
        }
        if (!Tween.tweens[nodeId]) {
            Tween.tweens[nodeId] = {};
        }
        for (key in config) {
            if (blacklist[key] === undefined) {
                this._addAttr(key, config[key]);
            }
        }
        this.reset();
        this.onFinish = config.onFinish;
        this.onReset = config.onReset;
    }
    Tween.prototype._addAttr = function (key, end) {
        var node = this.node, nodeId = node._id, start, diff, tweenId, n, len, trueEnd, trueStart, endRGBA;
        tweenId = Tween.tweens[nodeId][key];
        if (tweenId) {
            delete Tween.attrs[nodeId][tweenId][key];
        }
        start = node.getAttr(key);
        if (Util_1.Util._isArray(end)) {
            diff = [];
            len = Math.max(end.length, start.length);
            if (key === 'points' && end.length !== start.length) {
                if (end.length > start.length) {
                    trueStart = start;
                    start = Util_1.Util._prepareArrayForTween(start, end, node.closed());
                }
                else {
                    trueEnd = end;
                    end = Util_1.Util._prepareArrayForTween(end, start, node.closed());
                }
            }
            if (key.indexOf('fill') === 0) {
                for (n = 0; n < len; n++) {
                    if (n % 2 === 0) {
                        diff.push(end[n] - start[n]);
                    }
                    else {
                        var startRGBA = Util_1.Util.colorToRGBA(start[n]);
                        endRGBA = Util_1.Util.colorToRGBA(end[n]);
                        start[n] = startRGBA;
                        diff.push({
                            r: endRGBA.r - startRGBA.r,
                            g: endRGBA.g - startRGBA.g,
                            b: endRGBA.b - startRGBA.b,
                            a: endRGBA.a - startRGBA.a
                        });
                    }
                }
            }
            else {
                for (n = 0; n < len; n++) {
                    diff.push(end[n] - start[n]);
                }
            }
        }
        else if (colorAttrs.indexOf(key) !== -1) {
            start = Util_1.Util.colorToRGBA(start);
            endRGBA = Util_1.Util.colorToRGBA(end);
            diff = {
                r: endRGBA.r - start.r,
                g: endRGBA.g - start.g,
                b: endRGBA.b - start.b,
                a: endRGBA.a - start.a
            };
        }
        else {
            diff = end - start;
        }
        Tween.attrs[nodeId][this._id][key] = {
            start: start,
            diff: diff,
            end: end,
            trueEnd: trueEnd,
            trueStart: trueStart
        };
        Tween.tweens[nodeId][key] = this._id;
    };
    Tween.prototype._tweenFunc = function (i) {
        var node = this.node, attrs = Tween.attrs[node._id][this._id], key, attr, start, diff, newVal, n, len, end;
        for (key in attrs) {
            attr = attrs[key];
            start = attr.start;
            diff = attr.diff;
            end = attr.end;
            if (Util_1.Util._isArray(start)) {
                newVal = [];
                len = Math.max(start.length, end.length);
                if (key.indexOf('fill') === 0) {
                    for (n = 0; n < len; n++) {
                        if (n % 2 === 0) {
                            newVal.push((start[n] || 0) + diff[n] * i);
                        }
                        else {
                            newVal.push('rgba(' +
                                Math.round(start[n].r + diff[n].r * i) +
                                ',' +
                                Math.round(start[n].g + diff[n].g * i) +
                                ',' +
                                Math.round(start[n].b + diff[n].b * i) +
                                ',' +
                                (start[n].a + diff[n].a * i) +
                                ')');
                        }
                    }
                }
                else {
                    for (n = 0; n < len; n++) {
                        newVal.push((start[n] || 0) + diff[n] * i);
                    }
                }
            }
            else if (colorAttrs.indexOf(key) !== -1) {
                newVal =
                    'rgba(' +
                        Math.round(start.r + diff.r * i) +
                        ',' +
                        Math.round(start.g + diff.g * i) +
                        ',' +
                        Math.round(start.b + diff.b * i) +
                        ',' +
                        (start.a + diff.a * i) +
                        ')';
            }
            else {
                newVal = start + diff * i;
            }
            node.setAttr(key, newVal);
        }
    };
    Tween.prototype._addListeners = function () {
        var _this = this;
        this.tween.onPlay = function () {
            _this.anim.start();
        };
        this.tween.onReverse = function () {
            _this.anim.start();
        };
        this.tween.onPause = function () {
            _this.anim.stop();
        };
        this.tween.onFinish = function () {
            var node = _this.node;
            var attrs = Tween.attrs[node._id][_this._id];
            if (attrs.points && attrs.points.trueEnd) {
                node.setAttr('points', attrs.points.trueEnd);
            }
            if (_this.onFinish) {
                _this.onFinish.call(_this);
            }
        };
        this.tween.onReset = function () {
            var node = _this.node;
            var attrs = Tween.attrs[node._id][_this._id];
            if (attrs.points && attrs.points.trueStart) {
                node.points(attrs.points.trueStart);
            }
            if (_this.onReset) {
                _this.onReset();
            }
        };
    };
    Tween.prototype.play = function () {
        this.tween.play();
        return this;
    };
    Tween.prototype.reverse = function () {
        this.tween.reverse();
        return this;
    };
    Tween.prototype.reset = function () {
        this.tween.reset();
        return this;
    };
    Tween.prototype.seek = function (t) {
        this.tween.seek(t * 1000);
        return this;
    };
    Tween.prototype.pause = function () {
        this.tween.pause();
        return this;
    };
    Tween.prototype.finish = function () {
        this.tween.finish();
        return this;
    };
    Tween.prototype.destroy = function () {
        var nodeId = this.node._id, thisId = this._id, attrs = Tween.tweens[nodeId], key;
        this.pause();
        for (key in attrs) {
            delete Tween.tweens[nodeId][key];
        }
        delete Tween.attrs[nodeId][thisId];
    };
    Tween.attrs = {};
    Tween.tweens = {};
    return Tween;
}());
exports.Tween = Tween;
Node_1.Node.prototype.to = function (params) {
    var onFinish = params.onFinish;
    params.node = this;
    params.onFinish = function () {
        this.destroy();
        if (onFinish) {
            onFinish();
        }
    };
    var tween = new Tween(params);
    tween.play();
};
exports.Easings = {
    BackEaseIn: function (t, b, c, d) {
        var s = 1.70158;
        return c * (t /= d) * t * ((s + 1) * t - s) + b;
    },
    BackEaseOut: function (t, b, c, d) {
        var s = 1.70158;
        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
    },
    BackEaseInOut: function (t, b, c, d) {
        var s = 1.70158;
        if ((t /= d / 2) < 1) {
            return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
        }
        return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
    },
    ElasticEaseIn: function (t, b, c, d, a, p) {
        var s = 0;
        if (t === 0) {
            return b;
        }
        if ((t /= d) === 1) {
            return b + c;
        }
        if (!p) {
            p = d * 0.3;
        }
        if (!a || a < Math.abs(c)) {
            a = c;
            s = p / 4;
        }
        else {
            s = (p / (2 * Math.PI)) * Math.asin(c / a);
        }
        return (-(a *
            Math.pow(2, 10 * (t -= 1)) *
            Math.sin(((t * d - s) * (2 * Math.PI)) / p)) + b);
    },
    ElasticEaseOut: function (t, b, c, d, a, p) {
        var s = 0;
        if (t === 0) {
            return b;
        }
        if ((t /= d) === 1) {
            return b + c;
        }
        if (!p) {
            p = d * 0.3;
        }
        if (!a || a < Math.abs(c)) {
            a = c;
            s = p / 4;
        }
        else {
            s = (p / (2 * Math.PI)) * Math.asin(c / a);
        }
        return (a * Math.pow(2, -10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) +
            c +
            b);
    },
    ElasticEaseInOut: function (t, b, c, d, a, p) {
        var s = 0;
        if (t === 0) {
            return b;
        }
        if ((t /= d / 2) === 2) {
            return b + c;
        }
        if (!p) {
            p = d * (0.3 * 1.5);
        }
        if (!a || a < Math.abs(c)) {
            a = c;
            s = p / 4;
        }
        else {
            s = (p / (2 * Math.PI)) * Math.asin(c / a);
        }
        if (t < 1) {
            return (-0.5 *
                (a *
                    Math.pow(2, 10 * (t -= 1)) *
                    Math.sin(((t * d - s) * (2 * Math.PI)) / p)) +
                b);
        }
        return (a *
            Math.pow(2, -10 * (t -= 1)) *
            Math.sin(((t * d - s) * (2 * Math.PI)) / p) *
            0.5 +
            c +
            b);
    },
    BounceEaseOut: function (t, b, c, d) {
        if ((t /= d) < 1 / 2.75) {
            return c * (7.5625 * t * t) + b;
        }
        else if (t < 2 / 2.75) {
            return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
        }
        else if (t < 2.5 / 2.75) {
            return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
        }
        else {
            return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
        }
    },
    BounceEaseIn: function (t, b, c, d) {
        return c - exports.Easings.BounceEaseOut(d - t, 0, c, d) + b;
    },
    BounceEaseInOut: function (t, b, c, d) {
        if (t < d / 2) {
            return exports.Easings.BounceEaseIn(t * 2, 0, c, d) * 0.5 + b;
        }
        else {
            return exports.Easings.BounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
        }
    },
    EaseIn: function (t, b, c, d) {
        return c * (t /= d) * t + b;
    },
    EaseOut: function (t, b, c, d) {
        return -c * (t /= d) * (t - 2) + b;
    },
    EaseInOut: function (t, b, c, d) {
        if ((t /= d / 2) < 1) {
            return (c / 2) * t * t + b;
        }
        return (-c / 2) * (--t * (t - 2) - 1) + b;
    },
    StrongEaseIn: function (t, b, c, d) {
        return c * (t /= d) * t * t * t * t + b;
    },
    StrongEaseOut: function (t, b, c, d) {
        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
    },
    StrongEaseInOut: function (t, b, c, d) {
        if ((t /= d / 2) < 1) {
            return (c / 2) * t * t * t * t * t + b;
        }
        return (c / 2) * ((t -= 2) * t * t * t * t + 2) + b;
    },
    Linear: function (t, b, c, d) {
        return (c * t) / d + b;
    }
};

},{"./Animation":6,"./Global":14,"./Node":17,"./Util":22}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global_1 = require("./Global");
var Collection = (function () {
    function Collection() {
    }
    Collection.toCollection = function (arr) {
        var collection = new Collection(), len = arr.length, n;
        for (n = 0; n < len; n++) {
            collection.push(arr[n]);
        }
        return collection;
    };
    Collection._mapMethod = function (methodName) {
        Collection.prototype[methodName] = function () {
            var len = this.length, i;
            var args = [].slice.call(arguments);
            for (i = 0; i < len; i++) {
                this[i][methodName].apply(this[i], args);
            }
            return this;
        };
    };
    Collection.mapMethods = function (constructor) {
        var prot = constructor.prototype;
        for (var methodName in prot) {
            Collection._mapMethod(methodName);
        }
    };
    return Collection;
}());
exports.Collection = Collection;
Collection.prototype = [];
Collection.prototype.each = function (func) {
    for (var n = 0; n < this.length; n++) {
        func(this[n], n);
    }
};
Collection.prototype.toArray = function () {
    var arr = [], len = this.length, n;
    for (n = 0; n < len; n++) {
        arr.push(this[n]);
    }
    return arr;
};
var Transform = (function () {
    function Transform(m) {
        if (m === void 0) { m = [1, 0, 0, 1, 0, 0]; }
        this.m = (m && m.slice()) || [1, 0, 0, 1, 0, 0];
    }
    Transform.prototype.copy = function () {
        return new Transform(this.m);
    };
    Transform.prototype.point = function (point) {
        var m = this.m;
        return {
            x: m[0] * point.x + m[2] * point.y + m[4],
            y: m[1] * point.x + m[3] * point.y + m[5]
        };
    };
    Transform.prototype.translate = function (x, y) {
        this.m[4] += this.m[0] * x + this.m[2] * y;
        this.m[5] += this.m[1] * x + this.m[3] * y;
        return this;
    };
    Transform.prototype.scale = function (sx, sy) {
        this.m[0] *= sx;
        this.m[1] *= sx;
        this.m[2] *= sy;
        this.m[3] *= sy;
        return this;
    };
    Transform.prototype.rotate = function (rad) {
        var c = Math.cos(rad);
        var s = Math.sin(rad);
        var m11 = this.m[0] * c + this.m[2] * s;
        var m12 = this.m[1] * c + this.m[3] * s;
        var m21 = this.m[0] * -s + this.m[2] * c;
        var m22 = this.m[1] * -s + this.m[3] * c;
        this.m[0] = m11;
        this.m[1] = m12;
        this.m[2] = m21;
        this.m[3] = m22;
        return this;
    };
    Transform.prototype.getTranslation = function () {
        return {
            x: this.m[4],
            y: this.m[5]
        };
    };
    Transform.prototype.skew = function (sx, sy) {
        var m11 = this.m[0] + this.m[2] * sy;
        var m12 = this.m[1] + this.m[3] * sy;
        var m21 = this.m[2] + this.m[0] * sx;
        var m22 = this.m[3] + this.m[1] * sx;
        this.m[0] = m11;
        this.m[1] = m12;
        this.m[2] = m21;
        this.m[3] = m22;
        return this;
    };
    Transform.prototype.multiply = function (matrix) {
        var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];
        var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];
        var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];
        var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];
        var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];
        var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];
        this.m[0] = m11;
        this.m[1] = m12;
        this.m[2] = m21;
        this.m[3] = m22;
        this.m[4] = dx;
        this.m[5] = dy;
        return this;
    };
    Transform.prototype.invert = function () {
        var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);
        var m0 = this.m[3] * d;
        var m1 = -this.m[1] * d;
        var m2 = -this.m[2] * d;
        var m3 = this.m[0] * d;
        var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);
        var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
        this.m[0] = m0;
        this.m[1] = m1;
        this.m[2] = m2;
        this.m[3] = m3;
        this.m[4] = m4;
        this.m[5] = m5;
        return this;
    };
    Transform.prototype.getMatrix = function () {
        return this.m;
    };
    Transform.prototype.setAbsolutePosition = function (x, y) {
        var m0 = this.m[0], m1 = this.m[1], m2 = this.m[2], m3 = this.m[3], m4 = this.m[4], m5 = this.m[5], yt = (m0 * (y - m5) - m1 * (x - m4)) / (m0 * m3 - m1 * m2), xt = (x - m4 - m2 * yt) / m0;
        return this.translate(xt, yt);
    };
    Transform.prototype.decompose = function () {
        var a = this.m[0];
        var b = this.m[1];
        var c = this.m[2];
        var d = this.m[3];
        var e = this.m[4];
        var f = this.m[5];
        var delta = a * d - b * c;
        var result = {
            x: e,
            y: f,
            rotation: 0,
            scaleX: 0,
            scaleY: 0,
            skewX: 0,
            skewY: 0
        };
        if (a != 0 || b != 0) {
            var r = Math.sqrt(a * a + b * b);
            result.rotation = b > 0 ? Math.acos(a / r) : -Math.acos(a / r);
            result.scaleX = r;
            result.scaleY = delta / r;
            result.skewX = (a * c + b * d) / delta;
            result.skewY = 0;
        }
        else if (c != 0 || d != 0) {
            var s = Math.sqrt(c * c + d * d);
            result.rotation =
                Math.PI / 2 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));
            result.scaleX = delta / s;
            result.scaleY = s;
            result.skewX = 0;
            result.skewY = (a * c + b * d) / delta;
        }
        else {
        }
        result.rotation = exports.Util._getRotation(result.rotation);
        return result;
    };
    return Transform;
}());
exports.Transform = Transform;
var OBJECT_ARRAY = '[object Array]', OBJECT_NUMBER = '[object Number]', OBJECT_STRING = '[object String]', OBJECT_BOOLEAN = '[object Boolean]', PI_OVER_DEG180 = Math.PI / 180, DEG180_OVER_PI = 180 / Math.PI, HASH = '#', EMPTY_STRING = '', ZERO = '0', KONVA_WARNING = 'Konva warning: ', KONVA_ERROR = 'Konva error: ', RGB_PAREN = 'rgb(', COLORS = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 132, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 255, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 203],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [119, 128, 144],
    slategrey: [119, 128, 144],
    snow: [255, 255, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    transparent: [255, 255, 255, 0],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 5]
}, RGB_REGEX = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/, animQueue = [];
exports.Util = {
    _isElement: function (obj) {
        return !!(obj && obj.nodeType == 1);
    },
    _isFunction: function (obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
    },
    _isPlainObject: function (obj) {
        return !!obj && obj.constructor === Object;
    },
    _isArray: function (obj) {
        return Object.prototype.toString.call(obj) === OBJECT_ARRAY;
    },
    _isNumber: function (obj) {
        return (Object.prototype.toString.call(obj) === OBJECT_NUMBER &&
            !isNaN(obj) &&
            isFinite(obj));
    },
    _isString: function (obj) {
        return Object.prototype.toString.call(obj) === OBJECT_STRING;
    },
    _isBoolean: function (obj) {
        return Object.prototype.toString.call(obj) === OBJECT_BOOLEAN;
    },
    isObject: function (val) {
        return val instanceof Object;
    },
    isValidSelector: function (selector) {
        if (typeof selector !== 'string') {
            return false;
        }
        var firstChar = selector[0];
        return (firstChar === '#' ||
            firstChar === '.' ||
            firstChar === firstChar.toUpperCase());
    },
    _sign: function (number) {
        if (number === 0) {
            return 0;
        }
        if (number > 0) {
            return 1;
        }
        else {
            return -1;
        }
    },
    requestAnimFrame: function (callback) {
        animQueue.push(callback);
        if (animQueue.length === 1) {
            requestAnimationFrame(function () {
                var queue = animQueue;
                animQueue = [];
                queue.forEach(function (cb) {
                    cb();
                });
            });
        }
    },
    createCanvasElement: function () {
        var canvas = document.createElement('canvas');
        try {
            canvas.style = canvas.style || {};
        }
        catch (e) { }
        return canvas;
    },
    createImageElement: function () {
        return document.createElement('img');
    },
    _isInDocument: function (el) {
        while ((el = el.parentNode)) {
            if (el == document) {
                return true;
            }
        }
        return false;
    },
    _simplifyArray: function (arr) {
        var retArr = [], len = arr.length, util = exports.Util, n, val;
        for (n = 0; n < len; n++) {
            val = arr[n];
            if (util._isNumber(val)) {
                val = Math.round(val * 1000) / 1000;
            }
            else if (!util._isString(val)) {
                val = val.toString();
            }
            retArr.push(val);
        }
        return retArr;
    },
    _urlToImage: function (url, callback) {
        var imageObj = new Global_1.glob.Image();
        imageObj.onload = function () {
            callback(imageObj);
        };
        imageObj.src = url;
    },
    _rgbToHex: function (r, g, b) {
        return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    },
    _hexToRgb: function (hex) {
        hex = hex.replace(HASH, EMPTY_STRING);
        var bigint = parseInt(hex, 16);
        return {
            r: (bigint >> 16) & 255,
            g: (bigint >> 8) & 255,
            b: bigint & 255
        };
    },
    getRandomColor: function () {
        var randColor = ((Math.random() * 0xffffff) << 0).toString(16);
        while (randColor.length < 6) {
            randColor = ZERO + randColor;
        }
        return HASH + randColor;
    },
    get: function (val, def) {
        if (val === undefined) {
            return def;
        }
        else {
            return val;
        }
    },
    getRGB: function (color) {
        var rgb;
        if (color in COLORS) {
            rgb = COLORS[color];
            return {
                r: rgb[0],
                g: rgb[1],
                b: rgb[2]
            };
        }
        else if (color[0] === HASH) {
            return this._hexToRgb(color.substring(1));
        }
        else if (color.substr(0, 4) === RGB_PAREN) {
            rgb = RGB_REGEX.exec(color.replace(/ /g, ''));
            return {
                r: parseInt(rgb[1], 10),
                g: parseInt(rgb[2], 10),
                b: parseInt(rgb[3], 10)
            };
        }
        else {
            return {
                r: 0,
                g: 0,
                b: 0
            };
        }
    },
    colorToRGBA: function (str) {
        str = str || 'black';
        return (exports.Util._namedColorToRBA(str) ||
            exports.Util._hex3ColorToRGBA(str) ||
            exports.Util._hex6ColorToRGBA(str) ||
            exports.Util._rgbColorToRGBA(str) ||
            exports.Util._rgbaColorToRGBA(str) ||
            exports.Util._hslColorToRGBA(str));
    },
    _namedColorToRBA: function (str) {
        var c = COLORS[str.toLowerCase()];
        if (!c) {
            return null;
        }
        return {
            r: c[0],
            g: c[1],
            b: c[2],
            a: 1
        };
    },
    _rgbColorToRGBA: function (str) {
        if (str.indexOf('rgb(') === 0) {
            str = str.match(/rgb\(([^)]+)\)/)[1];
            var parts = str.split(/ *, */).map(Number);
            return {
                r: parts[0],
                g: parts[1],
                b: parts[2],
                a: 1
            };
        }
    },
    _rgbaColorToRGBA: function (str) {
        if (str.indexOf('rgba(') === 0) {
            str = str.match(/rgba\(([^)]+)\)/)[1];
            var parts = str.split(/ *, */).map(Number);
            return {
                r: parts[0],
                g: parts[1],
                b: parts[2],
                a: parts[3]
            };
        }
    },
    _hex6ColorToRGBA: function (str) {
        if (str[0] === '#' && str.length === 7) {
            return {
                r: parseInt(str.slice(1, 3), 16),
                g: parseInt(str.slice(3, 5), 16),
                b: parseInt(str.slice(5, 7), 16),
                a: 1
            };
        }
    },
    _hex3ColorToRGBA: function (str) {
        if (str[0] === '#' && str.length === 4) {
            return {
                r: parseInt(str[1] + str[1], 16),
                g: parseInt(str[2] + str[2], 16),
                b: parseInt(str[3] + str[3], 16),
                a: 1
            };
        }
    },
    _hslColorToRGBA: function (str) {
        if (/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(str)) {
            var _a = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(str), _ = _a[0], hsl = _a.slice(1);
            var h = Number(hsl[0]) / 360;
            var s = Number(hsl[1]) / 100;
            var l = Number(hsl[2]) / 100;
            var t2 = void 0;
            var t3 = void 0;
            var val = void 0;
            if (s === 0) {
                val = l * 255;
                return {
                    r: Math.round(val),
                    g: Math.round(val),
                    b: Math.round(val),
                    a: 1
                };
            }
            if (l < 0.5) {
                t2 = l * (1 + s);
            }
            else {
                t2 = l + s - l * s;
            }
            var t1 = 2 * l - t2;
            var rgb = [0, 0, 0];
            for (var i = 0; i < 3; i++) {
                t3 = h + (1 / 3) * -(i - 1);
                if (t3 < 0) {
                    t3++;
                }
                if (t3 > 1) {
                    t3--;
                }
                if (6 * t3 < 1) {
                    val = t1 + (t2 - t1) * 6 * t3;
                }
                else if (2 * t3 < 1) {
                    val = t2;
                }
                else if (3 * t3 < 2) {
                    val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
                }
                else {
                    val = t1;
                }
                rgb[i] = val * 255;
            }
            return {
                r: Math.round(rgb[0]),
                g: Math.round(rgb[1]),
                b: Math.round(rgb[2]),
                a: 1
            };
        }
    },
    haveIntersection: function (r1, r2) {
        return !(r2.x > r1.x + r1.width ||
            r2.x + r2.width < r1.x ||
            r2.y > r1.y + r1.height ||
            r2.y + r2.height < r1.y);
    },
    cloneObject: function (obj) {
        var retObj = {};
        for (var key in obj) {
            if (this._isPlainObject(obj[key])) {
                retObj[key] = this.cloneObject(obj[key]);
            }
            else if (this._isArray(obj[key])) {
                retObj[key] = this.cloneArray(obj[key]);
            }
            else {
                retObj[key] = obj[key];
            }
        }
        return retObj;
    },
    cloneArray: function (arr) {
        return arr.slice(0);
    },
    _degToRad: function (deg) {
        return deg * PI_OVER_DEG180;
    },
    _radToDeg: function (rad) {
        return rad * DEG180_OVER_PI;
    },
    _getRotation: function (radians) {
        return Global_1.Konva.angleDeg ? exports.Util._radToDeg(radians) : radians;
    },
    _capitalize: function (str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    },
    throw: function (str) {
        throw new Error(KONVA_ERROR + str);
    },
    error: function (str) {
        console.error(KONVA_ERROR + str);
    },
    warn: function (str) {
        if (!Global_1.Konva.showWarnings) {
            return;
        }
        console.warn(KONVA_WARNING + str);
    },
    extend: function (child, parent) {
        function Ctor() {
            this.constructor = child;
        }
        Ctor.prototype = parent.prototype;
        var oldProto = child.prototype;
        child.prototype = new Ctor();
        for (var key in oldProto) {
            if (oldProto.hasOwnProperty(key)) {
                child.prototype[key] = oldProto[key];
            }
        }
        child.__super__ = parent.prototype;
        child.super = parent;
    },
    _getControlPoints: function (x0, y0, x1, y1, x2, y2, t) {
        var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)), d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)), fa = (t * d01) / (d01 + d12), fb = (t * d12) / (d01 + d12), p1x = x1 - fa * (x2 - x0), p1y = y1 - fa * (y2 - y0), p2x = x1 + fb * (x2 - x0), p2y = y1 + fb * (y2 - y0);
        return [p1x, p1y, p2x, p2y];
    },
    _expandPoints: function (p, tension) {
        var len = p.length, allPoints = [], n, cp;
        for (n = 2; n < len - 2; n += 2) {
            cp = exports.Util._getControlPoints(p[n - 2], p[n - 1], p[n], p[n + 1], p[n + 2], p[n + 3], tension);
            allPoints.push(cp[0]);
            allPoints.push(cp[1]);
            allPoints.push(p[n]);
            allPoints.push(p[n + 1]);
            allPoints.push(cp[2]);
            allPoints.push(cp[3]);
        }
        return allPoints;
    },
    each: function (obj, func) {
        for (var key in obj) {
            func(key, obj[key]);
        }
    },
    _inRange: function (val, left, right) {
        return left <= val && val < right;
    },
    _getProjectionToSegment: function (x1, y1, x2, y2, x3, y3) {
        var x, y, dist;
        var pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
        if (pd2 == 0) {
            x = x1;
            y = y1;
            dist = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2);
        }
        else {
            var u = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / pd2;
            if (u < 0) {
                x = x1;
                y = y1;
                dist = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);
            }
            else if (u > 1.0) {
                x = x2;
                y = y2;
                dist = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);
            }
            else {
                x = x1 + u * (x2 - x1);
                y = y1 + u * (y2 - y1);
                dist = (x - x3) * (x - x3) + (y - y3) * (y - y3);
            }
        }
        return [x, y, dist];
    },
    _getProjectionToLine: function (pt, line, isClosed) {
        var pc = exports.Util.cloneObject(pt);
        var dist = Number.MAX_VALUE;
        line.forEach(function (p1, i) {
            if (!isClosed && i === line.length - 1) {
                return;
            }
            var p2 = line[(i + 1) % line.length];
            var proj = exports.Util._getProjectionToSegment(p1.x, p1.y, p2.x, p2.y, pt.x, pt.y);
            var px = proj[0], py = proj[1], pdist = proj[2];
            if (pdist < dist) {
                pc.x = px;
                pc.y = py;
                dist = pdist;
            }
        });
        return pc;
    },
    _prepareArrayForTween: function (startArray, endArray, isClosed) {
        var n, start = [], end = [];
        if (startArray.length > endArray.length) {
            var temp = endArray;
            endArray = startArray;
            startArray = temp;
        }
        for (n = 0; n < startArray.length; n += 2) {
            start.push({
                x: startArray[n],
                y: startArray[n + 1]
            });
        }
        for (n = 0; n < endArray.length; n += 2) {
            end.push({
                x: endArray[n],
                y: endArray[n + 1]
            });
        }
        var newStart = [];
        end.forEach(function (point) {
            var pr = exports.Util._getProjectionToLine(point, start, isClosed);
            newStart.push(pr.x);
            newStart.push(pr.y);
        });
        return newStart;
    },
    _prepareToStringify: function (obj) {
        var desc;
        obj.visitedByCircularReferenceRemoval = true;
        for (var key in obj) {
            if (!(obj.hasOwnProperty(key) && obj[key] && typeof obj[key] == 'object')) {
                continue;
            }
            desc = Object.getOwnPropertyDescriptor(obj, key);
            if (obj[key].visitedByCircularReferenceRemoval ||
                exports.Util._isElement(obj[key])) {
                if (desc.configurable) {
                    delete obj[key];
                }
                else {
                    return null;
                }
            }
            else if (exports.Util._prepareToStringify(obj[key]) === null) {
                if (desc.configurable) {
                    delete obj[key];
                }
                else {
                    return null;
                }
            }
        }
        delete obj.visitedByCircularReferenceRemoval;
        return obj;
    },
    _assign: function (target, source) {
        for (var key in source) {
            target[key] = source[key];
        }
        return target;
    },
    _getFirstPointerId: function (evt) {
        if (!evt.touches) {
            return 999;
        }
        else {
            return evt.changedTouches[0].identifier;
        }
    }
};

},{"./Global":14}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global_1 = require("./Global");
var Util_1 = require("./Util");
function _formatValue(val) {
    if (Util_1.Util._isString(val)) {
        return '"' + val + '"';
    }
    if (Object.prototype.toString.call(val) === '[object Number]') {
        return val;
    }
    if (Util_1.Util._isBoolean(val)) {
        return val;
    }
    return Object.prototype.toString.call(val);
}
function RGBComponent(val) {
    if (val > 255) {
        return 255;
    }
    else if (val < 0) {
        return 0;
    }
    return Math.round(val);
}
exports.RGBComponent = RGBComponent;
function alphaComponent(val) {
    if (val > 1) {
        return 1;
    }
    else if (val < 0.0001) {
        return 0.0001;
    }
    return val;
}
exports.alphaComponent = alphaComponent;
function getNumberValidator() {
    if (Global_1.Konva.isUnminified) {
        return function (val, attr) {
            if (!Util_1.Util._isNumber(val)) {
                Util_1.Util.warn(_formatValue(val) +
                    ' is a not valid value for "' +
                    attr +
                    '" attribute. The value should be a number.');
            }
            return val;
        };
    }
}
exports.getNumberValidator = getNumberValidator;
function getNumberOrAutoValidator() {
    if (Global_1.Konva.isUnminified) {
        return function (val, attr) {
            var isNumber = Util_1.Util._isNumber(val);
            var isAuto = val === 'auto';
            if (!(isNumber || isAuto)) {
                Util_1.Util.warn(_formatValue(val) +
                    ' is a not valid value for "' +
                    attr +
                    '" attribute. The value should be a number or "auto".');
            }
            return val;
        };
    }
}
exports.getNumberOrAutoValidator = getNumberOrAutoValidator;
function getStringValidator() {
    if (Global_1.Konva.isUnminified) {
        return function (val, attr) {
            if (!Util_1.Util._isString(val)) {
                Util_1.Util.warn(_formatValue(val) +
                    ' is a not valid value for "' +
                    attr +
                    '" attribute. The value should be a string.');
            }
            return val;
        };
    }
}
exports.getStringValidator = getStringValidator;
function getFunctionValidator() {
    if (Global_1.Konva.isUnminified) {
        return function (val, attr) {
            if (!Util_1.Util._isFunction(val)) {
                Util_1.Util.warn(_formatValue(val) +
                    ' is a not valid value for "' +
                    attr +
                    '" attribute. The value should be a function.');
            }
            return val;
        };
    }
}
exports.getFunctionValidator = getFunctionValidator;
function getNumberArrayValidator() {
    if (Global_1.Konva.isUnminified) {
        return function (val, attr) {
            if (!Util_1.Util._isArray(val)) {
                Util_1.Util.warn(_formatValue(val) +
                    ' is a not valid value for "' +
                    attr +
                    '" attribute. The value should be a array of numbers.');
            }
            else {
                val.forEach(function (item) {
                    if (!Util_1.Util._isNumber(item)) {
                        Util_1.Util.warn('"' +
                            attr +
                            '" attribute has non numeric element ' +
                            item +
                            '. Make sure that all elements are numbers.');
                    }
                });
            }
            return val;
        };
    }
}
exports.getNumberArrayValidator = getNumberArrayValidator;
function getBooleanValidator() {
    if (Global_1.Konva.isUnminified) {
        return function (val, attr) {
            var isBool = val === true || val === false;
            if (!isBool) {
                Util_1.Util.warn(_formatValue(val) +
                    ' is a not valid value for "' +
                    attr +
                    '" attribute. The value should be a boolean.');
            }
            return val;
        };
    }
}
exports.getBooleanValidator = getBooleanValidator;
function getComponentValidator(components) {
    if (Global_1.Konva.isUnminified) {
        return function (val, attr) {
            if (!Util_1.Util.isObject(val)) {
                Util_1.Util.warn(_formatValue(val) +
                    ' is a not valid value for "' +
                    attr +
                    '" attribute. The value should be an object with properties ' +
                    components);
            }
            return val;
        };
    }
}
exports.getComponentValidator = getComponentValidator;

},{"./Global":14,"./Util":22}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global_1 = require("./Global");
var Util_1 = require("./Util");
var Node_1 = require("./Node");
var Container_1 = require("./Container");
var Stage_1 = require("./Stage");
var Layer_1 = require("./Layer");
var FastLayer_1 = require("./FastLayer");
var Group_1 = require("./Group");
var DragAndDrop_1 = require("./DragAndDrop");
var Shape_1 = require("./Shape");
var Animation_1 = require("./Animation");
var Tween_1 = require("./Tween");
var Context_1 = require("./Context");
var Canvas_1 = require("./Canvas");
exports.Konva = Util_1.Util._assign(Global_1.Konva, {
    Collection: Util_1.Collection,
    Util: Util_1.Util,
    Transform: Util_1.Transform,
    Node: Node_1.Node,
    ids: Node_1.ids,
    names: Node_1.names,
    Container: Container_1.Container,
    Stage: Stage_1.Stage,
    stages: Stage_1.stages,
    Layer: Layer_1.Layer,
    FastLayer: FastLayer_1.FastLayer,
    Group: Group_1.Group,
    DD: DragAndDrop_1.DD,
    Shape: Shape_1.Shape,
    shapes: Shape_1.shapes,
    Animation: Animation_1.Animation,
    Tween: Tween_1.Tween,
    Easings: Tween_1.Easings,
    Context: Context_1.Context,
    Canvas: Canvas_1.Canvas
});

},{"./Animation":6,"./Canvas":8,"./Container":9,"./Context":10,"./DragAndDrop":11,"./FastLayer":13,"./Global":14,"./Group":15,"./Layer":16,"./Node":17,"./Shape":19,"./Stage":20,"./Tween":21,"./Util":22}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _CoreInternals_1 = require("./_CoreInternals");
var Arc_1 = require("./shapes/Arc");
var Arrow_1 = require("./shapes/Arrow");
var Circle_1 = require("./shapes/Circle");
var Ellipse_1 = require("./shapes/Ellipse");
var Image_1 = require("./shapes/Image");
var Label_1 = require("./shapes/Label");
var Line_1 = require("./shapes/Line");
var Path_1 = require("./shapes/Path");
var Rect_1 = require("./shapes/Rect");
var RegularPolygon_1 = require("./shapes/RegularPolygon");
var Ring_1 = require("./shapes/Ring");
var Sprite_1 = require("./shapes/Sprite");
var Star_1 = require("./shapes/Star");
var Text_1 = require("./shapes/Text");
var TextPath_1 = require("./shapes/TextPath");
var Transformer_1 = require("./shapes/Transformer");
var Wedge_1 = require("./shapes/Wedge");
var Blur_1 = require("./filters/Blur");
var Brighten_1 = require("./filters/Brighten");
var Contrast_1 = require("./filters/Contrast");
var Emboss_1 = require("./filters/Emboss");
var Enhance_1 = require("./filters/Enhance");
var Grayscale_1 = require("./filters/Grayscale");
var HSL_1 = require("./filters/HSL");
var HSV_1 = require("./filters/HSV");
var Invert_1 = require("./filters/Invert");
var Kaleidoscope_1 = require("./filters/Kaleidoscope");
var Mask_1 = require("./filters/Mask");
var Noise_1 = require("./filters/Noise");
var Pixelate_1 = require("./filters/Pixelate");
var Posterize_1 = require("./filters/Posterize");
var RGB_1 = require("./filters/RGB");
var RGBA_1 = require("./filters/RGBA");
var Sepia_1 = require("./filters/Sepia");
var Solarize_1 = require("./filters/Solarize");
var Threshold_1 = require("./filters/Threshold");
exports.Konva = _CoreInternals_1.Konva.Util._assign(_CoreInternals_1.Konva, {
    Arc: Arc_1.Arc,
    Arrow: Arrow_1.Arrow,
    Circle: Circle_1.Circle,
    Ellipse: Ellipse_1.Ellipse,
    Image: Image_1.Image,
    Label: Label_1.Label,
    Tag: Label_1.Tag,
    Line: Line_1.Line,
    Path: Path_1.Path,
    Rect: Rect_1.Rect,
    RegularPolygon: RegularPolygon_1.RegularPolygon,
    Ring: Ring_1.Ring,
    Sprite: Sprite_1.Sprite,
    Star: Star_1.Star,
    Text: Text_1.Text,
    TextPath: TextPath_1.TextPath,
    Transformer: Transformer_1.Transformer,
    Wedge: Wedge_1.Wedge,
    Filters: {
        Blur: Blur_1.Blur,
        Brighten: Brighten_1.Brighten,
        Contrast: Contrast_1.Contrast,
        Emboss: Emboss_1.Emboss,
        Enhance: Enhance_1.Enhance,
        Grayscale: Grayscale_1.Grayscale,
        HSL: HSL_1.HSL,
        HSV: HSV_1.HSV,
        Invert: Invert_1.Invert,
        Kaleidoscope: Kaleidoscope_1.Kaleidoscope,
        Mask: Mask_1.Mask,
        Noise: Noise_1.Noise,
        Pixelate: Pixelate_1.Pixelate,
        Posterize: Posterize_1.Posterize,
        RGB: RGB_1.RGB,
        RGBA: RGBA_1.RGBA,
        Sepia: Sepia_1.Sepia,
        Solarize: Solarize_1.Solarize,
        Threshold: Threshold_1.Threshold
    }
});

},{"./_CoreInternals":24,"./filters/Blur":26,"./filters/Brighten":27,"./filters/Contrast":28,"./filters/Emboss":29,"./filters/Enhance":30,"./filters/Grayscale":31,"./filters/HSL":32,"./filters/HSV":33,"./filters/Invert":34,"./filters/Kaleidoscope":35,"./filters/Mask":36,"./filters/Noise":37,"./filters/Pixelate":38,"./filters/Posterize":39,"./filters/RGB":40,"./filters/RGBA":41,"./filters/Sepia":42,"./filters/Solarize":43,"./filters/Threshold":44,"./shapes/Arc":46,"./shapes/Arrow":47,"./shapes/Circle":48,"./shapes/Ellipse":49,"./shapes/Image":50,"./shapes/Label":51,"./shapes/Line":52,"./shapes/Path":53,"./shapes/Rect":54,"./shapes/RegularPolygon":55,"./shapes/Ring":56,"./shapes/Sprite":57,"./shapes/Star":58,"./shapes/Text":59,"./shapes/TextPath":60,"./shapes/Transformer":61,"./shapes/Wedge":62}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
function BlurStack() {
    this.r = 0;
    this.g = 0;
    this.b = 0;
    this.a = 0;
    this.next = null;
}
var mul_table = [
    512,
    512,
    456,
    512,
    328,
    456,
    335,
    512,
    405,
    328,
    271,
    456,
    388,
    335,
    292,
    512,
    454,
    405,
    364,
    328,
    298,
    271,
    496,
    456,
    420,
    388,
    360,
    335,
    312,
    292,
    273,
    512,
    482,
    454,
    428,
    405,
    383,
    364,
    345,
    328,
    312,
    298,
    284,
    271,
    259,
    496,
    475,
    456,
    437,
    420,
    404,
    388,
    374,
    360,
    347,
    335,
    323,
    312,
    302,
    292,
    282,
    273,
    265,
    512,
    497,
    482,
    468,
    454,
    441,
    428,
    417,
    405,
    394,
    383,
    373,
    364,
    354,
    345,
    337,
    328,
    320,
    312,
    305,
    298,
    291,
    284,
    278,
    271,
    265,
    259,
    507,
    496,
    485,
    475,
    465,
    456,
    446,
    437,
    428,
    420,
    412,
    404,
    396,
    388,
    381,
    374,
    367,
    360,
    354,
    347,
    341,
    335,
    329,
    323,
    318,
    312,
    307,
    302,
    297,
    292,
    287,
    282,
    278,
    273,
    269,
    265,
    261,
    512,
    505,
    497,
    489,
    482,
    475,
    468,
    461,
    454,
    447,
    441,
    435,
    428,
    422,
    417,
    411,
    405,
    399,
    394,
    389,
    383,
    378,
    373,
    368,
    364,
    359,
    354,
    350,
    345,
    341,
    337,
    332,
    328,
    324,
    320,
    316,
    312,
    309,
    305,
    301,
    298,
    294,
    291,
    287,
    284,
    281,
    278,
    274,
    271,
    268,
    265,
    262,
    259,
    257,
    507,
    501,
    496,
    491,
    485,
    480,
    475,
    470,
    465,
    460,
    456,
    451,
    446,
    442,
    437,
    433,
    428,
    424,
    420,
    416,
    412,
    408,
    404,
    400,
    396,
    392,
    388,
    385,
    381,
    377,
    374,
    370,
    367,
    363,
    360,
    357,
    354,
    350,
    347,
    344,
    341,
    338,
    335,
    332,
    329,
    326,
    323,
    320,
    318,
    315,
    312,
    310,
    307,
    304,
    302,
    299,
    297,
    294,
    292,
    289,
    287,
    285,
    282,
    280,
    278,
    275,
    273,
    271,
    269,
    267,
    265,
    263,
    261,
    259
];
var shg_table = [
    9,
    11,
    12,
    13,
    13,
    14,
    14,
    15,
    15,
    15,
    15,
    16,
    16,
    16,
    16,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    20,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    22,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    23,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24
];
function filterGaussBlurRGBA(imageData, radius) {
    var pixels = imageData.data, width = imageData.width, height = imageData.height;
    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;
    var div = radius + radius + 1, widthMinus1 = width - 1, heightMinus1 = height - 1, radiusPlus1 = radius + 1, sumFactor = (radiusPlus1 * (radiusPlus1 + 1)) / 2, stackStart = new BlurStack(), stackEnd = null, stack = stackStart, stackIn = null, stackOut = null, mul_sum = mul_table[radius], shg_sum = shg_table[radius];
    for (i = 1; i < div; i++) {
        stack = stack.next = new BlurStack();
        if (i === radiusPlus1) {
            stackEnd = stack;
        }
    }
    stack.next = stackStart;
    yw = yi = 0;
    for (y = 0; y < height; y++) {
        r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;
        r_out_sum = radiusPlus1 * (pr = pixels[yi]);
        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
        r_sum += sumFactor * pr;
        g_sum += sumFactor * pg;
        b_sum += sumFactor * pb;
        a_sum += sumFactor * pa;
        stack = stackStart;
        for (i = 0; i < radiusPlus1; i++) {
            stack.r = pr;
            stack.g = pg;
            stack.b = pb;
            stack.a = pa;
            stack = stack.next;
        }
        for (i = 1; i < radiusPlus1; i++) {
            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
            r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);
            g_sum += (stack.g = pg = pixels[p + 1]) * rbs;
            b_sum += (stack.b = pb = pixels[p + 2]) * rbs;
            a_sum += (stack.a = pa = pixels[p + 3]) * rbs;
            r_in_sum += pr;
            g_in_sum += pg;
            b_in_sum += pb;
            a_in_sum += pa;
            stack = stack.next;
        }
        stackIn = stackStart;
        stackOut = stackEnd;
        for (x = 0; x < width; x++) {
            pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;
            if (pa !== 0) {
                pa = 255 / pa;
                pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;
                pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
                pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
            }
            else {
                pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
            }
            r_sum -= r_out_sum;
            g_sum -= g_out_sum;
            b_sum -= b_out_sum;
            a_sum -= a_out_sum;
            r_out_sum -= stackIn.r;
            g_out_sum -= stackIn.g;
            b_out_sum -= stackIn.b;
            a_out_sum -= stackIn.a;
            p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;
            r_in_sum += stackIn.r = pixels[p];
            g_in_sum += stackIn.g = pixels[p + 1];
            b_in_sum += stackIn.b = pixels[p + 2];
            a_in_sum += stackIn.a = pixels[p + 3];
            r_sum += r_in_sum;
            g_sum += g_in_sum;
            b_sum += b_in_sum;
            a_sum += a_in_sum;
            stackIn = stackIn.next;
            r_out_sum += pr = stackOut.r;
            g_out_sum += pg = stackOut.g;
            b_out_sum += pb = stackOut.b;
            a_out_sum += pa = stackOut.a;
            r_in_sum -= pr;
            g_in_sum -= pg;
            b_in_sum -= pb;
            a_in_sum -= pa;
            stackOut = stackOut.next;
            yi += 4;
        }
        yw += width;
    }
    for (x = 0; x < width; x++) {
        g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;
        yi = x << 2;
        r_out_sum = radiusPlus1 * (pr = pixels[yi]);
        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
        r_sum += sumFactor * pr;
        g_sum += sumFactor * pg;
        b_sum += sumFactor * pb;
        a_sum += sumFactor * pa;
        stack = stackStart;
        for (i = 0; i < radiusPlus1; i++) {
            stack.r = pr;
            stack.g = pg;
            stack.b = pb;
            stack.a = pa;
            stack = stack.next;
        }
        yp = width;
        for (i = 1; i <= radius; i++) {
            yi = (yp + x) << 2;
            r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);
            g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;
            b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;
            a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;
            r_in_sum += pr;
            g_in_sum += pg;
            b_in_sum += pb;
            a_in_sum += pa;
            stack = stack.next;
            if (i < heightMinus1) {
                yp += width;
            }
        }
        yi = x;
        stackIn = stackStart;
        stackOut = stackEnd;
        for (y = 0; y < height; y++) {
            p = yi << 2;
            pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;
            if (pa > 0) {
                pa = 255 / pa;
                pixels[p] = ((r_sum * mul_sum) >> shg_sum) * pa;
                pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
                pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
            }
            else {
                pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;
            }
            r_sum -= r_out_sum;
            g_sum -= g_out_sum;
            b_sum -= b_out_sum;
            a_sum -= a_out_sum;
            r_out_sum -= stackIn.r;
            g_out_sum -= stackIn.g;
            b_out_sum -= stackIn.b;
            a_out_sum -= stackIn.a;
            p =
                (x +
                    ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width) <<
                    2;
            r_sum += r_in_sum += stackIn.r = pixels[p];
            g_sum += g_in_sum += stackIn.g = pixels[p + 1];
            b_sum += b_in_sum += stackIn.b = pixels[p + 2];
            a_sum += a_in_sum += stackIn.a = pixels[p + 3];
            stackIn = stackIn.next;
            r_out_sum += pr = stackOut.r;
            g_out_sum += pg = stackOut.g;
            b_out_sum += pb = stackOut.b;
            a_out_sum += pa = stackOut.a;
            r_in_sum -= pr;
            g_in_sum -= pg;
            b_in_sum -= pb;
            a_in_sum -= pa;
            stackOut = stackOut.next;
            yi += width;
        }
    }
}
exports.Blur = function Blur(imageData) {
    var radius = Math.round(this.blurRadius());
    if (radius > 0) {
        filterGaussBlurRGBA(imageData, radius);
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'blurRadius', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Validators":23}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
exports.Brighten = function (imageData) {
    var brightness = this.brightness() * 255, data = imageData.data, len = data.length, i;
    for (i = 0; i < len; i += 4) {
        data[i] += brightness;
        data[i + 1] += brightness;
        data[i + 2] += brightness;
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'brightness', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Validators":23}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
exports.Contrast = function (imageData) {
    var adjust = Math.pow((this.contrast() + 100) / 100, 2);
    var data = imageData.data, nPixels = data.length, red = 150, green = 150, blue = 150, i;
    for (i = 0; i < nPixels; i += 4) {
        red = data[i];
        green = data[i + 1];
        blue = data[i + 2];
        red /= 255;
        red -= 0.5;
        red *= adjust;
        red += 0.5;
        red *= 255;
        green /= 255;
        green -= 0.5;
        green *= adjust;
        green += 0.5;
        green *= 255;
        blue /= 255;
        blue -= 0.5;
        blue *= adjust;
        blue += 0.5;
        blue *= 255;
        red = red < 0 ? 0 : red > 255 ? 255 : red;
        green = green < 0 ? 0 : green > 255 ? 255 : green;
        blue = blue < 0 ? 0 : blue > 255 ? 255 : blue;
        data[i] = red;
        data[i + 1] = green;
        data[i + 2] = blue;
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'contrast', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Validators":23}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Util_1 = require("../Util");
var Validators_1 = require("../Validators");
exports.Emboss = function (imageData) {
    var strength = this.embossStrength() * 10, greyLevel = this.embossWhiteLevel() * 255, direction = this.embossDirection(), blend = this.embossBlend(), dirY = 0, dirX = 0, data = imageData.data, w = imageData.width, h = imageData.height, w4 = w * 4, y = h;
    switch (direction) {
        case 'top-left':
            dirY = -1;
            dirX = -1;
            break;
        case 'top':
            dirY = -1;
            dirX = 0;
            break;
        case 'top-right':
            dirY = -1;
            dirX = 1;
            break;
        case 'right':
            dirY = 0;
            dirX = 1;
            break;
        case 'bottom-right':
            dirY = 1;
            dirX = 1;
            break;
        case 'bottom':
            dirY = 1;
            dirX = 0;
            break;
        case 'bottom-left':
            dirY = 1;
            dirX = -1;
            break;
        case 'left':
            dirY = 0;
            dirX = -1;
            break;
        default:
            Util_1.Util.error('Unknown emboss direction: ' + direction);
    }
    do {
        var offsetY = (y - 1) * w4;
        var otherY = dirY;
        if (y + otherY < 1) {
            otherY = 0;
        }
        if (y + otherY > h) {
            otherY = 0;
        }
        var offsetYOther = (y - 1 + otherY) * w * 4;
        var x = w;
        do {
            var offset = offsetY + (x - 1) * 4;
            var otherX = dirX;
            if (x + otherX < 1) {
                otherX = 0;
            }
            if (x + otherX > w) {
                otherX = 0;
            }
            var offsetOther = offsetYOther + (x - 1 + otherX) * 4;
            var dR = data[offset] - data[offsetOther];
            var dG = data[offset + 1] - data[offsetOther + 1];
            var dB = data[offset + 2] - data[offsetOther + 2];
            var dif = dR;
            var absDif = dif > 0 ? dif : -dif;
            var absG = dG > 0 ? dG : -dG;
            var absB = dB > 0 ? dB : -dB;
            if (absG > absDif) {
                dif = dG;
            }
            if (absB > absDif) {
                dif = dB;
            }
            dif *= strength;
            if (blend) {
                var r = data[offset] + dif;
                var g = data[offset + 1] + dif;
                var b = data[offset + 2] + dif;
                data[offset] = r > 255 ? 255 : r < 0 ? 0 : r;
                data[offset + 1] = g > 255 ? 255 : g < 0 ? 0 : g;
                data[offset + 2] = b > 255 ? 255 : b < 0 ? 0 : b;
            }
            else {
                var grey = greyLevel - dif;
                if (grey < 0) {
                    grey = 0;
                }
                else if (grey > 255) {
                    grey = 255;
                }
                data[offset] = data[offset + 1] = data[offset + 2] = grey;
            }
        } while (--x);
    } while (--y);
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossStrength', 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossWhiteLevel', 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossDirection', 'top-left', null, Factory_1.Factory.afterSetFilter);
Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossBlend', false, null, Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Util":22,"../Validators":23}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
function remap(fromValue, fromMin, fromMax, toMin, toMax) {
    var fromRange = fromMax - fromMin, toRange = toMax - toMin, toValue;
    if (fromRange === 0) {
        return toMin + toRange / 2;
    }
    if (toRange === 0) {
        return toMin;
    }
    toValue = (fromValue - fromMin) / fromRange;
    toValue = toRange * toValue + toMin;
    return toValue;
}
exports.Enhance = function (imageData) {
    var data = imageData.data, nSubPixels = data.length, rMin = data[0], rMax = rMin, r, gMin = data[1], gMax = gMin, g, bMin = data[2], bMax = bMin, b, i;
    var enhanceAmount = this.enhance();
    if (enhanceAmount === 0) {
        return;
    }
    for (i = 0; i < nSubPixels; i += 4) {
        r = data[i + 0];
        if (r < rMin) {
            rMin = r;
        }
        else if (r > rMax) {
            rMax = r;
        }
        g = data[i + 1];
        if (g < gMin) {
            gMin = g;
        }
        else if (g > gMax) {
            gMax = g;
        }
        b = data[i + 2];
        if (b < bMin) {
            bMin = b;
        }
        else if (b > bMax) {
            bMax = b;
        }
    }
    if (rMax === rMin) {
        rMax = 255;
        rMin = 0;
    }
    if (gMax === gMin) {
        gMax = 255;
        gMin = 0;
    }
    if (bMax === bMin) {
        bMax = 255;
        bMin = 0;
    }
    var rMid, rGoalMax, rGoalMin, gMid, gGoalMax, gGoalMin, bMid, bGoalMax, bGoalMin;
    if (enhanceAmount > 0) {
        rGoalMax = rMax + enhanceAmount * (255 - rMax);
        rGoalMin = rMin - enhanceAmount * (rMin - 0);
        gGoalMax = gMax + enhanceAmount * (255 - gMax);
        gGoalMin = gMin - enhanceAmount * (gMin - 0);
        bGoalMax = bMax + enhanceAmount * (255 - bMax);
        bGoalMin = bMin - enhanceAmount * (bMin - 0);
    }
    else {
        rMid = (rMax + rMin) * 0.5;
        rGoalMax = rMax + enhanceAmount * (rMax - rMid);
        rGoalMin = rMin + enhanceAmount * (rMin - rMid);
        gMid = (gMax + gMin) * 0.5;
        gGoalMax = gMax + enhanceAmount * (gMax - gMid);
        gGoalMin = gMin + enhanceAmount * (gMin - gMid);
        bMid = (bMax + bMin) * 0.5;
        bGoalMax = bMax + enhanceAmount * (bMax - bMid);
        bGoalMin = bMin + enhanceAmount * (bMin - bMid);
    }
    for (i = 0; i < nSubPixels; i += 4) {
        data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);
        data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);
        data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'enhance', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Validators":23}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Grayscale = function (imageData) {
    var data = imageData.data, len = data.length, i, brightness;
    for (i = 0; i < len; i += 4) {
        brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
        data[i] = brightness;
        data[i + 1] = brightness;
        data[i + 2] = brightness;
    }
};

},{}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
Factory_1.Factory.addGetterSetter(Node_1.Node, 'hue', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
Factory_1.Factory.addGetterSetter(Node_1.Node, 'saturation', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
Factory_1.Factory.addGetterSetter(Node_1.Node, 'luminance', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
exports.HSL = function (imageData) {
    var data = imageData.data, nPixels = data.length, v = 1, s = Math.pow(2, this.saturation()), h = Math.abs(this.hue() + 360) % 360, l = this.luminance() * 127, i;
    var vsu = v * s * Math.cos((h * Math.PI) / 180), vsw = v * s * Math.sin((h * Math.PI) / 180);
    var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
    var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
    var br = 0.299 * v - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v + 0.886 * vsu - 0.2 * vsw;
    var r, g, b, a;
    for (i = 0; i < nPixels; i += 4) {
        r = data[i + 0];
        g = data[i + 1];
        b = data[i + 2];
        a = data[i + 3];
        data[i + 0] = rr * r + rg * g + rb * b + l;
        data[i + 1] = gr * r + gg * g + gb * b + l;
        data[i + 2] = br * r + bg * g + bb * b + l;
        data[i + 3] = a;
    }
};

},{"../Factory":12,"../Node":17,"../Validators":23}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
exports.HSV = function (imageData) {
    var data = imageData.data, nPixels = data.length, v = Math.pow(2, this.value()), s = Math.pow(2, this.saturation()), h = Math.abs(this.hue() + 360) % 360, i;
    var vsu = v * s * Math.cos((h * Math.PI) / 180), vsw = v * s * Math.sin((h * Math.PI) / 180);
    var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
    var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
    var br = 0.299 * v - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v + 0.886 * vsu - 0.2 * vsw;
    var r, g, b, a;
    for (i = 0; i < nPixels; i += 4) {
        r = data[i + 0];
        g = data[i + 1];
        b = data[i + 2];
        a = data[i + 3];
        data[i + 0] = rr * r + rg * g + rb * b;
        data[i + 1] = gr * r + gg * g + gb * b;
        data[i + 2] = br * r + bg * g + bb * b;
        data[i + 3] = a;
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'hue', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
Factory_1.Factory.addGetterSetter(Node_1.Node, 'saturation', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
Factory_1.Factory.addGetterSetter(Node_1.Node, 'value', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Validators":23}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invert = function (imageData) {
    var data = imageData.data, len = data.length, i;
    for (i = 0; i < len; i += 4) {
        data[i] = 255 - data[i];
        data[i + 1] = 255 - data[i + 1];
        data[i + 2] = 255 - data[i + 2];
    }
};

},{}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Util_1 = require("../Util");
var Validators_1 = require("../Validators");
var ToPolar = function (src, dst, opt) {
    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, r = 0, g = 0, b = 0, a = 0;
    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);
    x = xSize - xMid;
    y = ySize - yMid;
    rad = Math.sqrt(x * x + y * y);
    rMax = rad > rMax ? rad : rMax;
    var rSize = ySize, tSize = xSize, radius, theta;
    var conversion = ((360 / tSize) * Math.PI) / 180, sin, cos;
    for (theta = 0; theta < tSize; theta += 1) {
        sin = Math.sin(theta * conversion);
        cos = Math.cos(theta * conversion);
        for (radius = 0; radius < rSize; radius += 1) {
            x = Math.floor(xMid + ((rMax * radius) / rSize) * cos);
            y = Math.floor(yMid + ((rMax * radius) / rSize) * sin);
            i = (y * xSize + x) * 4;
            r = srcPixels[i + 0];
            g = srcPixels[i + 1];
            b = srcPixels[i + 2];
            a = srcPixels[i + 3];
            i = (theta + radius * xSize) * 4;
            dstPixels[i + 0] = r;
            dstPixels[i + 1] = g;
            dstPixels[i + 2] = b;
            dstPixels[i + 3] = a;
        }
    }
};
var FromPolar = function (src, dst, opt) {
    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, dx, dy, r = 0, g = 0, b = 0, a = 0;
    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);
    x = xSize - xMid;
    y = ySize - yMid;
    rad = Math.sqrt(x * x + y * y);
    rMax = rad > rMax ? rad : rMax;
    var rSize = ySize, tSize = xSize, radius, theta, phaseShift = opt.polarRotation || 0;
    var x1, y1;
    for (x = 0; x < xSize; x += 1) {
        for (y = 0; y < ySize; y += 1) {
            dx = x - xMid;
            dy = y - yMid;
            radius = (Math.sqrt(dx * dx + dy * dy) * rSize) / rMax;
            theta = ((Math.atan2(dy, dx) * 180) / Math.PI + 360 + phaseShift) % 360;
            theta = (theta * tSize) / 360;
            x1 = Math.floor(theta);
            y1 = Math.floor(radius);
            i = (y1 * xSize + x1) * 4;
            r = srcPixels[i + 0];
            g = srcPixels[i + 1];
            b = srcPixels[i + 2];
            a = srcPixels[i + 3];
            i = (y * xSize + x) * 4;
            dstPixels[i + 0] = r;
            dstPixels[i + 1] = g;
            dstPixels[i + 2] = b;
            dstPixels[i + 3] = a;
        }
    }
};
exports.Kaleidoscope = function (imageData) {
    var xSize = imageData.width, ySize = imageData.height;
    var x, y, xoff, i, r, g, b, a, srcPos, dstPos;
    var power = Math.round(this.kaleidoscopePower());
    var angle = Math.round(this.kaleidoscopeAngle());
    var offset = Math.floor((xSize * (angle % 360)) / 360);
    if (power < 1) {
        return;
    }
    var tempCanvas = Util_1.Util.createCanvasElement();
    tempCanvas.width = xSize;
    tempCanvas.height = ySize;
    var scratchData = tempCanvas
        .getContext('2d')
        .getImageData(0, 0, xSize, ySize);
    ToPolar(imageData, scratchData, {
        polarCenterX: xSize / 2,
        polarCenterY: ySize / 2
    });
    var minSectionSize = xSize / Math.pow(2, power);
    while (minSectionSize <= 8) {
        minSectionSize = minSectionSize * 2;
        power -= 1;
    }
    minSectionSize = Math.ceil(minSectionSize);
    var sectionSize = minSectionSize;
    var xStart = 0, xEnd = sectionSize, xDelta = 1;
    if (offset + minSectionSize > xSize) {
        xStart = sectionSize;
        xEnd = 0;
        xDelta = -1;
    }
    for (y = 0; y < ySize; y += 1) {
        for (x = xStart; x !== xEnd; x += xDelta) {
            xoff = Math.round(x + offset) % xSize;
            srcPos = (xSize * y + xoff) * 4;
            r = scratchData.data[srcPos + 0];
            g = scratchData.data[srcPos + 1];
            b = scratchData.data[srcPos + 2];
            a = scratchData.data[srcPos + 3];
            dstPos = (xSize * y + x) * 4;
            scratchData.data[dstPos + 0] = r;
            scratchData.data[dstPos + 1] = g;
            scratchData.data[dstPos + 2] = b;
            scratchData.data[dstPos + 3] = a;
        }
    }
    for (y = 0; y < ySize; y += 1) {
        sectionSize = Math.floor(minSectionSize);
        for (i = 0; i < power; i += 1) {
            for (x = 0; x < sectionSize + 1; x += 1) {
                srcPos = (xSize * y + x) * 4;
                r = scratchData.data[srcPos + 0];
                g = scratchData.data[srcPos + 1];
                b = scratchData.data[srcPos + 2];
                a = scratchData.data[srcPos + 3];
                dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;
                scratchData.data[dstPos + 0] = r;
                scratchData.data[dstPos + 1] = g;
                scratchData.data[dstPos + 2] = b;
                scratchData.data[dstPos + 3] = a;
            }
            sectionSize *= 2;
        }
    }
    FromPolar(scratchData, imageData, { polarRotation: 0 });
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopePower', 2, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
Factory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopeAngle', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Util":22,"../Validators":23}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
function pixelAt(idata, x, y) {
    var idx = (y * idata.width + x) * 4;
    var d = [];
    d.push(idata.data[idx++], idata.data[idx++], idata.data[idx++], idata.data[idx++]);
    return d;
}
function rgbDistance(p1, p2) {
    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) +
        Math.pow(p1[1] - p2[1], 2) +
        Math.pow(p1[2] - p2[2], 2));
}
function rgbMean(pTab) {
    var m = [0, 0, 0];
    for (var i = 0; i < pTab.length; i++) {
        m[0] += pTab[i][0];
        m[1] += pTab[i][1];
        m[2] += pTab[i][2];
    }
    m[0] /= pTab.length;
    m[1] /= pTab.length;
    m[2] /= pTab.length;
    return m;
}
function backgroundMask(idata, threshold) {
    var rgbv_no = pixelAt(idata, 0, 0);
    var rgbv_ne = pixelAt(idata, idata.width - 1, 0);
    var rgbv_so = pixelAt(idata, 0, idata.height - 1);
    var rgbv_se = pixelAt(idata, idata.width - 1, idata.height - 1);
    var thres = threshold || 10;
    if (rgbDistance(rgbv_no, rgbv_ne) < thres &&
        rgbDistance(rgbv_ne, rgbv_se) < thres &&
        rgbDistance(rgbv_se, rgbv_so) < thres &&
        rgbDistance(rgbv_so, rgbv_no) < thres) {
        var mean = rgbMean([rgbv_ne, rgbv_no, rgbv_se, rgbv_so]);
        var mask = [];
        for (var i = 0; i < idata.width * idata.height; i++) {
            var d = rgbDistance(mean, [
                idata.data[i * 4],
                idata.data[i * 4 + 1],
                idata.data[i * 4 + 2]
            ]);
            mask[i] = d < thres ? 0 : 255;
        }
        return mask;
    }
}
function applyMask(idata, mask) {
    for (var i = 0; i < idata.width * idata.height; i++) {
        idata.data[4 * i + 3] = mask[i];
    }
}
function erodeMask(mask, sw, sh) {
    var weights = [1, 1, 1, 1, 0, 1, 1, 1, 1];
    var side = Math.round(Math.sqrt(weights.length));
    var halfSide = Math.floor(side / 2);
    var maskResult = [];
    for (var y = 0; y < sh; y++) {
        for (var x = 0; x < sw; x++) {
            var so = y * sw + x;
            var a = 0;
            for (var cy = 0; cy < side; cy++) {
                for (var cx = 0; cx < side; cx++) {
                    var scy = y + cy - halfSide;
                    var scx = x + cx - halfSide;
                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
                        var srcOff = scy * sw + scx;
                        var wt = weights[cy * side + cx];
                        a += mask[srcOff] * wt;
                    }
                }
            }
            maskResult[so] = a === 255 * 8 ? 255 : 0;
        }
    }
    return maskResult;
}
function dilateMask(mask, sw, sh) {
    var weights = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    var side = Math.round(Math.sqrt(weights.length));
    var halfSide = Math.floor(side / 2);
    var maskResult = [];
    for (var y = 0; y < sh; y++) {
        for (var x = 0; x < sw; x++) {
            var so = y * sw + x;
            var a = 0;
            for (var cy = 0; cy < side; cy++) {
                for (var cx = 0; cx < side; cx++) {
                    var scy = y + cy - halfSide;
                    var scx = x + cx - halfSide;
                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
                        var srcOff = scy * sw + scx;
                        var wt = weights[cy * side + cx];
                        a += mask[srcOff] * wt;
                    }
                }
            }
            maskResult[so] = a >= 255 * 4 ? 255 : 0;
        }
    }
    return maskResult;
}
function smoothEdgeMask(mask, sw, sh) {
    var weights = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];
    var side = Math.round(Math.sqrt(weights.length));
    var halfSide = Math.floor(side / 2);
    var maskResult = [];
    for (var y = 0; y < sh; y++) {
        for (var x = 0; x < sw; x++) {
            var so = y * sw + x;
            var a = 0;
            for (var cy = 0; cy < side; cy++) {
                for (var cx = 0; cx < side; cx++) {
                    var scy = y + cy - halfSide;
                    var scx = x + cx - halfSide;
                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
                        var srcOff = scy * sw + scx;
                        var wt = weights[cy * side + cx];
                        a += mask[srcOff] * wt;
                    }
                }
            }
            maskResult[so] = a;
        }
    }
    return maskResult;
}
exports.Mask = function (imageData) {
    var threshold = this.threshold(), mask = backgroundMask(imageData, threshold);
    if (mask) {
        mask = erodeMask(mask, imageData.width, imageData.height);
        mask = dilateMask(mask, imageData.width, imageData.height);
        mask = smoothEdgeMask(mask, imageData.width, imageData.height);
        applyMask(imageData, mask);
    }
    return imageData;
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Validators":23}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
exports.Noise = function (imageData) {
    var amount = this.noise() * 255, data = imageData.data, nPixels = data.length, half = amount / 2, i;
    for (i = 0; i < nPixels; i += 4) {
        data[i + 0] += half - 2 * half * Math.random();
        data[i + 1] += half - 2 * half * Math.random();
        data[i + 2] += half - 2 * half * Math.random();
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'noise', 0.2, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Validators":23}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Util_1 = require("../Util");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
exports.Pixelate = function (imageData) {
    var pixelSize = Math.ceil(this.pixelSize()), width = imageData.width, height = imageData.height, x, y, i, red, green, blue, alpha, nBinsX = Math.ceil(width / pixelSize), nBinsY = Math.ceil(height / pixelSize), xBinStart, xBinEnd, yBinStart, yBinEnd, xBin, yBin, pixelsInBin, data = imageData.data;
    if (pixelSize <= 0) {
        Util_1.Util.error('pixelSize value can not be <= 0');
        return;
    }
    for (xBin = 0; xBin < nBinsX; xBin += 1) {
        for (yBin = 0; yBin < nBinsY; yBin += 1) {
            red = 0;
            green = 0;
            blue = 0;
            alpha = 0;
            xBinStart = xBin * pixelSize;
            xBinEnd = xBinStart + pixelSize;
            yBinStart = yBin * pixelSize;
            yBinEnd = yBinStart + pixelSize;
            pixelsInBin = 0;
            for (x = xBinStart; x < xBinEnd; x += 1) {
                if (x >= width) {
                    continue;
                }
                for (y = yBinStart; y < yBinEnd; y += 1) {
                    if (y >= height) {
                        continue;
                    }
                    i = (width * y + x) * 4;
                    red += data[i + 0];
                    green += data[i + 1];
                    blue += data[i + 2];
                    alpha += data[i + 3];
                    pixelsInBin += 1;
                }
            }
            red = red / pixelsInBin;
            green = green / pixelsInBin;
            blue = blue / pixelsInBin;
            alpha = alpha / pixelsInBin;
            for (x = xBinStart; x < xBinEnd; x += 1) {
                if (x >= width) {
                    continue;
                }
                for (y = yBinStart; y < yBinEnd; y += 1) {
                    if (y >= height) {
                        continue;
                    }
                    i = (width * y + x) * 4;
                    data[i + 0] = red;
                    data[i + 1] = green;
                    data[i + 2] = blue;
                    data[i + 3] = alpha;
                }
            }
        }
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'pixelSize', 8, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Util":22,"../Validators":23}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
exports.Posterize = function (imageData) {
    var levels = Math.round(this.levels() * 254) + 1, data = imageData.data, len = data.length, scale = 255 / levels, i;
    for (i = 0; i < len; i += 1) {
        data[i] = Math.floor(data[i] / scale) * scale;
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'levels', 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Validators":23}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
exports.RGB = function (imageData) {
    var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), i, brightness;
    for (i = 0; i < nPixels; i += 4) {
        brightness =
            (0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2]) / 255;
        data[i] = brightness * red;
        data[i + 1] = brightness * green;
        data[i + 2] = brightness * blue;
        data[i + 3] = data[i + 3];
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'red', 0, function (val) {
    this._filterUpToDate = false;
    if (val > 255) {
        return 255;
    }
    else if (val < 0) {
        return 0;
    }
    else {
        return Math.round(val);
    }
});
Factory_1.Factory.addGetterSetter(Node_1.Node, 'green', 0, function (val) {
    this._filterUpToDate = false;
    if (val > 255) {
        return 255;
    }
    else if (val < 0) {
        return 0;
    }
    else {
        return Math.round(val);
    }
});
Factory_1.Factory.addGetterSetter(Node_1.Node, 'blue', 0, Validators_1.RGBComponent, Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Validators":23}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
exports.RGBA = function (imageData) {
    var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), alpha = this.alpha(), i, ia;
    for (i = 0; i < nPixels; i += 4) {
        ia = 1 - alpha;
        data[i] = red * alpha + data[i] * ia;
        data[i + 1] = green * alpha + data[i + 1] * ia;
        data[i + 2] = blue * alpha + data[i + 2] * ia;
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'red', 0, function (val) {
    this._filterUpToDate = false;
    if (val > 255) {
        return 255;
    }
    else if (val < 0) {
        return 0;
    }
    else {
        return Math.round(val);
    }
});
Factory_1.Factory.addGetterSetter(Node_1.Node, 'green', 0, function (val) {
    this._filterUpToDate = false;
    if (val > 255) {
        return 255;
    }
    else if (val < 0) {
        return 0;
    }
    else {
        return Math.round(val);
    }
});
Factory_1.Factory.addGetterSetter(Node_1.Node, 'blue', 0, Validators_1.RGBComponent, Factory_1.Factory.afterSetFilter);
Factory_1.Factory.addGetterSetter(Node_1.Node, 'alpha', 1, function (val) {
    this._filterUpToDate = false;
    if (val > 1) {
        return 1;
    }
    else if (val < 0) {
        return 0;
    }
    else {
        return val;
    }
});

},{"../Factory":12,"../Node":17,"../Validators":23}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sepia = function (imageData) {
    var data = imageData.data, nPixels = data.length, i, r, g, b;
    for (i = 0; i < nPixels; i += 4) {
        r = data[i + 0];
        g = data[i + 1];
        b = data[i + 2];
        data[i + 0] = Math.min(255, r * 0.393 + g * 0.769 + b * 0.189);
        data[i + 1] = Math.min(255, r * 0.349 + g * 0.686 + b * 0.168);
        data[i + 2] = Math.min(255, r * 0.272 + g * 0.534 + b * 0.131);
    }
};

},{}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Solarize = function (imageData) {
    var data = imageData.data, w = imageData.width, h = imageData.height, w4 = w * 4, y = h;
    do {
        var offsetY = (y - 1) * w4;
        var x = w;
        do {
            var offset = offsetY + (x - 1) * 4;
            var r = data[offset];
            var g = data[offset + 1];
            var b = data[offset + 2];
            if (r > 127) {
                r = 255 - r;
            }
            if (g > 127) {
                g = 255 - g;
            }
            if (b > 127) {
                b = 255 - b;
            }
            data[offset] = r;
            data[offset + 1] = g;
            data[offset + 2] = b;
        } while (--x);
    } while (--y);
};

},{}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Validators_1 = require("../Validators");
exports.Threshold = function (imageData) {
    var level = this.threshold() * 255, data = imageData.data, len = data.length, i;
    for (i = 0; i < len; i += 1) {
        data[i] = data[i] < level ? 0 : 255;
    }
};
Factory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

},{"../Factory":12,"../Node":17,"../Validators":23}],45:[function(require,module,exports){
var Konva = require('./_FullInternals').Konva;
Konva._injectGlobal(Konva);
exports['default'] = Konva;
module.exports = exports['default'];

},{"./_FullInternals":25}],46:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Global_1 = require("../Global");
var Validators_1 = require("../Validators");
var Global_2 = require("../Global");
var Arc = (function (_super) {
    __extends(Arc, _super);
    function Arc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Arc.prototype._sceneFunc = function (context) {
        var angle = Global_1.Konva.getAngle(this.angle()), clockwise = this.clockwise();
        context.beginPath();
        context.arc(0, 0, this.outerRadius(), 0, angle, clockwise);
        context.arc(0, 0, this.innerRadius(), angle, 0, !clockwise);
        context.closePath();
        context.fillStrokeShape(this);
    };
    Arc.prototype.getWidth = function () {
        return this.outerRadius() * 2;
    };
    Arc.prototype.getHeight = function () {
        return this.outerRadius() * 2;
    };
    Arc.prototype.setWidth = function (width) {
        this.outerRadius(width / 2);
    };
    Arc.prototype.setHeight = function (height) {
        this.outerRadius(height / 2);
    };
    return Arc;
}(Shape_1.Shape));
exports.Arc = Arc;
Arc.prototype._centroid = true;
Arc.prototype.className = 'Arc';
Arc.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
Global_2._registerNode(Arc);
Factory_1.Factory.addGetterSetter(Arc, 'innerRadius', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Arc, 'outerRadius', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Arc, 'angle', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Arc, 'clockwise', false, Validators_1.getBooleanValidator());
Util_1.Collection.mapMethods(Arc);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],47:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Line_1 = require("./Line");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var Arrow = (function (_super) {
    __extends(Arrow, _super);
    function Arrow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Arrow.prototype._sceneFunc = function (ctx) {
        _super.prototype._sceneFunc.call(this, ctx);
        var PI2 = Math.PI * 2;
        var points = this.points();
        var tp = points;
        var fromTension = this.tension() !== 0 && points.length > 4;
        if (fromTension) {
            tp = this.getTensionPoints();
        }
        var n = points.length;
        var dx, dy;
        if (fromTension) {
            dx = points[n - 2] - (tp[tp.length - 2] + tp[tp.length - 4]) / 2;
            dy = points[n - 1] - (tp[tp.length - 1] + tp[tp.length - 3]) / 2;
        }
        else {
            dx = points[n - 2] - points[n - 4];
            dy = points[n - 1] - points[n - 3];
        }
        var radians = (Math.atan2(dy, dx) + PI2) % PI2;
        var length = this.pointerLength();
        var width = this.pointerWidth();
        ctx.save();
        ctx.beginPath();
        ctx.translate(points[n - 2], points[n - 1]);
        ctx.rotate(radians);
        ctx.moveTo(0, 0);
        ctx.lineTo(-length, width / 2);
        ctx.lineTo(-length, -width / 2);
        ctx.closePath();
        ctx.restore();
        if (this.pointerAtBeginning()) {
            ctx.save();
            ctx.translate(points[0], points[1]);
            if (fromTension) {
                dx = (tp[0] + tp[2]) / 2 - points[0];
                dy = (tp[1] + tp[3]) / 2 - points[1];
            }
            else {
                dx = points[2] - points[0];
                dy = points[3] - points[1];
            }
            ctx.rotate((Math.atan2(-dy, -dx) + PI2) % PI2);
            ctx.moveTo(0, 0);
            ctx.lineTo(-length, width / 2);
            ctx.lineTo(-length, -width / 2);
            ctx.closePath();
            ctx.restore();
        }
        var isDashEnabled = this.dashEnabled();
        if (isDashEnabled) {
            this.attrs.dashEnabled = false;
            ctx.setLineDash([]);
        }
        ctx.fillStrokeShape(this);
        if (isDashEnabled) {
            this.attrs.dashEnabled = true;
        }
    };
    Arrow.prototype.getSelfRect = function () {
        var lineRect = _super.prototype.getSelfRect.call(this);
        var offset = this.pointerWidth() / 2;
        return {
            x: lineRect.x - offset,
            y: lineRect.y - offset,
            width: lineRect.width + offset * 2,
            height: lineRect.height + offset * 2
        };
    };
    return Arrow;
}(Line_1.Line));
exports.Arrow = Arrow;
Arrow.prototype.className = 'Arrow';
Global_1._registerNode(Arrow);
Factory_1.Factory.addGetterSetter(Arrow, 'pointerLength', 10, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Arrow, 'pointerWidth', 10, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Arrow, 'pointerAtBeginning', false);
Util_1.Collection.mapMethods(Arrow);

},{"../Factory":12,"../Global":14,"../Util":22,"../Validators":23,"./Line":52}],48:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var Circle = (function (_super) {
    __extends(Circle, _super);
    function Circle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Circle.prototype._sceneFunc = function (context) {
        context.beginPath();
        context.arc(0, 0, this.radius(), 0, Math.PI * 2, false);
        context.closePath();
        context.fillStrokeShape(this);
    };
    Circle.prototype.getWidth = function () {
        return this.radius() * 2;
    };
    Circle.prototype.getHeight = function () {
        return this.radius() * 2;
    };
    Circle.prototype.setWidth = function (width) {
        if (this.radius() !== width / 2) {
            this.radius(width / 2);
        }
    };
    Circle.prototype.setHeight = function (height) {
        if (this.radius() !== height / 2) {
            this.radius(height / 2);
        }
    };
    return Circle;
}(Shape_1.Shape));
exports.Circle = Circle;
Circle.prototype._centroid = true;
Circle.prototype.className = 'Circle';
Circle.prototype._attrsAffectingSize = ['radius'];
Global_1._registerNode(Circle);
Factory_1.Factory.addGetterSetter(Circle, 'radius', 0, Validators_1.getNumberValidator());
Util_1.Collection.mapMethods(Circle);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],49:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var Ellipse = (function (_super) {
    __extends(Ellipse, _super);
    function Ellipse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ellipse.prototype._sceneFunc = function (context) {
        var rx = this.radiusX(), ry = this.radiusY();
        context.beginPath();
        context.save();
        if (rx !== ry) {
            context.scale(1, ry / rx);
        }
        context.arc(0, 0, rx, 0, Math.PI * 2, false);
        context.restore();
        context.closePath();
        context.fillStrokeShape(this);
    };
    Ellipse.prototype.getWidth = function () {
        return this.radiusX() * 2;
    };
    Ellipse.prototype.getHeight = function () {
        return this.radiusY() * 2;
    };
    Ellipse.prototype.setWidth = function (width) {
        this.radiusX(width / 2);
    };
    Ellipse.prototype.setHeight = function (height) {
        this.radiusY(height / 2);
    };
    return Ellipse;
}(Shape_1.Shape));
exports.Ellipse = Ellipse;
Ellipse.prototype.className = 'Ellipse';
Ellipse.prototype._centroid = true;
Ellipse.prototype._attrsAffectingSize = ['radiusX', 'radiusY'];
Global_1._registerNode(Ellipse);
Factory_1.Factory.addComponentsGetterSetter(Ellipse, 'radius', ['x', 'y']);
Factory_1.Factory.addGetterSetter(Ellipse, 'radiusX', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Ellipse, 'radiusY', 0, Validators_1.getNumberValidator());
Util_1.Collection.mapMethods(Ellipse);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],50:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var Image = (function (_super) {
    __extends(Image, _super);
    function Image() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Image.prototype._useBufferCanvas = function () {
        return !!((this.hasShadow() || this.getAbsoluteOpacity() !== 1) &&
            this.hasStroke() &&
            this.getStage());
    };
    Image.prototype._sceneFunc = function (context) {
        var width = this.width(), height = this.height(), image = this.image(), cropWidth, cropHeight, params;
        if (image) {
            cropWidth = this.cropWidth();
            cropHeight = this.cropHeight();
            if (cropWidth && cropHeight) {
                params = [
                    image,
                    this.cropX(),
                    this.cropY(),
                    cropWidth,
                    cropHeight,
                    0,
                    0,
                    width,
                    height
                ];
            }
            else {
                params = [image, 0, 0, width, height];
            }
        }
        if (this.hasFill() || this.hasStroke()) {
            context.beginPath();
            context.rect(0, 0, width, height);
            context.closePath();
            context.fillStrokeShape(this);
        }
        if (image) {
            context.drawImage.apply(context, params);
        }
    };
    Image.prototype._hitFunc = function (context) {
        var width = this.width(), height = this.height();
        context.beginPath();
        context.rect(0, 0, width, height);
        context.closePath();
        context.fillStrokeShape(this);
    };
    Image.prototype.getWidth = function () {
        var _a;
        var image = this.image();
        return (_a = this.attrs.width) !== null && _a !== void 0 ? _a : (image ? image.width : 0);
    };
    Image.prototype.getHeight = function () {
        var _a;
        var image = this.image();
        return (_a = this.attrs.height) !== null && _a !== void 0 ? _a : (image ? image.height : 0);
    };
    Image.fromURL = function (url, callback) {
        var img = Util_1.Util.createImageElement();
        img.onload = function () {
            var image = new Image({
                image: img
            });
            callback(image);
        };
        img.crossOrigin = 'Anonymous';
        img.src = url;
    };
    return Image;
}(Shape_1.Shape));
exports.Image = Image;
Image.prototype.className = 'Image';
Global_1._registerNode(Image);
Factory_1.Factory.addGetterSetter(Image, 'image');
Factory_1.Factory.addComponentsGetterSetter(Image, 'crop', ['x', 'y', 'width', 'height']);
Factory_1.Factory.addGetterSetter(Image, 'cropX', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Image, 'cropY', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Image, 'cropWidth', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Image, 'cropHeight', 0, Validators_1.getNumberValidator());
Util_1.Collection.mapMethods(Image);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],51:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Group_1 = require("../Group");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var ATTR_CHANGE_LIST = [
    'fontFamily',
    'fontSize',
    'fontStyle',
    'padding',
    'lineHeight',
    'text',
    'width'
], CHANGE_KONVA = 'Change.konva', NONE = 'none', UP = 'up', RIGHT = 'right', DOWN = 'down', LEFT = 'left', attrChangeListLen = ATTR_CHANGE_LIST.length;
var Label = (function (_super) {
    __extends(Label, _super);
    function Label(config) {
        var _this = _super.call(this, config) || this;
        _this.on('add.konva', function (evt) {
            this._addListeners(evt.child);
            this._sync();
        });
        return _this;
    }
    Label.prototype.getText = function () {
        return this.find('Text')[0];
    };
    Label.prototype.getTag = function () {
        return this.find('Tag')[0];
    };
    Label.prototype._addListeners = function (text) {
        var that = this, n;
        var func = function () {
            that._sync();
        };
        for (n = 0; n < attrChangeListLen; n++) {
            text.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, func);
        }
    };
    Label.prototype.getWidth = function () {
        return this.getText().width();
    };
    Label.prototype.getHeight = function () {
        return this.getText().height();
    };
    Label.prototype._sync = function () {
        var text = this.getText(), tag = this.getTag(), width, height, pointerDirection, pointerWidth, x, y, pointerHeight;
        if (text && tag) {
            width = text.width();
            height = text.height();
            pointerDirection = tag.pointerDirection();
            pointerWidth = tag.pointerWidth();
            pointerHeight = tag.pointerHeight();
            x = 0;
            y = 0;
            switch (pointerDirection) {
                case UP:
                    x = width / 2;
                    y = -1 * pointerHeight;
                    break;
                case RIGHT:
                    x = width + pointerWidth;
                    y = height / 2;
                    break;
                case DOWN:
                    x = width / 2;
                    y = height + pointerHeight;
                    break;
                case LEFT:
                    x = -1 * pointerWidth;
                    y = height / 2;
                    break;
            }
            tag.setAttrs({
                x: -1 * x,
                y: -1 * y,
                width: width,
                height: height
            });
            text.setAttrs({
                x: -1 * x,
                y: -1 * y
            });
        }
    };
    return Label;
}(Group_1.Group));
exports.Label = Label;
Label.prototype.className = 'Label';
Global_1._registerNode(Label);
Util_1.Collection.mapMethods(Label);
var Tag = (function (_super) {
    __extends(Tag, _super);
    function Tag() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tag.prototype._sceneFunc = function (context) {
        var width = this.width(), height = this.height(), pointerDirection = this.pointerDirection(), pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), cornerRadius = Math.min(this.cornerRadius(), width / 2, height / 2);
        context.beginPath();
        if (!cornerRadius) {
            context.moveTo(0, 0);
        }
        else {
            context.moveTo(cornerRadius, 0);
        }
        if (pointerDirection === UP) {
            context.lineTo((width - pointerWidth) / 2, 0);
            context.lineTo(width / 2, -1 * pointerHeight);
            context.lineTo((width + pointerWidth) / 2, 0);
        }
        if (!cornerRadius) {
            context.lineTo(width, 0);
        }
        else {
            context.lineTo(width - cornerRadius, 0);
            context.arc(width - cornerRadius, cornerRadius, cornerRadius, (Math.PI * 3) / 2, 0, false);
        }
        if (pointerDirection === RIGHT) {
            context.lineTo(width, (height - pointerHeight) / 2);
            context.lineTo(width + pointerWidth, height / 2);
            context.lineTo(width, (height + pointerHeight) / 2);
        }
        if (!cornerRadius) {
            context.lineTo(width, height);
        }
        else {
            context.lineTo(width, height - cornerRadius);
            context.arc(width - cornerRadius, height - cornerRadius, cornerRadius, 0, Math.PI / 2, false);
        }
        if (pointerDirection === DOWN) {
            context.lineTo((width + pointerWidth) / 2, height);
            context.lineTo(width / 2, height + pointerHeight);
            context.lineTo((width - pointerWidth) / 2, height);
        }
        if (!cornerRadius) {
            context.lineTo(0, height);
        }
        else {
            context.lineTo(cornerRadius, height);
            context.arc(cornerRadius, height - cornerRadius, cornerRadius, Math.PI / 2, Math.PI, false);
        }
        if (pointerDirection === LEFT) {
            context.lineTo(0, (height + pointerHeight) / 2);
            context.lineTo(-1 * pointerWidth, height / 2);
            context.lineTo(0, (height - pointerHeight) / 2);
        }
        if (cornerRadius) {
            context.lineTo(0, cornerRadius);
            context.arc(cornerRadius, cornerRadius, cornerRadius, Math.PI, (Math.PI * 3) / 2, false);
        }
        context.closePath();
        context.fillStrokeShape(this);
    };
    Tag.prototype.getSelfRect = function () {
        var x = 0, y = 0, pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), direction = this.pointerDirection(), width = this.width(), height = this.height();
        if (direction === UP) {
            y -= pointerHeight;
            height += pointerHeight;
        }
        else if (direction === DOWN) {
            height += pointerHeight;
        }
        else if (direction === LEFT) {
            x -= pointerWidth * 1.5;
            width += pointerWidth;
        }
        else if (direction === RIGHT) {
            width += pointerWidth * 1.5;
        }
        return {
            x: x,
            y: y,
            width: width,
            height: height
        };
    };
    return Tag;
}(Shape_1.Shape));
exports.Tag = Tag;
Tag.prototype.className = 'Tag';
Global_1._registerNode(Tag);
Factory_1.Factory.addGetterSetter(Tag, 'pointerDirection', NONE);
Factory_1.Factory.addGetterSetter(Tag, 'pointerWidth', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Tag, 'pointerHeight', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Tag, 'cornerRadius', 0, Validators_1.getNumberValidator());
Util_1.Collection.mapMethods(Tag);

},{"../Factory":12,"../Global":14,"../Group":15,"../Shape":19,"../Util":22,"../Validators":23}],52:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var Line = (function (_super) {
    __extends(Line, _super);
    function Line(config) {
        var _this = _super.call(this, config) || this;
        _this.on('pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva', function () {
            this._clearCache('tensionPoints');
        });
        return _this;
    }
    Line.prototype._sceneFunc = function (context) {
        var points = this.points(), length = points.length, tension = this.tension(), closed = this.closed(), bezier = this.bezier(), tp, len, n;
        if (!length) {
            return;
        }
        context.beginPath();
        context.moveTo(points[0], points[1]);
        if (tension !== 0 && length > 4) {
            tp = this.getTensionPoints();
            len = tp.length;
            n = closed ? 0 : 4;
            if (!closed) {
                context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);
            }
            while (n < len - 2) {
                context.bezierCurveTo(tp[n++], tp[n++], tp[n++], tp[n++], tp[n++], tp[n++]);
            }
            if (!closed) {
                context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);
            }
        }
        else if (bezier) {
            n = 2;
            while (n < length) {
                context.bezierCurveTo(points[n++], points[n++], points[n++], points[n++], points[n++], points[n++]);
            }
        }
        else {
            for (n = 2; n < length; n += 2) {
                context.lineTo(points[n], points[n + 1]);
            }
        }
        if (closed) {
            context.closePath();
            context.fillStrokeShape(this);
        }
        else {
            context.strokeShape(this);
        }
    };
    Line.prototype.getTensionPoints = function () {
        return this._getCache('tensionPoints', this._getTensionPoints);
    };
    Line.prototype._getTensionPoints = function () {
        if (this.closed()) {
            return this._getTensionPointsClosed();
        }
        else {
            return Util_1.Util._expandPoints(this.points(), this.tension());
        }
    };
    Line.prototype._getTensionPointsClosed = function () {
        var p = this.points(), len = p.length, tension = this.tension(), firstControlPoints = Util_1.Util._getControlPoints(p[len - 2], p[len - 1], p[0], p[1], p[2], p[3], tension), lastControlPoints = Util_1.Util._getControlPoints(p[len - 4], p[len - 3], p[len - 2], p[len - 1], p[0], p[1], tension), middle = Util_1.Util._expandPoints(p, tension), tp = [firstControlPoints[2], firstControlPoints[3]]
            .concat(middle)
            .concat([
            lastControlPoints[0],
            lastControlPoints[1],
            p[len - 2],
            p[len - 1],
            lastControlPoints[2],
            lastControlPoints[3],
            firstControlPoints[0],
            firstControlPoints[1],
            p[0],
            p[1]
        ]);
        return tp;
    };
    Line.prototype.getWidth = function () {
        return this.getSelfRect().width;
    };
    Line.prototype.getHeight = function () {
        return this.getSelfRect().height;
    };
    Line.prototype.getSelfRect = function () {
        var points = this.points();
        if (points.length < 4) {
            return {
                x: points[0] || 0,
                y: points[1] || 0,
                width: 0,
                height: 0
            };
        }
        if (this.tension() !== 0) {
            points = __spreadArrays([
                points[0],
                points[1]
            ], this._getTensionPoints(), [
                points[points.length - 2],
                points[points.length - 1]
            ]);
        }
        else {
            points = this.points();
        }
        var minX = points[0];
        var maxX = points[0];
        var minY = points[1];
        var maxY = points[1];
        var x, y;
        for (var i = 0; i < points.length / 2; i++) {
            x = points[i * 2];
            y = points[i * 2 + 1];
            minX = Math.min(minX, x);
            maxX = Math.max(maxX, x);
            minY = Math.min(minY, y);
            maxY = Math.max(maxY, y);
        }
        return {
            x: minX,
            y: minY,
            width: maxX - minX,
            height: maxY - minY
        };
    };
    return Line;
}(Shape_1.Shape));
exports.Line = Line;
Line.prototype.className = 'Line';
Line.prototype._attrsAffectingSize = ['points', 'bezier', 'tension'];
Global_1._registerNode(Line);
Factory_1.Factory.addGetterSetter(Line, 'closed', false);
Factory_1.Factory.addGetterSetter(Line, 'bezier', false);
Factory_1.Factory.addGetterSetter(Line, 'tension', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Line, 'points', [], Validators_1.getNumberArrayValidator());
Util_1.Collection.mapMethods(Line);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],53:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Global_1 = require("../Global");
var Path = (function (_super) {
    __extends(Path, _super);
    function Path(config) {
        var _this = _super.call(this, config) || this;
        _this.dataArray = [];
        _this.pathLength = 0;
        _this.dataArray = Path.parsePathData(_this.data());
        _this.pathLength = 0;
        for (var i = 0; i < _this.dataArray.length; ++i) {
            _this.pathLength += _this.dataArray[i].pathLength;
        }
        _this.on('dataChange.konva', function () {
            this.dataArray = Path.parsePathData(this.data());
            this.pathLength = 0;
            for (var i = 0; i < this.dataArray.length; ++i) {
                this.pathLength += this.dataArray[i].pathLength;
            }
        });
        return _this;
    }
    Path.prototype._sceneFunc = function (context) {
        var ca = this.dataArray;
        context.beginPath();
        var isClosed = false;
        for (var n = 0; n < ca.length; n++) {
            var c = ca[n].command;
            var p = ca[n].points;
            switch (c) {
                case 'L':
                    context.lineTo(p[0], p[1]);
                    break;
                case 'M':
                    context.moveTo(p[0], p[1]);
                    break;
                case 'C':
                    context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);
                    break;
                case 'Q':
                    context.quadraticCurveTo(p[0], p[1], p[2], p[3]);
                    break;
                case 'A':
                    var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];
                    var r = rx > ry ? rx : ry;
                    var scaleX = rx > ry ? 1 : rx / ry;
                    var scaleY = rx > ry ? ry / rx : 1;
                    context.translate(cx, cy);
                    context.rotate(psi);
                    context.scale(scaleX, scaleY);
                    context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
                    context.scale(1 / scaleX, 1 / scaleY);
                    context.rotate(-psi);
                    context.translate(-cx, -cy);
                    break;
                case 'z':
                    isClosed = true;
                    context.closePath();
                    break;
            }
        }
        if (!isClosed && !this.hasFill()) {
            context.strokeShape(this);
        }
        else {
            context.fillStrokeShape(this);
        }
    };
    Path.prototype.getSelfRect = function () {
        var points = [];
        this.dataArray.forEach(function (data) {
            if (data.command === 'A') {
                var start = data.points[4];
                var dTheta = data.points[5];
                var end = data.points[4] + dTheta;
                var inc = Math.PI / 180.0;
                if (Math.abs(start - end) < inc) {
                    inc = Math.abs(start - end);
                }
                if (dTheta < 0) {
                    for (var t = start - inc; t > end; t -= inc) {
                        var point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);
                        points.push(point.x, point.y);
                    }
                }
                else {
                    for (var t = start + inc; t < end; t += inc) {
                        var point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);
                        points.push(point.x, point.y);
                    }
                }
            }
            else if (data.command === 'C') {
                for (var t = 0.0; t <= 1; t += 0.01) {
                    var point = Path.getPointOnCubicBezier(t, data.start.x, data.start.y, data.points[0], data.points[1], data.points[2], data.points[3], data.points[4], data.points[5]);
                    points.push(point.x, point.y);
                }
            }
            else {
                points = points.concat(data.points);
            }
        });
        var minX = points[0];
        var maxX = points[0];
        var minY = points[1];
        var maxY = points[1];
        var x, y;
        for (var i = 0; i < points.length / 2; i++) {
            x = points[i * 2];
            y = points[i * 2 + 1];
            if (!isNaN(x)) {
                minX = Math.min(minX, x);
                maxX = Math.max(maxX, x);
            }
            if (!isNaN(y)) {
                minY = Math.min(minY, y);
                maxY = Math.max(maxY, y);
            }
        }
        return {
            x: Math.round(minX),
            y: Math.round(minY),
            width: Math.round(maxX - minX),
            height: Math.round(maxY - minY)
        };
    };
    Path.prototype.getLength = function () {
        return this.pathLength;
    };
    Path.prototype.getPointAtLength = function (length) {
        var point, i = 0, ii = this.dataArray.length;
        if (!ii) {
            return null;
        }
        while (i < ii && length > this.dataArray[i].pathLength) {
            length -= this.dataArray[i].pathLength;
            ++i;
        }
        if (i === ii) {
            point = this.dataArray[i - 1].points.slice(-2);
            return {
                x: point[0],
                y: point[1]
            };
        }
        if (length < 0.01) {
            point = this.dataArray[i].points.slice(0, 2);
            return {
                x: point[0],
                y: point[1]
            };
        }
        var cp = this.dataArray[i];
        var p = cp.points;
        switch (cp.command) {
            case 'L':
                return Path.getPointOnLine(length, cp.start.x, cp.start.y, p[0], p[1]);
            case 'C':
                return Path.getPointOnCubicBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3], p[4], p[5]);
            case 'Q':
                return Path.getPointOnQuadraticBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3]);
            case 'A':
                var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6];
                theta += (dTheta * length) / cp.pathLength;
                return Path.getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi);
        }
        return null;
    };
    Path.getLineLength = function (x1, y1, x2, y2) {
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    };
    Path.getPointOnLine = function (dist, P1x, P1y, P2x, P2y, fromX, fromY) {
        if (fromX === undefined) {
            fromX = P1x;
        }
        if (fromY === undefined) {
            fromY = P1y;
        }
        var m = (P2y - P1y) / (P2x - P1x + 0.00000001);
        var run = Math.sqrt((dist * dist) / (1 + m * m));
        if (P2x < P1x) {
            run *= -1;
        }
        var rise = m * run;
        var pt;
        if (P2x === P1x) {
            pt = {
                x: fromX,
                y: fromY + rise
            };
        }
        else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {
            pt = {
                x: fromX + run,
                y: fromY + rise
            };
        }
        else {
            var ix, iy;
            var len = this.getLineLength(P1x, P1y, P2x, P2y);
            if (len < 0.00000001) {
                return undefined;
            }
            var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);
            u = u / (len * len);
            ix = P1x + u * (P2x - P1x);
            iy = P1y + u * (P2y - P1y);
            var pRise = this.getLineLength(fromX, fromY, ix, iy);
            var pRun = Math.sqrt(dist * dist - pRise * pRise);
            run = Math.sqrt((pRun * pRun) / (1 + m * m));
            if (P2x < P1x) {
                run *= -1;
            }
            rise = m * run;
            pt = {
                x: ix + run,
                y: iy + rise
            };
        }
        return pt;
    };
    Path.getPointOnCubicBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {
        function CB1(t) {
            return t * t * t;
        }
        function CB2(t) {
            return 3 * t * t * (1 - t);
        }
        function CB3(t) {
            return 3 * t * (1 - t) * (1 - t);
        }
        function CB4(t) {
            return (1 - t) * (1 - t) * (1 - t);
        }
        var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);
        var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);
        return {
            x: x,
            y: y
        };
    };
    Path.getPointOnQuadraticBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y) {
        function QB1(t) {
            return t * t;
        }
        function QB2(t) {
            return 2 * t * (1 - t);
        }
        function QB3(t) {
            return (1 - t) * (1 - t);
        }
        var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);
        var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);
        return {
            x: x,
            y: y
        };
    };
    Path.getPointOnEllipticalArc = function (cx, cy, rx, ry, theta, psi) {
        var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);
        var pt = {
            x: rx * Math.cos(theta),
            y: ry * Math.sin(theta)
        };
        return {
            x: cx + (pt.x * cosPsi - pt.y * sinPsi),
            y: cy + (pt.x * sinPsi + pt.y * cosPsi)
        };
    };
    Path.parsePathData = function (data) {
        if (!data) {
            return [];
        }
        var cs = data;
        var cc = [
            'm',
            'M',
            'l',
            'L',
            'v',
            'V',
            'h',
            'H',
            'z',
            'Z',
            'c',
            'C',
            'q',
            'Q',
            't',
            'T',
            's',
            'S',
            'a',
            'A'
        ];
        cs = cs.replace(new RegExp(' ', 'g'), ',');
        for (var n = 0; n < cc.length; n++) {
            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
        }
        var arr = cs.split('|');
        var ca = [];
        var coords = [];
        var cpx = 0;
        var cpy = 0;
        var re = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;
        var match;
        for (n = 1; n < arr.length; n++) {
            var str = arr[n];
            var c = str.charAt(0);
            str = str.slice(1);
            coords.length = 0;
            while ((match = re.exec(str))) {
                coords.push(match[0]);
            }
            var p = [];
            for (var j = 0, jlen = coords.length; j < jlen; j++) {
                var parsed = parseFloat(coords[j]);
                if (!isNaN(parsed)) {
                    p.push(parsed);
                }
                else {
                    p.push(0);
                }
            }
            while (p.length > 0) {
                if (isNaN(p[0])) {
                    break;
                }
                var cmd = null;
                var points = [];
                var startX = cpx, startY = cpy;
                var prevCmd, ctlPtx, ctlPty;
                var rx, ry, psi, fa, fs, x1, y1;
                switch (c) {
                    case 'l':
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'L';
                        points.push(cpx, cpy);
                        break;
                    case 'L':
                        cpx = p.shift();
                        cpy = p.shift();
                        points.push(cpx, cpy);
                        break;
                    case 'm':
                        var dx = p.shift();
                        var dy = p.shift();
                        cpx += dx;
                        cpy += dy;
                        cmd = 'M';
                        if (ca.length > 2 && ca[ca.length - 1].command === 'z') {
                            for (var idx = ca.length - 2; idx >= 0; idx--) {
                                if (ca[idx].command === 'M') {
                                    cpx = ca[idx].points[0] + dx;
                                    cpy = ca[idx].points[1] + dy;
                                    break;
                                }
                            }
                        }
                        points.push(cpx, cpy);
                        c = 'l';
                        break;
                    case 'M':
                        cpx = p.shift();
                        cpy = p.shift();
                        cmd = 'M';
                        points.push(cpx, cpy);
                        c = 'L';
                        break;
                    case 'h':
                        cpx += p.shift();
                        cmd = 'L';
                        points.push(cpx, cpy);
                        break;
                    case 'H':
                        cpx = p.shift();
                        cmd = 'L';
                        points.push(cpx, cpy);
                        break;
                    case 'v':
                        cpy += p.shift();
                        cmd = 'L';
                        points.push(cpx, cpy);
                        break;
                    case 'V':
                        cpy = p.shift();
                        cmd = 'L';
                        points.push(cpx, cpy);
                        break;
                    case 'C':
                        points.push(p.shift(), p.shift(), p.shift(), p.shift());
                        cpx = p.shift();
                        cpy = p.shift();
                        points.push(cpx, cpy);
                        break;
                    case 'c':
                        points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'C';
                        points.push(cpx, cpy);
                        break;
                    case 'S':
                        ctlPtx = cpx;
                        ctlPty = cpy;
                        prevCmd = ca[ca.length - 1];
                        if (prevCmd.command === 'C') {
                            ctlPtx = cpx + (cpx - prevCmd.points[2]);
                            ctlPty = cpy + (cpy - prevCmd.points[3]);
                        }
                        points.push(ctlPtx, ctlPty, p.shift(), p.shift());
                        cpx = p.shift();
                        cpy = p.shift();
                        cmd = 'C';
                        points.push(cpx, cpy);
                        break;
                    case 's':
                        ctlPtx = cpx;
                        ctlPty = cpy;
                        prevCmd = ca[ca.length - 1];
                        if (prevCmd.command === 'C') {
                            ctlPtx = cpx + (cpx - prevCmd.points[2]);
                            ctlPty = cpy + (cpy - prevCmd.points[3]);
                        }
                        points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'C';
                        points.push(cpx, cpy);
                        break;
                    case 'Q':
                        points.push(p.shift(), p.shift());
                        cpx = p.shift();
                        cpy = p.shift();
                        points.push(cpx, cpy);
                        break;
                    case 'q':
                        points.push(cpx + p.shift(), cpy + p.shift());
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'Q';
                        points.push(cpx, cpy);
                        break;
                    case 'T':
                        ctlPtx = cpx;
                        ctlPty = cpy;
                        prevCmd = ca[ca.length - 1];
                        if (prevCmd.command === 'Q') {
                            ctlPtx = cpx + (cpx - prevCmd.points[0]);
                            ctlPty = cpy + (cpy - prevCmd.points[1]);
                        }
                        cpx = p.shift();
                        cpy = p.shift();
                        cmd = 'Q';
                        points.push(ctlPtx, ctlPty, cpx, cpy);
                        break;
                    case 't':
                        ctlPtx = cpx;
                        ctlPty = cpy;
                        prevCmd = ca[ca.length - 1];
                        if (prevCmd.command === 'Q') {
                            ctlPtx = cpx + (cpx - prevCmd.points[0]);
                            ctlPty = cpy + (cpy - prevCmd.points[1]);
                        }
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'Q';
                        points.push(ctlPtx, ctlPty, cpx, cpy);
                        break;
                    case 'A':
                        rx = p.shift();
                        ry = p.shift();
                        psi = p.shift();
                        fa = p.shift();
                        fs = p.shift();
                        x1 = cpx;
                        y1 = cpy;
                        cpx = p.shift();
                        cpy = p.shift();
                        cmd = 'A';
                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
                        break;
                    case 'a':
                        rx = p.shift();
                        ry = p.shift();
                        psi = p.shift();
                        fa = p.shift();
                        fs = p.shift();
                        x1 = cpx;
                        y1 = cpy;
                        cpx += p.shift();
                        cpy += p.shift();
                        cmd = 'A';
                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
                        break;
                }
                ca.push({
                    command: cmd || c,
                    points: points,
                    start: {
                        x: startX,
                        y: startY
                    },
                    pathLength: this.calcLength(startX, startY, cmd || c, points)
                });
            }
            if (c === 'z' || c === 'Z') {
                ca.push({
                    command: 'z',
                    points: [],
                    start: undefined,
                    pathLength: 0
                });
            }
        }
        return ca;
    };
    Path.calcLength = function (x, y, cmd, points) {
        var len, p1, p2, t;
        var path = Path;
        switch (cmd) {
            case 'L':
                return path.getLineLength(x, y, points[0], points[1]);
            case 'C':
                len = 0.0;
                p1 = path.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);
                for (t = 0.01; t <= 1; t += 0.01) {
                    p2 = path.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);
                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                    p1 = p2;
                }
                return len;
            case 'Q':
                len = 0.0;
                p1 = path.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);
                for (t = 0.01; t <= 1; t += 0.01) {
                    p2 = path.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);
                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                    p1 = p2;
                }
                return len;
            case 'A':
                len = 0.0;
                var start = points[4];
                var dTheta = points[5];
                var end = points[4] + dTheta;
                var inc = Math.PI / 180.0;
                if (Math.abs(start - end) < inc) {
                    inc = Math.abs(start - end);
                }
                p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);
                if (dTheta < 0) {
                    for (t = start - inc; t > end; t -= inc) {
                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                        p1 = p2;
                    }
                }
                else {
                    for (t = start + inc; t < end; t += inc) {
                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                        p1 = p2;
                    }
                }
                p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);
                len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                return len;
        }
        return 0;
    };
    Path.convertEndpointToCenterParameterization = function (x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {
        var psi = psiDeg * (Math.PI / 180.0);
        var xp = (Math.cos(psi) * (x1 - x2)) / 2.0 + (Math.sin(psi) * (y1 - y2)) / 2.0;
        var yp = (-1 * Math.sin(psi) * (x1 - x2)) / 2.0 +
            (Math.cos(psi) * (y1 - y2)) / 2.0;
        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);
        if (lambda > 1) {
            rx *= Math.sqrt(lambda);
            ry *= Math.sqrt(lambda);
        }
        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) /
            (rx * rx * (yp * yp) + ry * ry * (xp * xp)));
        if (fa === fs) {
            f *= -1;
        }
        if (isNaN(f)) {
            f = 0;
        }
        var cxp = (f * rx * yp) / ry;
        var cyp = (f * -ry * xp) / rx;
        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;
        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;
        var vMag = function (v) {
            return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
        };
        var vRatio = function (u, v) {
            return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
        };
        var vAngle = function (u, v) {
            return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
        };
        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
        var u = [(xp - cxp) / rx, (yp - cyp) / ry];
        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
        var dTheta = vAngle(u, v);
        if (vRatio(u, v) <= -1) {
            dTheta = Math.PI;
        }
        if (vRatio(u, v) >= 1) {
            dTheta = 0;
        }
        if (fs === 0 && dTheta > 0) {
            dTheta = dTheta - 2 * Math.PI;
        }
        if (fs === 1 && dTheta < 0) {
            dTheta = dTheta + 2 * Math.PI;
        }
        return [cx, cy, rx, ry, theta, dTheta, psi, fs];
    };
    return Path;
}(Shape_1.Shape));
exports.Path = Path;
Path.prototype.className = 'Path';
Path.prototype._attrsAffectingSize = ['data'];
Global_1._registerNode(Path);
Factory_1.Factory.addGetterSetter(Path, 'data');
Util_1.Collection.mapMethods(Path);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22}],54:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Global_1 = require("../Global");
var Rect = (function (_super) {
    __extends(Rect, _super);
    function Rect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rect.prototype._sceneFunc = function (context) {
        var cornerRadius = this.cornerRadius(), width = this.width(), height = this.height();
        context.beginPath();
        if (!cornerRadius) {
            context.rect(0, 0, width, height);
        }
        else {
            var topLeft = 0;
            var topRight = 0;
            var bottomLeft = 0;
            var bottomRight = 0;
            if (typeof cornerRadius === 'number') {
                topLeft = topRight = bottomLeft = bottomRight = Math.min(cornerRadius, width / 2, height / 2);
            }
            else {
                topLeft = Math.min(cornerRadius[0], width / 2, height / 2);
                topRight = Math.min(cornerRadius[1], width / 2, height / 2);
                bottomRight = Math.min(cornerRadius[2], width / 2, height / 2);
                bottomLeft = Math.min(cornerRadius[3], width / 2, height / 2);
            }
            context.moveTo(topLeft, 0);
            context.lineTo(width - topRight, 0);
            context.arc(width - topRight, topRight, topRight, (Math.PI * 3) / 2, 0, false);
            context.lineTo(width, height - bottomRight);
            context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);
            context.lineTo(bottomLeft, height);
            context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);
            context.lineTo(0, topLeft);
            context.arc(topLeft, topLeft, topLeft, Math.PI, (Math.PI * 3) / 2, false);
        }
        context.closePath();
        context.fillStrokeShape(this);
    };
    return Rect;
}(Shape_1.Shape));
exports.Rect = Rect;
Rect.prototype.className = 'Rect';
Global_1._registerNode(Rect);
Factory_1.Factory.addGetterSetter(Rect, 'cornerRadius', 0);
Util_1.Collection.mapMethods(Rect);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22}],55:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var RegularPolygon = (function (_super) {
    __extends(RegularPolygon, _super);
    function RegularPolygon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RegularPolygon.prototype._sceneFunc = function (context) {
        var sides = this.sides(), radius = this.radius(), n, x, y;
        context.beginPath();
        context.moveTo(0, 0 - radius);
        for (n = 1; n < sides; n++) {
            x = radius * Math.sin((n * 2 * Math.PI) / sides);
            y = -1 * radius * Math.cos((n * 2 * Math.PI) / sides);
            context.lineTo(x, y);
        }
        context.closePath();
        context.fillStrokeShape(this);
    };
    RegularPolygon.prototype.getWidth = function () {
        return this.radius() * 2;
    };
    RegularPolygon.prototype.getHeight = function () {
        return this.radius() * 2;
    };
    RegularPolygon.prototype.setWidth = function (width) {
        this.radius(width / 2);
    };
    RegularPolygon.prototype.setHeight = function (height) {
        this.radius(height / 2);
    };
    return RegularPolygon;
}(Shape_1.Shape));
exports.RegularPolygon = RegularPolygon;
RegularPolygon.prototype.className = 'RegularPolygon';
RegularPolygon.prototype._centroid = true;
RegularPolygon.prototype._attrsAffectingSize = ['radius'];
Global_1._registerNode(RegularPolygon);
Factory_1.Factory.addGetterSetter(RegularPolygon, 'radius', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(RegularPolygon, 'sides', 0, Validators_1.getNumberValidator());
Util_1.Collection.mapMethods(RegularPolygon);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],56:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var PIx2 = Math.PI * 2;
var Ring = (function (_super) {
    __extends(Ring, _super);
    function Ring() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ring.prototype._sceneFunc = function (context) {
        context.beginPath();
        context.arc(0, 0, this.innerRadius(), 0, PIx2, false);
        context.moveTo(this.outerRadius(), 0);
        context.arc(0, 0, this.outerRadius(), PIx2, 0, true);
        context.closePath();
        context.fillStrokeShape(this);
    };
    Ring.prototype.getWidth = function () {
        return this.outerRadius() * 2;
    };
    Ring.prototype.getHeight = function () {
        return this.outerRadius() * 2;
    };
    Ring.prototype.setWidth = function (width) {
        this.outerRadius(width / 2);
    };
    Ring.prototype.setHeight = function (height) {
        this.outerRadius(height / 2);
    };
    return Ring;
}(Shape_1.Shape));
exports.Ring = Ring;
Ring.prototype.className = 'Ring';
Ring.prototype._centroid = true;
Ring.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
Global_1._registerNode(Ring);
Factory_1.Factory.addGetterSetter(Ring, 'innerRadius', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Ring, 'outerRadius', 0, Validators_1.getNumberValidator());
Util_1.Collection.mapMethods(Ring);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],57:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Animation_1 = require("../Animation");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var Sprite = (function (_super) {
    __extends(Sprite, _super);
    function Sprite(config) {
        var _this = _super.call(this, config) || this;
        _this._updated = true;
        _this.anim = new Animation_1.Animation(function () {
            var updated = _this._updated;
            _this._updated = false;
            return updated;
        });
        _this.on('animationChange.konva', function () {
            this.frameIndex(0);
        });
        _this.on('frameIndexChange.konva', function () {
            this._updated = true;
        });
        _this.on('frameRateChange.konva', function () {
            if (!this.anim.isRunning()) {
                return;
            }
            clearInterval(this.interval);
            this._setInterval();
        });
        return _this;
    }
    Sprite.prototype._sceneFunc = function (context) {
        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), x = set[ix4 + 0], y = set[ix4 + 1], width = set[ix4 + 2], height = set[ix4 + 3], image = this.image();
        if (this.hasFill() || this.hasStroke()) {
            context.beginPath();
            context.rect(0, 0, width, height);
            context.closePath();
            context.fillStrokeShape(this);
        }
        if (image) {
            if (offsets) {
                var offset = offsets[anim], ix2 = index * 2;
                context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);
            }
            else {
                context.drawImage(image, x, y, width, height, 0, 0, width, height);
            }
        }
    };
    Sprite.prototype._hitFunc = function (context) {
        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), width = set[ix4 + 2], height = set[ix4 + 3];
        context.beginPath();
        if (offsets) {
            var offset = offsets[anim];
            var ix2 = index * 2;
            context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);
        }
        else {
            context.rect(0, 0, width, height);
        }
        context.closePath();
        context.fillShape(this);
    };
    Sprite.prototype._useBufferCanvas = function () {
        return ((this.hasShadow() || this.getAbsoluteOpacity() !== 1) && this.hasStroke());
    };
    Sprite.prototype._setInterval = function () {
        var that = this;
        this.interval = setInterval(function () {
            that._updateIndex();
        }, 1000 / this.frameRate());
    };
    Sprite.prototype.start = function () {
        if (this.isRunning()) {
            return;
        }
        var layer = this.getLayer();
        this.anim.setLayers(layer);
        this._setInterval();
        this.anim.start();
    };
    Sprite.prototype.stop = function () {
        this.anim.stop();
        clearInterval(this.interval);
    };
    Sprite.prototype.isRunning = function () {
        return this.anim.isRunning();
    };
    Sprite.prototype._updateIndex = function () {
        var index = this.frameIndex(), animation = this.animation(), animations = this.animations(), anim = animations[animation], len = anim.length / 4;
        if (index < len - 1) {
            this.frameIndex(index + 1);
        }
        else {
            this.frameIndex(0);
        }
    };
    return Sprite;
}(Shape_1.Shape));
exports.Sprite = Sprite;
Sprite.prototype.className = 'Sprite';
Global_1._registerNode(Sprite);
Factory_1.Factory.addGetterSetter(Sprite, 'animation');
Factory_1.Factory.addGetterSetter(Sprite, 'animations');
Factory_1.Factory.addGetterSetter(Sprite, 'frameOffsets');
Factory_1.Factory.addGetterSetter(Sprite, 'image');
Factory_1.Factory.addGetterSetter(Sprite, 'frameIndex', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Sprite, 'frameRate', 17, Validators_1.getNumberValidator());
Factory_1.Factory.backCompat(Sprite, {
    index: 'frameIndex',
    getIndex: 'getFrameIndex',
    setIndex: 'setFrameIndex'
});
Util_1.Collection.mapMethods(Sprite);

},{"../Animation":6,"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],58:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var Star = (function (_super) {
    __extends(Star, _super);
    function Star() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Star.prototype._sceneFunc = function (context) {
        var innerRadius = this.innerRadius(), outerRadius = this.outerRadius(), numPoints = this.numPoints();
        context.beginPath();
        context.moveTo(0, 0 - outerRadius);
        for (var n = 1; n < numPoints * 2; n++) {
            var radius = n % 2 === 0 ? outerRadius : innerRadius;
            var x = radius * Math.sin((n * Math.PI) / numPoints);
            var y = -1 * radius * Math.cos((n * Math.PI) / numPoints);
            context.lineTo(x, y);
        }
        context.closePath();
        context.fillStrokeShape(this);
    };
    Star.prototype.getWidth = function () {
        return this.outerRadius() * 2;
    };
    Star.prototype.getHeight = function () {
        return this.outerRadius() * 2;
    };
    Star.prototype.setWidth = function (width) {
        this.outerRadius(width / 2);
    };
    Star.prototype.setHeight = function (height) {
        this.outerRadius(height / 2);
    };
    return Star;
}(Shape_1.Shape));
exports.Star = Star;
Star.prototype.className = 'Star';
Star.prototype._centroid = true;
Star.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
Global_1._registerNode(Star);
Factory_1.Factory.addGetterSetter(Star, 'numPoints', 5, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Star, 'innerRadius', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Star, 'outerRadius', 0, Validators_1.getNumberValidator());
Util_1.Collection.mapMethods(Star);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],59:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Global_1 = require("../Global");
var Validators_1 = require("../Validators");
var Global_2 = require("../Global");
var AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = '…', ATTR_CHANGE_LIST = [
    'fontFamily',
    'fontSize',
    'fontStyle',
    'fontVariant',
    'padding',
    'align',
    'verticalAlign',
    'lineHeight',
    'text',
    'width',
    'height',
    'wrap',
    'ellipsis',
    'letterSpacing'
], attrChangeListLen = ATTR_CHANGE_LIST.length;
var dummyContext;
function getDummyContext() {
    if (dummyContext) {
        return dummyContext;
    }
    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);
    return dummyContext;
}
function _fillFunc(context) {
    context.fillText(this._partialText, this._partialTextX, this._partialTextY);
}
function _strokeFunc(context) {
    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);
}
function checkDefaultFill(config) {
    config = config || {};
    if (!config.fillLinearGradientColorStops &&
        !config.fillRadialGradientColorStops &&
        !config.fillPatternImage) {
        config.fill = config.fill || 'black';
    }
    return config;
}
var trimRight = String.prototype.trimRight ||
    function polyfill() {
        return this.replace(/[\s\xa0]+$/, '');
    };
var Text = (function (_super) {
    __extends(Text, _super);
    function Text(config) {
        var _this = _super.call(this, checkDefaultFill(config)) || this;
        _this._partialTextX = 0;
        _this._partialTextY = 0;
        for (var n = 0; n < attrChangeListLen; n++) {
            _this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, _this._setTextData);
        }
        _this._setTextData();
        return _this;
    }
    Text.prototype._sceneFunc = function (context) {
        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, textArr = this.textArr, textArrLen = textArr.length, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;
        var translateY = 0;
        var translateY = lineHeightPx / 2;
        var lineTranslateX = 0;
        var lineTranslateY = 0;
        context.setAttr('font', this._getContextFont());
        context.setAttr('textBaseline', MIDDLE);
        context.setAttr('textAlign', LEFT);
        if (verticalAlign === MIDDLE) {
            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;
        }
        else if (verticalAlign === BOTTOM) {
            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;
        }
        context.translate(padding, alignY + padding);
        for (n = 0; n < textArrLen; n++) {
            var lineTranslateX = 0;
            var lineTranslateY = 0;
            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = n !== textArrLen - 1, spacesNumber, oneWord, lineWidth;
            context.save();
            if (align === RIGHT) {
                lineTranslateX += totalWidth - width - padding * 2;
            }
            else if (align === CENTER) {
                lineTranslateX += (totalWidth - width - padding * 2) / 2;
            }
            if (shouldUnderline) {
                context.save();
                context.beginPath();
                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));
                spacesNumber = text.split(' ').length - 1;
                oneWord = spacesNumber === 0;
                lineWidth =
                    align === JUSTIFY && lastLine && !oneWord
                        ? totalWidth - padding * 2
                        : width;
                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));
                context.lineWidth = fontSize / 15;
                context.strokeStyle = fill;
                context.stroke();
                context.restore();
            }
            if (shouldLineThrough) {
                context.save();
                context.beginPath();
                context.moveTo(lineTranslateX, translateY + lineTranslateY);
                spacesNumber = text.split(' ').length - 1;
                oneWord = spacesNumber === 0;
                lineWidth =
                    align === JUSTIFY && lastLine && !oneWord
                        ? totalWidth - padding * 2
                        : width;
                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);
                context.lineWidth = fontSize / 15;
                context.strokeStyle = fill;
                context.stroke();
                context.restore();
            }
            if (letterSpacing !== 0 || align === JUSTIFY) {
                spacesNumber = text.split(' ').length - 1;
                for (var li = 0; li < text.length; li++) {
                    var letter = text[li];
                    if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {
                        lineTranslateX += Math.floor((totalWidth - padding * 2 - width) / spacesNumber);
                    }
                    this._partialTextX = lineTranslateX;
                    this._partialTextY = translateY + lineTranslateY;
                    this._partialText = letter;
                    context.fillStrokeShape(this);
                    lineTranslateX +=
                        Math.round(this.measureSize(letter).width) + letterSpacing;
                }
            }
            else {
                this._partialTextX = lineTranslateX;
                this._partialTextY = translateY + lineTranslateY;
                this._partialText = text;
                context.fillStrokeShape(this);
            }
            context.restore();
            if (textArrLen > 1) {
                translateY += lineHeightPx;
            }
        }
    };
    Text.prototype._hitFunc = function (context) {
        var width = this.getWidth(), height = this.getHeight();
        context.beginPath();
        context.rect(0, 0, width, height);
        context.closePath();
        context.fillStrokeShape(this);
    };
    Text.prototype.setText = function (text) {
        var str = Util_1.Util._isString(text)
            ? text
            : text === null || text === undefined
                ? ''
                : text + '';
        this._setAttr(TEXT, str);
        return this;
    };
    Text.prototype.getWidth = function () {
        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;
        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;
    };
    Text.prototype.getHeight = function () {
        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;
        return isAuto
            ? this.fontSize() * this.textArr.length * this.lineHeight() +
                this.padding() * 2
            : this.attrs.height;
    };
    Text.prototype.getTextWidth = function () {
        return this.textWidth;
    };
    Text.prototype.getTextHeight = function () {
        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');
        return this.textHeight;
    };
    Text.prototype.measureSize = function (text) {
        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;
        _context.save();
        _context.font = this._getContextFont();
        metrics = _context.measureText(text);
        _context.restore();
        return {
            width: metrics.width,
            height: fontSize
        };
    };
    Text.prototype._getContextFont = function () {
        if (Global_1.Konva.UA.isIE) {
            return (this.fontStyle() +
                SPACE +
                this.fontSize() +
                PX_SPACE +
                this.fontFamily());
        }
        return (this.fontStyle() +
            SPACE +
            this.fontVariant() +
            SPACE +
            this.fontSize() +
            PX_SPACE +
            this.fontFamily());
    };
    Text.prototype._addTextLine = function (line) {
        if (this.align() === JUSTIFY) {
            line = line.trim();
        }
        var width = this._getTextWidth(line);
        return this.textArr.push({ text: line, width: width });
    };
    Text.prototype._getTextWidth = function (text) {
        var letterSpacing = this.letterSpacing();
        var length = text.length;
        return (getDummyContext().measureText(text).width +
            (length ? letterSpacing * (length - 1) : 0));
    };
    Text.prototype._setTextData = function () {
        var lines = this.text().split('\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis() && !shouldWrap;
        this.textArr = [];
        getDummyContext().font = this._getContextFont();
        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;
        for (var i = 0, max = lines.length; i < max; ++i) {
            var line = lines[i];
            var lineWidth = this._getTextWidth(line);
            if (fixedWidth && lineWidth > maxWidth) {
                while (line.length > 0) {
                    var low = 0, high = line.length, match = '', matchWidth = 0;
                    while (low < high) {
                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;
                        if (substrWidth <= maxWidth) {
                            low = mid + 1;
                            match = substr + (shouldAddEllipsis ? ELLIPSIS : '');
                            matchWidth = substrWidth;
                        }
                        else {
                            high = mid;
                        }
                    }
                    if (match) {
                        if (wrapAtWord) {
                            var wrapIndex;
                            var nextChar = line[match.length];
                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;
                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {
                                wrapIndex = match.length;
                            }
                            else {
                                wrapIndex =
                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +
                                        1;
                            }
                            if (wrapIndex > 0) {
                                low = wrapIndex;
                                match = match.slice(0, low);
                                matchWidth = this._getTextWidth(match);
                            }
                        }
                        match = match.trimRight();
                        this._addTextLine(match);
                        textWidth = Math.max(textWidth, matchWidth);
                        currentHeightPx += lineHeightPx;
                        if (!shouldWrap ||
                            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {
                            break;
                        }
                        line = line.slice(low);
                        line = line.trimLeft();
                        if (line.length > 0) {
                            lineWidth = this._getTextWidth(line);
                            if (lineWidth <= maxWidth) {
                                this._addTextLine(line);
                                currentHeightPx += lineHeightPx;
                                textWidth = Math.max(textWidth, lineWidth);
                                break;
                            }
                        }
                    }
                    else {
                        break;
                    }
                }
            }
            else {
                this._addTextLine(line);
                currentHeightPx += lineHeightPx;
                textWidth = Math.max(textWidth, lineWidth);
            }
            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {
                break;
            }
        }
        this.textHeight = fontSize;
        this.textWidth = textWidth;
    };
    Text.prototype.getStrokeScaleEnabled = function () {
        return true;
    };
    return Text;
}(Shape_1.Shape));
exports.Text = Text;
Text.prototype._fillFunc = _fillFunc;
Text.prototype._strokeFunc = _strokeFunc;
Text.prototype.className = TEXT_UPPER;
Text.prototype._attrsAffectingSize = [
    'text',
    'fontSize',
    'padding',
    'wrap',
    'lineHeight'
];
Global_2._registerNode(Text);
Factory_1.Factory.overWriteSetter(Text, 'width', Validators_1.getNumberOrAutoValidator());
Factory_1.Factory.overWriteSetter(Text, 'height', Validators_1.getNumberOrAutoValidator());
Factory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');
Factory_1.Factory.addGetterSetter(Text, 'fontSize', 12, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);
Factory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);
Factory_1.Factory.addGetterSetter(Text, 'padding', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Text, 'align', LEFT);
Factory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);
Factory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Text, 'wrap', WORD);
Factory_1.Factory.addGetterSetter(Text, 'ellipsis', false);
Factory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Text, 'text', '', Validators_1.getStringValidator());
Factory_1.Factory.addGetterSetter(Text, 'textDecoration', '');
Util_1.Collection.mapMethods(Text);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],60:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Path_1 = require("./Path");
var Text_1 = require("./Text");
var Validators_1 = require("../Validators");
var Global_1 = require("../Global");
var EMPTY_STRING = '', NORMAL = 'normal';
function _fillFunc(context) {
    context.fillText(this.partialText, 0, 0);
}
function _strokeFunc(context) {
    context.strokeText(this.partialText, 0, 0);
}
var TextPath = (function (_super) {
    __extends(TextPath, _super);
    function TextPath(config) {
        var _this = _super.call(this, config) || this;
        _this.dummyCanvas = Util_1.Util.createCanvasElement();
        _this.dataArray = [];
        _this.dataArray = Path_1.Path.parsePathData(_this.attrs.data);
        _this.on('dataChange.konva', function () {
            this.dataArray = Path_1.Path.parsePathData(this.attrs.data);
            this._setTextData();
        });
        _this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva', _this._setTextData);
        if (config && config['getKerning']) {
            Util_1.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.');
            _this.kerningFunc(config['getKerning']);
        }
        _this._setTextData();
        return _this;
    }
    TextPath.prototype._sceneFunc = function (context) {
        context.setAttr('font', this._getContextFont());
        context.setAttr('textBaseline', this.textBaseline());
        context.setAttr('textAlign', 'left');
        context.save();
        var textDecoration = this.textDecoration();
        var fill = this.fill();
        var fontSize = this.fontSize();
        var glyphInfo = this.glyphInfo;
        if (textDecoration === 'underline') {
            context.beginPath();
        }
        for (var i = 0; i < glyphInfo.length; i++) {
            context.save();
            var p0 = glyphInfo[i].p0;
            context.translate(p0.x, p0.y);
            context.rotate(glyphInfo[i].rotation);
            this.partialText = glyphInfo[i].text;
            context.fillStrokeShape(this);
            if (textDecoration === 'underline') {
                if (i === 0) {
                    context.moveTo(0, fontSize / 2 + 1);
                }
                context.lineTo(fontSize, fontSize / 2 + 1);
            }
            context.restore();
        }
        if (textDecoration === 'underline') {
            context.strokeStyle = fill;
            context.lineWidth = fontSize / 20;
            context.stroke();
        }
        context.restore();
    };
    TextPath.prototype._hitFunc = function (context) {
        context.beginPath();
        var glyphInfo = this.glyphInfo;
        if (glyphInfo.length >= 1) {
            var p0 = glyphInfo[0].p0;
            context.moveTo(p0.x, p0.y);
        }
        for (var i = 0; i < glyphInfo.length; i++) {
            var p1 = glyphInfo[i].p1;
            context.lineTo(p1.x, p1.y);
        }
        context.setAttr('lineWidth', this.fontSize());
        context.setAttr('strokeStyle', this.colorKey);
        context.stroke();
    };
    TextPath.prototype.getTextWidth = function () {
        return this.textWidth;
    };
    TextPath.prototype.getTextHeight = function () {
        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');
        return this.textHeight;
    };
    TextPath.prototype.setText = function (text) {
        return Text_1.Text.prototype.setText.call(this, text);
    };
    TextPath.prototype._getContextFont = function () {
        return Text_1.Text.prototype._getContextFont.call(this);
    };
    TextPath.prototype._getTextSize = function (text) {
        var dummyCanvas = this.dummyCanvas;
        var _context = dummyCanvas.getContext('2d');
        _context.save();
        _context.font = this._getContextFont();
        var metrics = _context.measureText(text);
        _context.restore();
        return {
            width: metrics.width,
            height: parseInt(this.attrs.fontSize, 10)
        };
    };
    TextPath.prototype._setTextData = function () {
        var that = this;
        var size = this._getTextSize(this.attrs.text);
        var letterSpacing = this.letterSpacing();
        var align = this.align();
        var kerningFunc = this.kerningFunc();
        this.textWidth = size.width;
        this.textHeight = size.height;
        var textFullWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);
        this.glyphInfo = [];
        var fullPathWidth = 0;
        for (var l = 0; l < that.dataArray.length; l++) {
            if (that.dataArray[l].pathLength > 0) {
                fullPathWidth += that.dataArray[l].pathLength;
            }
        }
        var offset = 0;
        if (align === 'center') {
            offset = Math.max(0, fullPathWidth / 2 - textFullWidth / 2);
        }
        if (align === 'right') {
            offset = Math.max(0, fullPathWidth - textFullWidth);
        }
        var charArr = this.text().split('');
        var spacesNumber = this.text().split(' ').length - 1;
        var p0, p1, pathCmd;
        var pIndex = -1;
        var currentT = 0;
        var getNextPathSegment = function () {
            currentT = 0;
            var pathData = that.dataArray;
            for (var j = pIndex + 1; j < pathData.length; j++) {
                if (pathData[j].pathLength > 0) {
                    pIndex = j;
                    return pathData[j];
                }
                else if (pathData[j].command === 'M') {
                    p0 = {
                        x: pathData[j].points[0],
                        y: pathData[j].points[1]
                    };
                }
            }
            return {};
        };
        var findSegmentToFitCharacter = function (c) {
            var glyphWidth = that._getTextSize(c).width + letterSpacing;
            if (c === ' ' && align === 'justify') {
                glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;
            }
            var currLen = 0;
            var attempts = 0;
            p1 = undefined;
            while (Math.abs(glyphWidth - currLen) / glyphWidth > 0.01 &&
                attempts < 25) {
                attempts++;
                var cumulativePathLength = currLen;
                while (pathCmd === undefined) {
                    pathCmd = getNextPathSegment();
                    if (pathCmd &&
                        cumulativePathLength + pathCmd.pathLength < glyphWidth) {
                        cumulativePathLength += pathCmd.pathLength;
                        pathCmd = undefined;
                    }
                }
                if (pathCmd === {} || p0 === undefined) {
                    return undefined;
                }
                var needNewSegment = false;
                switch (pathCmd.command) {
                    case 'L':
                        if (Path_1.Path.getLineLength(p0.x, p0.y, pathCmd.points[0], pathCmd.points[1]) > glyphWidth) {
                            p1 = Path_1.Path.getPointOnLine(glyphWidth, p0.x, p0.y, pathCmd.points[0], pathCmd.points[1], p0.x, p0.y);
                        }
                        else {
                            pathCmd = undefined;
                        }
                        break;
                    case 'A':
                        var start = pathCmd.points[4];
                        var dTheta = pathCmd.points[5];
                        var end = pathCmd.points[4] + dTheta;
                        if (currentT === 0) {
                            currentT = start + 0.00000001;
                        }
                        else if (glyphWidth > currLen) {
                            currentT += ((Math.PI / 180.0) * dTheta) / Math.abs(dTheta);
                        }
                        else {
                            currentT -= ((Math.PI / 360.0) * dTheta) / Math.abs(dTheta);
                        }
                        if ((dTheta < 0 && currentT < end) ||
                            (dTheta >= 0 && currentT > end)) {
                            currentT = end;
                            needNewSegment = true;
                        }
                        p1 = Path_1.Path.getPointOnEllipticalArc(pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], currentT, pathCmd.points[6]);
                        break;
                    case 'C':
                        if (currentT === 0) {
                            if (glyphWidth > pathCmd.pathLength) {
                                currentT = 0.00000001;
                            }
                            else {
                                currentT = glyphWidth / pathCmd.pathLength;
                            }
                        }
                        else if (glyphWidth > currLen) {
                            currentT += (glyphWidth - currLen) / pathCmd.pathLength;
                        }
                        else {
                            currentT -= (currLen - glyphWidth) / pathCmd.pathLength;
                        }
                        if (currentT > 1.0) {
                            currentT = 1.0;
                            needNewSegment = true;
                        }
                        p1 = Path_1.Path.getPointOnCubicBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], pathCmd.points[4], pathCmd.points[5]);
                        break;
                    case 'Q':
                        if (currentT === 0) {
                            currentT = glyphWidth / pathCmd.pathLength;
                        }
                        else if (glyphWidth > currLen) {
                            currentT += (glyphWidth - currLen) / pathCmd.pathLength;
                        }
                        else {
                            currentT -= (currLen - glyphWidth) / pathCmd.pathLength;
                        }
                        if (currentT > 1.0) {
                            currentT = 1.0;
                            needNewSegment = true;
                        }
                        p1 = Path_1.Path.getPointOnQuadraticBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3]);
                        break;
                }
                if (p1 !== undefined) {
                    currLen = Path_1.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);
                }
                if (needNewSegment) {
                    needNewSegment = false;
                    pathCmd = undefined;
                }
            }
        };
        var testChar = 'C';
        var glyphWidth = that._getTextSize(testChar).width + letterSpacing;
        var lettersInOffset = offset / glyphWidth - 1;
        for (var k = 0; k < lettersInOffset; k++) {
            findSegmentToFitCharacter(testChar);
            if (p0 === undefined || p1 === undefined) {
                break;
            }
            p0 = p1;
        }
        for (var i = 0; i < charArr.length; i++) {
            findSegmentToFitCharacter(charArr[i]);
            if (p0 === undefined || p1 === undefined) {
                break;
            }
            var width = Path_1.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);
            var kern = 0;
            if (kerningFunc) {
                try {
                    kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();
                }
                catch (e) {
                    kern = 0;
                }
            }
            p0.x += kern;
            p1.x += kern;
            this.textWidth += kern;
            var midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, p0.x, p0.y, p1.x, p1.y);
            var rotation = Math.atan2(p1.y - p0.y, p1.x - p0.x);
            this.glyphInfo.push({
                transposeX: midpoint.x,
                transposeY: midpoint.y,
                text: charArr[i],
                rotation: rotation,
                p0: p0,
                p1: p1
            });
            p0 = p1;
        }
    };
    TextPath.prototype.getSelfRect = function () {
        if (!this.glyphInfo.length) {
            return {
                x: 0,
                y: 0,
                width: 0,
                height: 0
            };
        }
        var points = [];
        this.glyphInfo.forEach(function (info) {
            points.push(info.p0.x);
            points.push(info.p0.y);
            points.push(info.p1.x);
            points.push(info.p1.y);
        });
        var minX = points[0] || 0;
        var maxX = points[0] || 0;
        var minY = points[1] || 0;
        var maxY = points[1] || 0;
        var x, y;
        for (var i = 0; i < points.length / 2; i++) {
            x = points[i * 2];
            y = points[i * 2 + 1];
            minX = Math.min(minX, x);
            maxX = Math.max(maxX, x);
            minY = Math.min(minY, y);
            maxY = Math.max(maxY, y);
        }
        var fontSize = this.fontSize();
        return {
            x: minX - fontSize / 2,
            y: minY - fontSize / 2,
            width: maxX - minX + fontSize,
            height: maxY - minY + fontSize
        };
    };
    return TextPath;
}(Shape_1.Shape));
exports.TextPath = TextPath;
TextPath.prototype._fillFunc = _fillFunc;
TextPath.prototype._strokeFunc = _strokeFunc;
TextPath.prototype._fillFuncHit = _fillFunc;
TextPath.prototype._strokeFuncHit = _strokeFunc;
TextPath.prototype.className = 'TextPath';
TextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];
Global_1._registerNode(TextPath);
Factory_1.Factory.addGetterSetter(TextPath, 'data');
Factory_1.Factory.addGetterSetter(TextPath, 'fontFamily', 'Arial');
Factory_1.Factory.addGetterSetter(TextPath, 'fontSize', 12, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(TextPath, 'fontStyle', NORMAL);
Factory_1.Factory.addGetterSetter(TextPath, 'align', 'left');
Factory_1.Factory.addGetterSetter(TextPath, 'letterSpacing', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(TextPath, 'textBaseline', 'middle');
Factory_1.Factory.addGetterSetter(TextPath, 'fontVariant', NORMAL);
Factory_1.Factory.addGetterSetter(TextPath, 'text', EMPTY_STRING);
Factory_1.Factory.addGetterSetter(TextPath, 'textDecoration', null);
Factory_1.Factory.addGetterSetter(TextPath, 'kerningFunc', null);
Util_1.Collection.mapMethods(TextPath);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23,"./Path":53,"./Text":59}],61:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Node_1 = require("../Node");
var Shape_1 = require("../Shape");
var Rect_1 = require("./Rect");
var Group_1 = require("../Group");
var Global_1 = require("../Global");
var Validators_1 = require("../Validators");
var Global_2 = require("../Global");
var EVENTS_NAME = 'tr-konva';
var ATTR_CHANGE_LIST = [
    'resizeEnabledChange',
    'rotateAnchorOffsetChange',
    'rotateEnabledChange',
    'enabledAnchorsChange',
    'anchorSizeChange',
    'borderEnabledChange',
    'borderStrokeChange',
    'borderStrokeWidthChange',
    'borderDashChange',
    'anchorStrokeChange',
    'anchorStrokeWidthChange',
    'anchorFillChange',
    'anchorCornerRadiusChange',
    'ignoreStrokeChange',
]
    .map(function (e) { return e + ("." + EVENTS_NAME); })
    .join(' ');
var NODES_RECT = 'nodesRect';
var TRANSFORM_CHANGE_STR = [
    'widthChange',
    'heightChange',
    'scaleXChange',
    'scaleYChange',
    'skewXChange',
    'skewYChange',
    'rotationChange',
    'offsetXChange',
    'offsetYChange',
    'transformsEnabledChange',
    'strokeWidthChange',
]
    .map(function (e) { return e + ("." + EVENTS_NAME); })
    .join(' ');
var ANGLES = {
    'top-left': -45,
    'top-center': 0,
    'top-right': 45,
    'middle-right': -90,
    'middle-left': 90,
    'bottom-left': -135,
    'bottom-center': 180,
    'bottom-right': 135,
};
var TOUCH_DEVICE = 'ontouchstart' in Global_1.Konva._global;
function getCursor(anchorName, rad) {
    if (anchorName === 'rotater') {
        return 'crosshair';
    }
    rad += Util_1.Util._degToRad(ANGLES[anchorName] || 0);
    var angle = ((Util_1.Util._radToDeg(rad) % 360) + 360) % 360;
    if (Util_1.Util._inRange(angle, 315 + 22.5, 360) || Util_1.Util._inRange(angle, 0, 22.5)) {
        return 'ns-resize';
    }
    else if (Util_1.Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {
        return 'nesw-resize';
    }
    else if (Util_1.Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {
        return 'ew-resize';
    }
    else if (Util_1.Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {
        return 'nwse-resize';
    }
    else if (Util_1.Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {
        return 'ns-resize';
    }
    else if (Util_1.Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {
        return 'nesw-resize';
    }
    else if (Util_1.Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {
        return 'ew-resize';
    }
    else if (Util_1.Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {
        return 'nwse-resize';
    }
    else {
        Util_1.Util.error('Transformer has unknown angle for cursor detection: ' + angle);
        return 'pointer';
    }
}
var ANCHORS_NAMES = [
    'top-left',
    'top-center',
    'top-right',
    'middle-right',
    'middle-left',
    'bottom-left',
    'bottom-center',
    'bottom-right',
];
var MAX_SAFE_INTEGER = 100000000;
function getCenter(shape) {
    return {
        x: shape.x +
            (shape.width / 2) * Math.cos(shape.rotation) +
            (shape.height / 2) * Math.sin(-shape.rotation),
        y: shape.y +
            (shape.height / 2) * Math.cos(shape.rotation) +
            (shape.width / 2) * Math.sin(shape.rotation),
    };
}
function rotateAroundPoint(shape, angleRad, point) {
    var x = point.x +
        (shape.x - point.x) * Math.cos(angleRad) -
        (shape.y - point.y) * Math.sin(angleRad);
    var y = point.y +
        (shape.x - point.x) * Math.sin(angleRad) +
        (shape.y - point.y) * Math.cos(angleRad);
    return __assign(__assign({}, shape), { rotation: shape.rotation + angleRad, x: x,
        y: y });
}
function rotateAroundCenter(shape, deltaRad) {
    var center = getCenter(shape);
    return rotateAroundPoint(shape, deltaRad, center);
}
function getSnap(snaps, newRotationRad, tol) {
    var snapped = newRotationRad;
    for (var i = 0; i < snaps.length; i++) {
        var angle = Global_1.Konva.getAngle(snaps[i]);
        var absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);
        var dif = Math.min(absDiff, Math.PI * 2 - absDiff);
        if (dif < tol) {
            snapped = angle;
        }
    }
    return snapped;
}
var Transformer = (function (_super) {
    __extends(Transformer, _super);
    function Transformer(config) {
        var _this = _super.call(this, config) || this;
        _this._transforming = false;
        _this._createElements();
        _this._handleMouseMove = _this._handleMouseMove.bind(_this);
        _this._handleMouseUp = _this._handleMouseUp.bind(_this);
        _this.update = _this.update.bind(_this);
        _this.on(ATTR_CHANGE_LIST, _this.update);
        if (_this.getNode()) {
            _this.update();
        }
        return _this;
    }
    Transformer.prototype.attachTo = function (node) {
        this.setNode(node);
        return this;
    };
    Transformer.prototype.setNode = function (node) {
        Util_1.Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');
        return this.setNodes([node]);
    };
    Transformer.prototype.getNode = function () {
        return this._nodes && this._nodes[0];
    };
    Transformer.prototype.setNodes = function (nodes) {
        var _this = this;
        if (nodes === void 0) { nodes = []; }
        if (this._nodes && this._nodes.length) {
            this.detach();
        }
        this._nodes = nodes;
        if (nodes.length === 1) {
            this.rotation(nodes[0].rotation());
        }
        else {
            this.rotation(0);
        }
        this._nodes.forEach(function (node) {
            var additionalEvents = node._attrsAffectingSize
                .map(function (prop) { return prop + 'Change.' + EVENTS_NAME; })
                .join(' ');
            var onChange = function () {
                _this._resetTransformCache();
                if (!_this._transforming) {
                    _this.update();
                }
            };
            node.on(additionalEvents, onChange);
            node.on(TRANSFORM_CHANGE_STR, onChange);
            node.on("_clearTransformCache." + EVENTS_NAME, onChange);
            node.on("xChange." + EVENTS_NAME + " yChange." + EVENTS_NAME, onChange);
            _this._proxyDrag(node);
        });
        this._resetTransformCache();
        var elementsCreated = !!this.findOne('.top-left');
        if (elementsCreated) {
            this.update();
        }
        return this;
    };
    Transformer.prototype._proxyDrag = function (node) {
        var _this = this;
        var lastPos;
        node.on("dragstart." + EVENTS_NAME, function () {
            lastPos = node.getAbsolutePosition();
        });
        node.on("dragmove." + EVENTS_NAME, function () {
            if (!lastPos) {
                return;
            }
            var abs = node.getAbsolutePosition();
            var dx = abs.x - lastPos.x;
            var dy = abs.y - lastPos.y;
            _this.nodes().forEach(function (otherNode) {
                if (otherNode === node) {
                    return;
                }
                if (otherNode.isDragging()) {
                    return;
                }
                var otherAbs = otherNode.getAbsolutePosition();
                otherNode.setAbsolutePosition({
                    x: otherAbs.x + dx,
                    y: otherAbs.y + dy,
                });
                otherNode.startDrag();
            });
            lastPos = null;
        });
    };
    Transformer.prototype.getNodes = function () {
        return this._nodes;
    };
    Transformer.prototype.getActiveAnchor = function () {
        return this._movingAnchorName;
    };
    Transformer.prototype.detach = function () {
        if (this._nodes) {
            this._nodes.forEach(function (node) {
                node.off('.' + EVENTS_NAME);
            });
        }
        this._nodes = [];
        this._resetTransformCache();
    };
    Transformer.prototype._resetTransformCache = function () {
        this._clearCache(NODES_RECT);
        this._clearCache('transform');
        this._clearSelfAndDescendantCache('absoluteTransform');
    };
    Transformer.prototype._getNodeRect = function () {
        return this._getCache(NODES_RECT, this.__getNodeRect);
    };
    Transformer.prototype.__getNodeShape = function (node, rot, relative) {
        if (rot === void 0) { rot = this.rotation(); }
        var rect = node.getClientRect({
            skipTransform: true,
            skipShadow: true,
            skipStroke: this.ignoreStroke(),
        });
        var absScale = node.getAbsoluteScale(relative);
        var absPos = node.getAbsolutePosition(relative);
        var dx = rect.x * absScale.x - node.offsetX() * absScale.x;
        var dy = rect.y * absScale.y - node.offsetY() * absScale.y;
        var rotation = (Global_1.Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %
            (Math.PI * 2);
        var box = {
            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),
            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),
            width: rect.width * absScale.x,
            height: rect.height * absScale.y,
            rotation: rotation,
        };
        return rotateAroundPoint(box, -Global_1.Konva.getAngle(rot), {
            x: 0,
            y: 0,
        });
    };
    Transformer.prototype.__getNodeRect = function () {
        var _this = this;
        var node = this.getNode();
        if (!node) {
            return {
                x: -MAX_SAFE_INTEGER,
                y: -MAX_SAFE_INTEGER,
                width: 0,
                height: 0,
                rotation: 0,
            };
        }
        var totalPoints = [];
        this.nodes().map(function (node) {
            var box = node.getClientRect({
                skipTransform: true,
                skipShadow: true,
                skipStroke: _this.ignoreStroke(),
            });
            var points = [
                { x: box.x, y: box.y },
                { x: box.x + box.width, y: box.y },
                { x: box.x + box.width, y: box.y + box.height },
                { x: box.x, y: box.y + box.height },
            ];
            var trans = node.getAbsoluteTransform();
            points.forEach(function (point) {
                var transformed = trans.point(point);
                totalPoints.push(transformed);
            });
        });
        var tr = new Util_1.Transform();
        tr.rotate(-Global_1.Konva.getAngle(this.rotation()));
        var minX, minY, maxX, maxY;
        totalPoints.forEach(function (point) {
            var transformed = tr.point(point);
            if (minX === undefined) {
                minX = maxX = transformed.x;
                minY = maxY = transformed.y;
            }
            minX = Math.min(minX, transformed.x);
            minY = Math.min(minY, transformed.y);
            maxX = Math.max(maxX, transformed.x);
            maxY = Math.max(maxY, transformed.y);
        });
        tr.invert();
        var p = tr.point({ x: minX, y: minY });
        return {
            x: p.x,
            y: p.y,
            width: maxX - minX,
            height: maxY - minY,
            rotation: Global_1.Konva.getAngle(this.rotation()),
        };
    };
    Transformer.prototype.getX = function () {
        return this._getNodeRect().x;
    };
    Transformer.prototype.getY = function () {
        return this._getNodeRect().y;
    };
    Transformer.prototype.getWidth = function () {
        return this._getNodeRect().width;
    };
    Transformer.prototype.getHeight = function () {
        return this._getNodeRect().height;
    };
    Transformer.prototype._createElements = function () {
        this._createBack();
        ANCHORS_NAMES.forEach(function (name) {
            this._createAnchor(name);
        }.bind(this));
        this._createAnchor('rotater');
    };
    Transformer.prototype._createAnchor = function (name) {
        var _this = this;
        var anchor = new Rect_1.Rect({
            stroke: 'rgb(0, 161, 255)',
            fill: 'white',
            strokeWidth: 1,
            name: name + ' _anchor',
            dragDistance: 0,
            draggable: true,
            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',
        });
        var self = this;
        anchor.on('mousedown touchstart', function (e) {
            self._handleMouseDown(e);
        });
        anchor.on('dragstart', function (e) {
            anchor.stopDrag();
            e.cancelBubble = true;
        });
        anchor.on('dragend', function (e) {
            e.cancelBubble = true;
        });
        anchor.on('mouseenter', function () {
            var rad = Global_1.Konva.getAngle(_this.rotation());
            var cursor = getCursor(name, rad);
            anchor.getStage().content.style.cursor = cursor;
            _this._cursorChange = true;
        });
        anchor.on('mouseout', function () {
            anchor.getStage().content.style.cursor = '';
            _this._cursorChange = false;
        });
        this.add(anchor);
    };
    Transformer.prototype._createBack = function () {
        var _this = this;
        var back = new Shape_1.Shape({
            name: 'back',
            width: 0,
            height: 0,
            draggable: true,
            sceneFunc: function (ctx) {
                var tr = this.getParent();
                var padding = tr.padding();
                ctx.beginPath();
                ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);
                ctx.moveTo(this.width() / 2, -padding);
                if (tr.rotateEnabled()) {
                    ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util_1.Util._sign(this.height()) - padding);
                }
                ctx.fillStrokeShape(this);
            },
            hitFunc: function (ctx, shape) {
                if (!_this.shouldOverdrawWholeArea()) {
                    return;
                }
                var padding = _this.padding();
                ctx.beginPath();
                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);
                ctx.fillStrokeShape(shape);
            },
        });
        this.add(back);
        this._proxyDrag(back);
    };
    Transformer.prototype._handleMouseDown = function (e) {
        this._movingAnchorName = e.target.name().split(' ')[0];
        var attrs = this._getNodeRect();
        var width = attrs.width;
        var height = attrs.height;
        var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
        this.sin = Math.abs(height / hypotenuse);
        this.cos = Math.abs(width / hypotenuse);
        window.addEventListener('mousemove', this._handleMouseMove);
        window.addEventListener('touchmove', this._handleMouseMove);
        window.addEventListener('mouseup', this._handleMouseUp, true);
        window.addEventListener('touchend', this._handleMouseUp, true);
        this._transforming = true;
        var ap = e.target.getAbsolutePosition();
        var pos = e.target.getStage().getPointerPosition();
        this._anchorDragOffset = {
            x: pos.x - ap.x,
            y: pos.y - ap.y,
        };
        this._fire('transformstart', { evt: e, target: this.getNode() });
        this.getNode()._fire('transformstart', { evt: e, target: this.getNode() });
    };
    Transformer.prototype._handleMouseMove = function (e) {
        var x, y, newHypotenuse;
        var anchorNode = this.findOne('.' + this._movingAnchorName);
        var stage = anchorNode.getStage();
        stage.setPointersPositions(e);
        var pp = stage.getPointerPosition();
        var newNodePos = {
            x: pp.x - this._anchorDragOffset.x,
            y: pp.y - this._anchorDragOffset.y,
        };
        var oldAbs = anchorNode.getAbsolutePosition();
        anchorNode.setAbsolutePosition(newNodePos);
        var newAbs = anchorNode.getAbsolutePosition();
        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {
            return;
        }
        if (this._movingAnchorName === 'rotater') {
            var attrs = this._getNodeRect();
            x = anchorNode.x() - attrs.width / 2;
            y = -anchorNode.y() + attrs.height / 2;
            var delta = Math.atan2(-y, x) + Math.PI / 2;
            if (attrs.height < 0) {
                delta -= Math.PI;
            }
            var oldRotation = Global_1.Konva.getAngle(this.rotation());
            var newRotation = oldRotation + delta;
            var tol = Global_1.Konva.getAngle(this.rotationSnapTolerance());
            var snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);
            var diff = snappedRot - attrs.rotation;
            var shape = rotateAroundCenter(attrs, diff);
            this._fitNodesInto(shape, e);
            return;
        }
        var keepProportion = this.keepRatio() || e.shiftKey;
        var centeredScaling = this.centeredScaling() || e.altKey;
        if (this._movingAnchorName === 'top-left') {
            if (keepProportion) {
                var comparePoint = centeredScaling
                    ? {
                        x: this.width() / 2,
                        y: this.height() / 2,
                    }
                    : {
                        x: this.findOne('.bottom-right').x(),
                        y: this.findOne('.bottom-right').y(),
                    };
                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +
                    Math.pow(comparePoint.y - anchorNode.y(), 2));
                var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;
                var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;
                x = newHypotenuse * this.cos * reverseX;
                y = newHypotenuse * this.sin * reverseY;
                this.findOne('.top-left').x(comparePoint.x - x);
                this.findOne('.top-left').y(comparePoint.y - y);
            }
        }
        else if (this._movingAnchorName === 'top-center') {
            this.findOne('.top-left').y(anchorNode.y());
        }
        else if (this._movingAnchorName === 'top-right') {
            if (keepProportion) {
                var comparePoint = centeredScaling
                    ? {
                        x: this.width() / 2,
                        y: this.height() / 2,
                    }
                    : {
                        x: this.findOne('.bottom-left').x(),
                        y: this.findOne('.bottom-left').y(),
                    };
                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +
                    Math.pow(comparePoint.y - anchorNode.y(), 2));
                var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;
                var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;
                x = newHypotenuse * this.cos * reverseX;
                y = newHypotenuse * this.sin * reverseY;
                this.findOne('.top-right').x(comparePoint.x + x);
                this.findOne('.top-right').y(comparePoint.y - y);
            }
            var pos = anchorNode.position();
            this.findOne('.top-left').y(pos.y);
            this.findOne('.bottom-right').x(pos.x);
        }
        else if (this._movingAnchorName === 'middle-left') {
            this.findOne('.top-left').x(anchorNode.x());
        }
        else if (this._movingAnchorName === 'middle-right') {
            this.findOne('.bottom-right').x(anchorNode.x());
        }
        else if (this._movingAnchorName === 'bottom-left') {
            if (keepProportion) {
                var comparePoint = centeredScaling
                    ? {
                        x: this.width() / 2,
                        y: this.height() / 2,
                    }
                    : {
                        x: this.findOne('.top-right').x(),
                        y: this.findOne('.top-right').y(),
                    };
                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +
                    Math.pow(anchorNode.y() - comparePoint.y, 2));
                var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;
                var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;
                x = newHypotenuse * this.cos * reverseX;
                y = newHypotenuse * this.sin * reverseY;
                anchorNode.x(comparePoint.x - x);
                anchorNode.y(comparePoint.y + y);
            }
            pos = anchorNode.position();
            this.findOne('.top-left').x(pos.x);
            this.findOne('.bottom-right').y(pos.y);
        }
        else if (this._movingAnchorName === 'bottom-center') {
            this.findOne('.bottom-right').y(anchorNode.y());
        }
        else if (this._movingAnchorName === 'bottom-right') {
            if (keepProportion) {
                var comparePoint = centeredScaling
                    ? {
                        x: this.width() / 2,
                        y: this.height() / 2,
                    }
                    : {
                        x: this.findOne('.top-left').x(),
                        y: this.findOne('.top-left').y(),
                    };
                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +
                    Math.pow(anchorNode.y() - comparePoint.y, 2));
                var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;
                var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;
                x = newHypotenuse * this.cos * reverseX;
                y = newHypotenuse * this.sin * reverseY;
                this.findOne('.bottom-right').x(comparePoint.x + x);
                this.findOne('.bottom-right').y(comparePoint.y + y);
            }
        }
        else {
            console.error(new Error('Wrong position argument of selection resizer: ' +
                this._movingAnchorName));
        }
        var centeredScaling = this.centeredScaling() || e.altKey;
        if (centeredScaling) {
            var topLeft = this.findOne('.top-left');
            var bottomRight = this.findOne('.bottom-right');
            var topOffsetX = topLeft.x();
            var topOffsetY = topLeft.y();
            var bottomOffsetX = this.getWidth() - bottomRight.x();
            var bottomOffsetY = this.getHeight() - bottomRight.y();
            bottomRight.move({
                x: -topOffsetX,
                y: -topOffsetY,
            });
            topLeft.move({
                x: bottomOffsetX,
                y: bottomOffsetY,
            });
        }
        var absPos = this.findOne('.top-left').getAbsolutePosition();
        x = absPos.x;
        y = absPos.y;
        var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();
        var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();
        this._fitNodesInto({
            x: x,
            y: y,
            width: width,
            height: height,
            rotation: Global_1.Konva.getAngle(this.rotation()),
        }, e);
    };
    Transformer.prototype._handleMouseUp = function (e) {
        this._removeEvents(e);
    };
    Transformer.prototype.getAbsoluteTransform = function () {
        return this.getTransform();
    };
    Transformer.prototype._removeEvents = function (e) {
        if (this._transforming) {
            this._transforming = false;
            window.removeEventListener('mousemove', this._handleMouseMove);
            window.removeEventListener('touchmove', this._handleMouseMove);
            window.removeEventListener('mouseup', this._handleMouseUp, true);
            window.removeEventListener('touchend', this._handleMouseUp, true);
            var node = this.getNode();
            this._fire('transformend', { evt: e, target: node });
            if (node) {
                node.fire('transformend', { evt: e, target: node });
            }
            this._movingAnchorName = null;
        }
    };
    Transformer.prototype._fitNodesInto = function (newAttrs, evt) {
        var _this = this;
        var oldAttrs = this._getNodeRect();
        var minSize = 1;
        if (Util_1.Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {
            this.update();
            return;
        }
        if (Util_1.Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {
            this.update();
            return;
        }
        var allowNegativeScale = true;
        var t = new Util_1.Transform();
        t.rotate(Global_1.Konva.getAngle(this.rotation()));
        if (this._movingAnchorName &&
            newAttrs.width < 0 &&
            this._movingAnchorName.indexOf('left') >= 0) {
            var offset = t.point({
                x: -this.padding() * 2,
                y: 0,
            });
            newAttrs.x += offset.x;
            newAttrs.y += offset.y;
            newAttrs.width += this.padding() * 2;
            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');
            this._anchorDragOffset.x -= offset.x;
            this._anchorDragOffset.y -= offset.y;
            if (!allowNegativeScale) {
                this.update();
                return;
            }
        }
        else if (this._movingAnchorName &&
            newAttrs.width < 0 &&
            this._movingAnchorName.indexOf('right') >= 0) {
            var offset = t.point({
                x: this.padding() * 2,
                y: 0,
            });
            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');
            this._anchorDragOffset.x -= offset.x;
            this._anchorDragOffset.y -= offset.y;
            newAttrs.width += this.padding() * 2;
            if (!allowNegativeScale) {
                this.update();
                return;
            }
        }
        if (this._movingAnchorName &&
            newAttrs.height < 0 &&
            this._movingAnchorName.indexOf('top') >= 0) {
            var offset = t.point({
                x: 0,
                y: -this.padding() * 2,
            });
            newAttrs.x += offset.x;
            newAttrs.y += offset.y;
            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');
            this._anchorDragOffset.x -= offset.x;
            this._anchorDragOffset.y -= offset.y;
            newAttrs.height += this.padding() * 2;
            if (!allowNegativeScale) {
                this.update();
                return;
            }
        }
        else if (this._movingAnchorName &&
            newAttrs.height < 0 &&
            this._movingAnchorName.indexOf('bottom') >= 0) {
            var offset = t.point({
                x: 0,
                y: this.padding() * 2,
            });
            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');
            this._anchorDragOffset.x -= offset.x;
            this._anchorDragOffset.y -= offset.y;
            newAttrs.height += this.padding() * 2;
            if (!allowNegativeScale) {
                this.update();
                return;
            }
        }
        if (this.boundBoxFunc()) {
            var bounded = this.boundBoxFunc()(oldAttrs, newAttrs);
            if (bounded) {
                newAttrs = bounded;
            }
            else {
                Util_1.Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');
            }
        }
        var baseSize = 10000000;
        var oldTr = new Util_1.Transform();
        oldTr.translate(oldAttrs.x, oldAttrs.y);
        oldTr.rotate(oldAttrs.rotation);
        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);
        var newTr = new Util_1.Transform();
        newTr.translate(newAttrs.x, newAttrs.y);
        newTr.rotate(newAttrs.rotation);
        newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);
        var delta = newTr.multiply(oldTr.invert());
        this._nodes.forEach(function (node) {
            var parentTransform = node.getParent().getAbsoluteTransform();
            var localTransform = node.getTransform().copy();
            localTransform.translate(node.offsetX(), node.offsetY());
            var newLocalTransform = new Util_1.Transform();
            newLocalTransform
                .multiply(parentTransform.copy().invert())
                .multiply(delta)
                .multiply(parentTransform)
                .multiply(localTransform);
            var attrs = newLocalTransform.decompose();
            node._batchTransformChanges(function () {
                node.setAttrs(attrs);
            });
            _this._fire('transform', { evt: evt, target: node });
            node._fire('transform', { evt: evt, target: node });
        });
        this.rotation(Util_1.Util._getRotation(newAttrs.rotation));
        this._resetTransformCache();
        this.update();
        this.getLayer().batchDraw();
    };
    Transformer.prototype.forceUpdate = function () {
        this._resetTransformCache();
        this.update();
    };
    Transformer.prototype._batchChangeChild = function (selector, attrs) {
        var anchor = this.findOne(selector);
        anchor._batchTransformChanges(function () {
            anchor.setAttrs(attrs);
        });
    };
    Transformer.prototype.update = function () {
        var _this = this;
        var attrs = this._getNodeRect();
        this.rotation(Util_1.Util._getRotation(attrs.rotation));
        var width = attrs.width;
        var height = attrs.height;
        var enabledAnchors = this.enabledAnchors();
        var resizeEnabled = this.resizeEnabled();
        var padding = this.padding();
        var anchorSize = this.anchorSize();
        this.find('._anchor').each(function (node) {
            node._batchTransformChanges(function () {
                node.setAttrs({
                    width: anchorSize,
                    height: anchorSize,
                    offsetX: anchorSize / 2,
                    offsetY: anchorSize / 2,
                    stroke: _this.anchorStroke(),
                    strokeWidth: _this.anchorStrokeWidth(),
                    fill: _this.anchorFill(),
                    cornerRadius: _this.anchorCornerRadius(),
                });
            });
        });
        this._batchChangeChild('.top-left', {
            x: 0,
            y: 0,
            offsetX: anchorSize / 2 + padding,
            offsetY: anchorSize / 2 + padding,
            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,
        });
        this._batchChangeChild('.top-center', {
            x: width / 2,
            y: 0,
            offsetY: anchorSize / 2 + padding,
            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,
        });
        this._batchChangeChild('.top-right', {
            x: width,
            y: 0,
            offsetX: anchorSize / 2 - padding,
            offsetY: anchorSize / 2 + padding,
            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,
        });
        this._batchChangeChild('.middle-left', {
            x: 0,
            y: height / 2,
            offsetX: anchorSize / 2 + padding,
            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,
        });
        this._batchChangeChild('.middle-right', {
            x: width,
            y: height / 2,
            offsetX: anchorSize / 2 - padding,
            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,
        });
        this._batchChangeChild('.bottom-left', {
            x: 0,
            y: height,
            offsetX: anchorSize / 2 + padding,
            offsetY: anchorSize / 2 - padding,
            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,
        });
        this._batchChangeChild('.bottom-center', {
            x: width / 2,
            y: height,
            offsetY: anchorSize / 2 - padding,
            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,
        });
        this._batchChangeChild('.bottom-right', {
            x: width,
            y: height,
            offsetX: anchorSize / 2 - padding,
            offsetY: anchorSize / 2 - padding,
            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,
        });
        this._batchChangeChild('.rotater', {
            x: width / 2,
            y: -this.rotateAnchorOffset() * Util_1.Util._sign(height) - padding,
            visible: this.rotateEnabled(),
        });
        this._batchChangeChild('.back', {
            width: width,
            height: height,
            visible: this.borderEnabled(),
            stroke: this.borderStroke(),
            strokeWidth: this.borderStrokeWidth(),
            dash: this.borderDash(),
            x: 0,
            y: 0,
        });
    };
    Transformer.prototype.isTransforming = function () {
        return this._transforming;
    };
    Transformer.prototype.stopTransform = function () {
        if (this._transforming) {
            this._removeEvents();
            var anchorNode = this.findOne('.' + this._movingAnchorName);
            if (anchorNode) {
                anchorNode.stopDrag();
            }
        }
    };
    Transformer.prototype.destroy = function () {
        if (this.getStage() && this._cursorChange) {
            this.getStage().content.style.cursor = '';
        }
        Group_1.Group.prototype.destroy.call(this);
        this.detach();
        this._removeEvents();
        return this;
    };
    Transformer.prototype.toObject = function () {
        return Node_1.Node.prototype.toObject.call(this);
    };
    return Transformer;
}(Group_1.Group));
exports.Transformer = Transformer;
function validateAnchors(val) {
    if (!(val instanceof Array)) {
        Util_1.Util.warn('enabledAnchors value should be an array');
    }
    if (val instanceof Array) {
        val.forEach(function (name) {
            if (ANCHORS_NAMES.indexOf(name) === -1) {
                Util_1.Util.warn('Unknown anchor name: ' +
                    name +
                    '. Available names are: ' +
                    ANCHORS_NAMES.join(', '));
            }
        });
    }
    return val || [];
}
Transformer.prototype.className = 'Transformer';
Global_2._registerNode(Transformer);
Factory_1.Factory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);
Factory_1.Factory.addGetterSetter(Transformer, 'resizeEnabled', true);
Factory_1.Factory.addGetterSetter(Transformer, 'anchorSize', 10, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Transformer, 'rotateEnabled', true);
Factory_1.Factory.addGetterSetter(Transformer, 'rotationSnaps', []);
Factory_1.Factory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Transformer, 'borderEnabled', true);
Factory_1.Factory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');
Factory_1.Factory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Transformer, 'anchorFill', 'white');
Factory_1.Factory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');
Factory_1.Factory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Transformer, 'borderDash');
Factory_1.Factory.addGetterSetter(Transformer, 'keepRatio', true);
Factory_1.Factory.addGetterSetter(Transformer, 'centeredScaling', false);
Factory_1.Factory.addGetterSetter(Transformer, 'ignoreStroke', false);
Factory_1.Factory.addGetterSetter(Transformer, 'padding', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Transformer, 'node');
Factory_1.Factory.addGetterSetter(Transformer, 'nodes');
Factory_1.Factory.addGetterSetter(Transformer, 'boundBoxFunc');
Factory_1.Factory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);
Factory_1.Factory.backCompat(Transformer, {
    lineEnabled: 'borderEnabled',
    rotateHandlerOffset: 'rotateAnchorOffset',
    enabledHandlers: 'enabledAnchors',
});
Util_1.Collection.mapMethods(Transformer);

},{"../Factory":12,"../Global":14,"../Group":15,"../Node":17,"../Shape":19,"../Util":22,"../Validators":23,"./Rect":54}],62:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../Util");
var Factory_1 = require("../Factory");
var Shape_1 = require("../Shape");
var Global_1 = require("../Global");
var Validators_1 = require("../Validators");
var Global_2 = require("../Global");
var Wedge = (function (_super) {
    __extends(Wedge, _super);
    function Wedge() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Wedge.prototype._sceneFunc = function (context) {
        context.beginPath();
        context.arc(0, 0, this.radius(), 0, Global_1.Konva.getAngle(this.angle()), this.clockwise());
        context.lineTo(0, 0);
        context.closePath();
        context.fillStrokeShape(this);
    };
    Wedge.prototype.getWidth = function () {
        return this.radius() * 2;
    };
    Wedge.prototype.getHeight = function () {
        return this.radius() * 2;
    };
    Wedge.prototype.setWidth = function (width) {
        this.radius(width / 2);
    };
    Wedge.prototype.setHeight = function (height) {
        this.radius(height / 2);
    };
    return Wedge;
}(Shape_1.Shape));
exports.Wedge = Wedge;
Wedge.prototype.className = 'Wedge';
Wedge.prototype._centroid = true;
Wedge.prototype._attrsAffectingSize = ['radius'];
Global_2._registerNode(Wedge);
Factory_1.Factory.addGetterSetter(Wedge, 'radius', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Wedge, 'angle', 0, Validators_1.getNumberValidator());
Factory_1.Factory.addGetterSetter(Wedge, 'clockwise', false);
Factory_1.Factory.backCompat(Wedge, {
    angleDeg: 'angle',
    getAngleDeg: 'getAngle',
    setAngleDeg: 'setAngle'
});
Util_1.Collection.mapMethods(Wedge);

},{"../Factory":12,"../Global":14,"../Shape":19,"../Util":22,"../Validators":23}],63:[function(require,module,exports){
var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{}],64:[function(require,module,exports){
/**
 * creates horizontally placed cards carousel
 * @param {Array} cardsData json array
 */
function createCardsCarousel(cardsData) {
    let cards = "";
    cardsData.map((card_item) => {
        const item = `<div class="carousel_cards in-left">
    <img class="cardBackgroundImage" src=${card_item.image}>
    <div class="cardFooter"> <span class="cardTitle" title="abc">${card_item.title}</span>
    <div class="cardDescription"></div></div></div>`;
        cards += item;
    });
    const cardContents = `<div id="paginated_cards" class="cards"> <div class="cards_scroller">${cards} <span class="arrow prev fa fa-chevron-circle-left "></span> <span class="arrow next fa fa-chevron-circle-right" ></span> </div> </div>`;
    return cardContents;
}

/**
 * appends cards carousel on to the chat screen
 * @param {Array} cardsToAdd json array
 */
function showCardsCarousel(cardsToAdd) {
    const cards = createCardsCarousel(cardsToAdd);

    $(cards).appendTo(".chats").show();

    if (cardsToAdd.length <= 2) {
        $(`.cards_scroller>div.carousel_cards:nth-of-type(2)`).fadeIn(3000);
    } else {
        for (let i = 0; i < cardsToAdd.length; i += 1) {
            $(`.cards_scroller>div.carousel_cards:nth-of-type(${i})`).fadeIn(3000);
        }
        $(".cards .arrow.prev").fadeIn("3000");
        $(".cards .arrow.next").fadeIn("3000");
    }

    const card = document.querySelector("#paginated_cards");
    const card_scroller = card.querySelector(".cards_scroller");
    const card_item_size = 225;

    /**
     * For paginated scrolling, simply scroll the card one item in the given
     * direction and let css scroll snaping handle the specific alignment.
     */
    function scrollToNextPage() {
        card_scroller.scrollBy(card_item_size, 0);
    }

    function scrollToPrevPage() {
        card_scroller.scrollBy(-card_item_size, 0);
    }

    card.querySelector(".arrow.next").addEventListener("click", scrollToNextPage);
    card.querySelector(".arrow.prev").addEventListener("click", scrollToPrevPage);
    $(".usrInput").focus();
}

module.exports['showCardsCarousel'] = showCardsCarousel;
},{}],65:[function(require,module,exports){
/**
 *  creates a div that will render the
 *  charts in canvas as required by charts.js
 * for more info. refer: https://www.chartjs.org/docs/latest/getting-started/usage.html
 * @param {String} title chart title
 * @param {Array} labels chart label
 * @param {Array} backgroundColor chart's background color
 * @param {Object} chartsData chart's data
 * @param {String} chartType chart type
 * @param {String} displayLegend chart's legend
 */
function createChart(
    title,
    labels,
    backgroundColor,
    chartsData,
    chartType,
    displayLegend,
) {
    const html = '<div class="chart-container"> <span class="modal-trigger" id="expand" title="expand" href="#modal1"><i class="fa fa-external-link" aria-hidden="true"></i></span> <canvas id="chat-chart" ></canvas> </div> <div class="clearfix"></div>';
    $(html).appendTo(".chats");

    // create the context that will draw the charts over the canvas in the ".chart-container" div
    const ctx = $("#chat-chart");

    // Once you have the element or context, instantiate the chart-type by passing the configuration,
    // for more info. refer: https://www.chartjs.org/docs/latest/configuration/
    const data = {
        labels,
        datasets: [
            {
                label: title,
                backgroundColor,
                data: chartsData,
                fill: false,
            },
        ],
    };
    const options = {
        title: {
            display: true,
            text: title,
        },
        layout: {
            padding: {
                left: 5,
                right: 0,
                top: 0,
                bottom: 0,
            },
        },
        legend: {
            display: displayLegend,
            position: "right",
            labels: {
                boxWidth: 5,
                fontSize: 10,
            },
        },
    };

    // draw the chart by passing the configuration
    // eslint-disable-next-line no-undef
    chatChart = new Chart(ctx, {
        type: chartType,
        data,
        options,
    });
}
// function to render the charts in the modal

/**
 *  creates a modal that will render the
 *  charts in canvas as required by charts.js
 * for more info. refer: https://www.chartjs.org/docs/latest/getting-started/usage.html
 *
 * if you want to display the charts in modal,
 *  make sure you have configured the modal in `index.html`
 * @param {String} title chart title
 * @param {Array} labels chart label
 * @param {Array} backgroundColor chart's background color
 * @param {Object} chartsData chart's data
 * @param {String} chartType chart type
 * @param {String} displayLegend chart's legend
 */
function createChartinModal(
    title,
    labels,
    backgroundColor,
    chartsData,
    chartType,
    displayLegend,
) {
    // create the context that will draw the charts
    // over the canvas in the `#modal-chart` div of the modal
    const ctx = $("#modal-chart");

    // Once you have the element or context, instantiate the chart-type by passing the configuration,
    // for more info. refer: https://www.chartjs.org/docs/latest/configuration/
    const data = {
        labels,
        datasets: [
            {
                label: title,
                backgroundColor,
                data: chartsData,
                fill: false,
            },
        ],
    };
    const options = {
        title: {
            display: true,
            text: title,
        },
        layout: {
            padding: {
                left: 5,
                right: 0,
                top: 0,
                bottom: 0,
            },
        },
        legend: {
            display: displayLegend,
            position: "right",
        },
    };

    // eslint-disable-next-line no-undef
    modalChart = new Chart(ctx, {
        type: chartType,
        data,
        options,
    });
}

module.exports['createChart'] = createChart;
module.exports['createChartinModal'] = createChartinModal;
},{}],66:[function(require,module,exports){
const { constants } = require('../constants')

const {
  action_name,
  rasa_server_url,
  sender_id
} = constants

const { vars } = require('../../sergui/vars');

var {
    CHAT_MSG_DELAY_MAX,
    CHAT_MSG_DELAY_MIN,
    gfb_top_k_gui_indexes,
    top_k_annotation_gui_indexes,
    top_k_annotation_feature_indexes,
} = vars;


const {
  showCardsCarousel,
} = require('./cardsCarousel');

const {
  createChart,
  createChartinModal,
} = require('./charts');

const {
  createCollapsible,
} = require('./collapsible');

const {
  renderDropDwon,
} = require('./dropDown');

const {
  renderGUIRankingData,
  renderExampleGUI,
  renderExampleGUIWithFeature,
  renderGUIReqSummaryModal,
  renderFeatureRanking,
  renderGUIRankingDataForAnnotation,
  renderGUIRankingDataForTopKFinalAnnotation,
  renderTopKFeatureRanking,
  renderGUIRankingDataReselect,
} = require('./guiRankingData');

const {
  renderPdfAttachment,
} = require('./pdfAttachment');

const {
  showQuickReplies,
} = require('./quickReplies');

const {
  addSuggestion,
} = require('./suggestionButtons');

/**
 * scroll to the bottom of the chats after new message has been added to chat
 */
const converter = new showdown.Converter();
function scrollToBottomOfResults() {
  const terminalResultsDiv = document.getElementById("chats");
  terminalResultsDiv.scrollTop = terminalResultsDiv.scrollHeight;
}

/**
 * removes the bot typing indicator from the chat screen
 */
function hideBotTyping() {
    console.log('hide typing');
    $("#botAvatar").remove();
    $(".botTyping").remove();
    // After the processing of the request, enable the input field
    $("#userInput").prop('disabled', false);
    enableGUISelectionButtons();
    enableFeatureGUISelectionButtons();
    enableGUISelectionButtons();
}

/**
 * adds the bot typing indicator from the chat screen
 */
function showBotTyping() {
    console.log('show typing');
    const botTyping = '<img class="botAvatar" id="botAvatar" src="/static/lib/img/robot_avatar.png"/><div class="botTyping"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div></div>';
    $(botTyping).appendTo(".chats");
    $(".botTyping").show();
    scrollToBottomOfResults();
    // During the processing of the request, disable the input field
    $("#userInput").prop('disabled', true);
    disableGUISelectionButtons();
    disableFeatureGUISelectionButtons();
    disableGUIReSelectionButtons();
}

/**
 * Set user response on the chat screen
 * @param {String} message user message
 */
function setUserResponse(message) {
  const user_response = `<img class="userAvatar" src='/static/lib/img/userAvatar.jpg'><p class="userMsg">${message} </p><div class="clearfix"></div>`;
  $(user_response).appendTo(".chats").show("slow");

  $(".usrInput").val("");
  scrollToBottomOfResults();
  showBotTyping();
  $(".suggestions").remove();
}

/**
 * returns formatted bot response
 * @param {String} text bot message response's text
 *
 */
function getBotResponse(text) {
  botResponse = `<img class="botAvatar" src="/static/lib/img/robot_avatar.png"/><span class="botMsg">${text}</span><div class="clearfix"></div>`;
  return botResponse;
}

function checkResponseForAction(response) {
  ACTION_FEATURE = "Please briefly name the required feature."
  ACTION_NLR = "Please describe briefly the requirements for your next GUI."
for (var i = 0; i < response.length; i++) {
  if (response[i].hasOwnProperty("text")) {
    if (response[i].text == ACTION_FEATURE || response[i].text == ACTION_NLR) {
        return true;
    }
  }
}
return false;
}

/**
 * renders bot response on to the chat screen
 * @param {Array} response json array containing different types of bot response
 *
 * for more info: `https://rasa.com/docs/rasa/connectors/your-own-website#request-and-response-format`
 */
function setBotResponse(response) {
  hideBotTyping();
  if (response.length < 1) {
    // if there is no response from Rasa, send  fallback message to the user
    const fallbackMsg = "I am facing some issues, please try again later!!!";

    const BotResponse = `<img class="botAvatar" src="/static/lib/img/robot_avatar.png"/><p class="botMsg">${fallbackMsg}</p><div class="clearfix"></div>`;

    $(BotResponse).appendTo(".chats").hide().fadeIn(1000);
    scrollToBottomOfResults();
  } else {
    containsQuickReplies = false;
    addedDelay = 0;
    // if we get response from Rasa
    for (let i = 0; i < response.length; i += 1) {
        //check if the response contains "text"
        if (i != 0 && response[i].hasOwnProperty("text")) { 
            delay = computeTextDelay(response[i].text);
            addedDelay += delay;
            console.log("index " + i + "delay " + delay + " addeddelay " + addedDelay)
        }
        if (Object.hasOwnProperty.call(response[i], "custom")) {
                const { payload } = response[i].custom;
                if (payload === "quickReplies") {
                  containsQuickReplies = true;
                }
            }
        renderBotResponse(response, i, addedDelay);
    }
  }
  setTimeout(function(){
      hideBotTyping();
      console.log('checking input');
      console.log(containsQuickReplies);
        //Check if the response is a specfic action, then we need to disable buttons
      if (checkResponseForAction(response)) {
        console.log('One of the two actions: disabling buttons');
        disableGUISelectionButtons();
        disableFeatureGUISelectionButtons();
      }
      if (containsQuickReplies) {
          $("#userInput").prop('disabled', true);
          console.log('disabled input');
      } else {
          $("#userInput").prop('disabled', false);
          $("#userInput").focus();
    }
  }, addedDelay)

}

function computeTextDelay(text) {
    let delay = text.length * 30;
      if (delay > CHAT_MSG_DELAY_MAX) delay = CHAT_MSG_DELAY_MAX;
      if (delay < CHAT_MSG_DELAY_MIN) delay = CHAT_MSG_DELAY_MIN;
      return delay;
}

  function enableGUISelectionButtons() {
    var buttons = document.querySelectorAll('button[id^="btn-gui-add"]');
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].disabled = false;
    }
  }

    function enableGUIReSelectionButtons() {
    var buttons = document.querySelectorAll('button[id^="btn-gui-reselect"]');
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].disabled = false;
    }
  }

  function disableGUISelectionButtons() {
    var buttons = document.querySelectorAll('button[id^="btn-gui-add"]');
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].disabled = true;
    }
  }


  function disableGUIReSelectionButtons() {
    var buttons = document.querySelectorAll('button[id^="btn-gui-reselect"]');
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].disabled = true;
    }
  }

    function enableFeatureGUISelectionButtons() {
    var buttons = document.querySelectorAll('button[id^="btn-select-feature"]');
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].disabled = false;
    }
  }

    function disableFeatureGUISelectionButtons() {
    var buttons = document.querySelectorAll('button[id^="btn-select-feature"]');
    for (var i = 0; i < buttons.length; i++) {
        buttons[i].disabled = true;
    }
  }

function renderBotResponse(response, i, addedDelay) {
  setTimeout(function() {
        hideBotTyping();
        // check if the response contains "text"
        if (Object.hasOwnProperty.call(response[i], "text")) {
          if (response[i].text != null) {
            // convert the text to mardown format using showdown.js(https://github.com/showdownjs/showdown);
            let botResponse;
            let html = converter.makeHtml(response[i].text);
            html = html
              .replaceAll("<p>", "")
              .replaceAll("</p>", "")
              .replaceAll("<strong>", "<b>")
              .replaceAll("</strong>", "</b>");
            html = html.replace(/(?:\r\n|\r|\n)/g, "<br>");
            console.log(html);
            // check for blockquotes
            if (html.includes("<blockquote>")) {
              html = html.replaceAll("<br>", "");
              botResponse = getBotResponse(html);
            }
            // check for image
            if (html.includes("<img")) {
              html = html.replaceAll("<img", '<img class="imgcard_mrkdwn" ');
              botResponse = getBotResponse(html);
            }
            // check for preformatted text
            if (html.includes("<pre") || html.includes("<code>")) {
              botResponse = getBotResponse(html);
            }
            // check for list text
            if (
              html.includes("<ul") ||
              html.includes("<ol") ||
              html.includes("<li") ||
              html.includes("<h3")
            ) {
              html = html.replaceAll("<br>", "");
              // botResponse = `<img class="botAvatar" src="./static/img/sara_avatar.png"/><span class="botMsg">${html}</span><div class="clearfix"></div>`;
              botResponse = getBotResponse(html);
            } else {
              // if no markdown formatting found, render the text as it is.
              if (!botResponse) {
                botResponse = `<img class="botAvatar" src="/static/lib/img/robot_avatar.png"/><p class="botMsg">${response[i].text}</p><div class="clearfix"></div>`;
              }
            }
            // append the bot response on to the chat screen
            $(botResponse).appendTo(".chats").hide().fadeIn(1000);
          }
        }

        // check if the response contains "images"
        if (Object.hasOwnProperty.call(response[i], "image")) {
          if (response[i].image !== null) {
            const BotResponse = `<div class="singleCard"><img class="imgcard" src="${response[i].image}"></div><div class="clearfix">`;

            $(BotResponse).appendTo(".chats").hide().fadeIn(1000);
          }
        }

        // check if the response contains "buttons"
        if (Object.hasOwnProperty.call(response[i], "buttons")) {
          if (response[i].buttons.length > 0) {
            addSuggestion(response[i].buttons);
          }
          scrollToBottomOfResults();
        }

        // check if the response contains "attachment"
        if (Object.hasOwnProperty.call(response[i], "attachment")) {
          if (response[i].attachment != null) {
            if (response[i].attachment.type === "video") {
              // check if the attachment type is "video"
              const video_url = response[i].attachment.payload.src;

              const BotResponse = `<div class="video-container"> <iframe src="${video_url}" frameborder="0" allowfullscreen></iframe> </div>`;
              $(BotResponse).appendTo(".chats").hide().fadeIn(1000);
            }
          }
        }
        // check if the response contains "custom" message
        if (Object.hasOwnProperty.call(response[i], "custom")) {
          const { payload } = response[i].custom;
          if (payload == "gui-ranking") {
             // Check if the custom payload type is "gui-ranking"
             $("#workbench-header").text("GUI Ranking");
             $('#container-workbench').css("background-color", '#e6fff2');
             guiRankingData = response[i].custom.data;
             renderGUIRankingData(guiRankingData);
             scrollToBottomOfResults();
          }
           if (payload == "gui-ranking-reselect") {
             // Check if the custom payload type is "gui-ranking"
             $("#workbench-header").text("GUI Ranking");
             $('#container-workbench').css("background-color", '#e6fff2');
             guiRankingData = response[i].custom.data;
             renderGUIRankingDataReselect(guiRankingData);
             scrollToBottomOfResults();
          }
          if (payload == "gfb") {
             // Check if the custom payload type is "gfb"
             $("#workbench-header").text("GUI Feedback");
             gui_index = response[i].custom.data;
             renderExampleGUI(gui_index);
             scrollToBottomOfResults();
          }
          if (payload == "gfb-top-k") {
             // Check if the custom payload type is "gfb"
             $("#workbench-header").text("GUI Feedback");
             gui_ranking = response[i].custom.data;
             renderGUIRankingDataForAnnotation(gui_ranking);
             scrollToBottomOfResults();
          }
          if (payload == "top-k-rankings-for-annotation") {
             // Check if the custom payload type is "gfb"
             $("#workbench-header").text("GUI Annotation");
             gui_ranking = response[i].custom.data;
             renderGUIRankingDataForTopKFinalAnnotation(gui_ranking);
             scrollToBottomOfResults();
          }
          if (payload == "dfb") {
             // Check if the custom payload type is "dfb"
             $("#workbench-header").text("Feature Feedback");
             $('#container-workbench').css("background-color", '#e6f2ff');
             data = response[i].custom.data;
             renderExampleGUIWithFeature(data);
             scrollToBottomOfResults();
          }
          if (payload == "dfb-top-k") {
             // Check if the custom payload type is "dfb"
             $("#workbench-header").text("Feature Feedback");
             $('#container-workbench').css("background-color", '#e6f2ff');
             data = response[i].custom.data;
             renderFeatureRanking(data);
             scrollToBottomOfResults();
          }
           if (payload == "top-k-feature-rankings-for-annotation") {
             // Check if the custom payload type is "dfb"
             $("#workbench-header").text("Feature Feedback");
             $('#container-workbench').css("background-color", '#e6f2ff');
             data = response[i].custom.data;
             renderTopKFeatureRanking(data);
             scrollToBottomOfResults();
          }
          if (payload == "gui-req-summary") {
             // Check if the custom payload type is "dfb"
             data = response[i].custom.data;
             $("#preview-header").text("Preview");
             $('#selected-gui-wrapper').children().remove();
             renderGUIReqSummaryModal(data);
             scrollToBottomOfResults();
             console.log('guireqsummary');

          }
          if (payload === "quickReplies") {
            // check if the custom payload type is "quickReplies"
            const quickRepliesData = response[i].custom.data;
            showQuickReplies(quickRepliesData);
            scrollToBottomOfResults();
            return;
          }

          // check if the custom payload type is "pdf_attachment"
          if (payload === "pdf_attachment") {
            renderPdfAttachment(response[i]);
            scrollToBottomOfResults();
            return;
          }

          // check if the custom payload type is "dropDown"
          if (payload === "dropDown") {
            const dropDownData = response[i].custom.data;
            renderDropDwon(dropDownData);
            addDropDownEventHandler();
            scrollToBottomOfResults();
            return;
          }

          // check if the custom payload type is "cardsCarousel"
          if (payload === "cardsCarousel") {
            const restaurantsData = response[i].custom.data;
            showCardsCarousel(restaurantsData);
            scrollToBottomOfResults();
            return;
          }

          // check if the custom payload type is "chart"
          if (payload === "chart") {
            /**
             * sample format of the charts data:
             *  var chartData =  { "title": "Leaves", "labels": ["Sick Leave", "Casual Leave", "Earned Leave", "Flexi Leave"], "backgroundColor": ["#36a2eb", "#ffcd56", "#ff6384", "#009688", "#c45850"], "chartsData": [5, 10, 22, 3], "chartType": "pie", "displayLegend": "true" }
             */

            const chartData = response[i].custom.data;
            const {
              title,
              labels,
              backgroundColor,
              chartsData,
              chartType,
              displayLegend,
            } = chartData;

            // pass the above variable to createChart function
            createChart(
              title,
              labels,
              backgroundColor,
              chartsData,
              chartType,
              displayLegend
            );

            // on click of expand button, render the chart in the charts modal
            $(document).on("click", "#expand", () => {
              createChartinModal(
                title,
                labels,
                backgroundColor,
                chartsData,
                chartType,
                displayLegend
              );
            });
            scrollToBottomOfResults();
            return;
          }

          // check of the custom payload type is "collapsible"
          if (payload === "collapsible") {
            const { data } = response[i].custom;
            // pass the data variable to createCollapsible function
            createCollapsible(data);
            scrollToBottomOfResults();
          }
        }
      scrollToBottomOfResults();
      showBotTyping();
  }, addedDelay)
}

/**
 * sends the user message to the rasa server,
 * @param {String} message user message
 */
async function send(message) {
  console.log(`sending user message to server: ${message}`)
  console.log('csrf token');
  console.log(csrftoken);
  await new Promise((r) => setTimeout(r, 2000));
  console.log(`sending to ${rasa_server_url}`)
  console.log(JSON.stringify({ message, sender: sender_id , csrfmiddlewaretoken:csrftoken }))
  $.ajax({
    url: rasa_server_url,
    type: "POST",
    contentType: "application/json",
    data: JSON.stringify({ message, sender: sender_id , csrfmiddlewaretoken:csrftoken }),
    success(botResponse, status) {
      console.log("Response from Rasa: ", botResponse, "\nStatus: ", status);
      console.log(typeof botResponse);
      // if user wants to restart the chat and clear the existing chat contents
      if (message.toLowerCase() === "/restart") {
        $("#userInput").prop("disabled", false);

        // if you want the bot to start the conversation after restart
        // customActionTrigger();
        return;
      }
      setBotResponse(botResponse);
    },
    error(xhr, textStatus) {
      if (message.toLowerCase() === "/restart") {
        $("#userInput").prop("disabled", false);
        // if you want the bot to start the conversation after the restart action.
        // actionTrigger();
        // return;
      }

      // if there is no response from rasa server, set error bot response
      setBotResponse("");
      console.log("Error from bot end: ", textStatus);
    },
  });
}
/**
 * sends an event to the bot,
 *  so that bot can start the conversation by greeting the user
 *
 * `Note: this method will only work in Rasa 1.x`
 */
// eslint-disable-next-line no-unused-vars
function actionTrigger() {
  $.ajax({
    url: `http://localhost:5005/conversations/${sender_id}/execute`,
    type: "POST",
    contentType: "application/json",
    data: JSON.stringify({
      name: action_name,
      policy: "MappingPolicy",
      confidence: "0.98",
    }),
    success(botResponse, status) {
      console.log("Response from Rasa: ", botResponse, "\nStatus: ", status);

      if (Object.hasOwnProperty.call(botResponse, "messages")) {
        setBotResponse(botResponse.messages);
      }
      $("#userInput").prop("disabled", false);
    },
    error(xhr, textStatus) {
      // if there is no response from rasa server
      setBotResponse("");
      console.log("Error from bot end: ", textStatus);
      $("#userInput").prop("disabled", false);
    },
  });
}

/**
 * sends an event to the custom action server,
 *  so that bot can start the conversation by greeting the user
 *
 * Make sure you run action server using the command
 * `rasa run actions --cors "*"`
 *
 * `Note: this method will only work in Rasa 2.x`
 */
// eslint-disable-next-line no-unused-vars
function customActionTrigger() {
  $.ajax({
    url: "http://localhost:5055/webhook/",
    type: "POST",
    contentType: "application/json",
    data: JSON.stringify({
      next_action: action_name,
      tracker: {
        sender_id,
      },
    }),
    success(botResponse, status) {
      console.log("Response from Rasa: ", botResponse, "\nStatus: ", status);

      if (Object.hasOwnProperty.call(botResponse, "responses")) {
        setBotResponse(botResponse.responses);
      }
      $("#userInput").prop("disabled", false);
    },
    error(xhr, textStatus) {
      // if there is no response from rasa server
      setBotResponse("");
      console.log("Error from bot end: ", textStatus);
      $("#userInput").prop("disabled", false);
    },
  });
}

/**
 * clears the conversation from the chat screen
 * & sends the `/resart` event to the Rasa server
 */
function restartConversation() {
  $("#userInput").prop("disabled", true);
  // destroy the existing chart
  $(".collapsible").remove();

  if (typeof chatChart !== "undefined") {
    chatChart.destroy();
  }

  $(".chart-container").remove();
  if (typeof modalChart !== "undefined") {
    modalChart.destroy();
  }
  $(".chats").html("");
  $(".usrInput").val("");
  send("/restart");
}
// triggers restartConversation function.
$("#restart").click(() => {
  restartConversation();
});

/**
 * if user hits enter or send button
 * */
$(".usrInput").on("keyup keypress", (e) => {
  const keyCode = e.keyCode || e.which;

  const text = $(".usrInput").val();
  if (keyCode === 13) {
    if (text === "" || $.trim(text) === "") {
      e.preventDefault();
      return false;
    }
    // destroy the existing chart, if yu are not using charts, then comment the below lines
    $(".collapsible").remove();
    $(".dropDownMsg").remove();
    if (typeof chatChart !== "undefined") {
      chatChart.destroy();
    }

    $(".chart-container").remove();
    if (typeof modalChart !== "undefined") {
      modalChart.destroy();
    }

    $("#paginated_cards").remove();
    $(".suggestions").remove();
    $(".quickReplies").remove();
    $(".usrInput").blur();
    setUserResponse(text);
    send(text);
    e.preventDefault();
    return false;
  }
  return true;
});

$("#sendButton").on("click", (e) => {
  const text = $(".usrInput").val();
  if (text === "" || $.trim(text) === "") {
    e.preventDefault();
    return false;
  }
  // destroy the existing chart
  if (typeof chatChart !== "undefined") {
    chatChart.destroy();
  }

  $(".chart-container").remove();
  if (typeof modalChart !== "undefined") {
    modalChart.destroy();
  }

  $(".suggestions").remove();
  $("#paginated_cards").remove();
  $(".quickReplies").remove();
  $(".usrInput").blur();
  $(".dropDownMsg").remove();
  setUserResponse(text);
  send(text);
  e.preventDefault();
  return false;
});

// add event handler if user selects a option.
// eslint-disable-next-line func-names
function addDropDownEventHandler() {
    $("select").on("change", function () {
        let value = "";
        let label = "";
        $("select option:selected").each(() => {
            label += $(this).val();
            value += $(this).val();
        });

        setUserResponse(label);
        // eslint-disable-next-line no-use-before-define
        send(value);
        $(".dropDownMsg").remove();
    });
}

// on click of quickreplies, get the payload value and send it to rasa
$(document).on("click", ".quickReplies .chip", function () {
    const text = this.innerText;
    const payload = this.getAttribute("data-payload");
    console.log("chip payload: ", this.getAttribute("data-payload"));
    setUserResponse(text);
    console.log('payload');
    console.log(payload)
    if (payload == '/finish_gfb_feedback') {
      gfb_feedback = collectGFBFeedback();
      send(`/finish_gfb_feedback{"gfb_feedback":  ${JSON.stringify(gfb_feedback)}}`);
    } else if (payload == '/top_k_gui_annotation_finished') {
      annotation_feedback = collectAnnotationFeedback();
      send(`/top_k_gui_annotation_finished{"annotated_guis":  ${JSON.stringify(annotation_feedback)}}`);
    } else if (payload == '/top_k_feature_annotation_finished') {
      feature_annotation_feedback = collectFeatureAnnotationFeedback();
      send(`/top_k_feature_annotation_finished{"annotated_features":  ${JSON.stringify(feature_annotation_feedback)}}`);
    } else {
      send(payload);
    }

    // delete the quickreplies
    $(".quickReplies").remove();
});

function collectGFBFeedback() {
    var gui_indexes = gfb_top_k_gui_indexes.value;
    gfb_feedback = {}
    for (var i = 0; i < gui_indexes.length; i++) {
          var checkboxVal = $(`input[name='options-outlined-${(i+1)}']:checked`).val();
          if (checkboxVal) {
              gfb_feedback[gui_indexes[i]] = checkboxVal;
          }
    }
    return gfb_feedback;
}

function collectAnnotationFeedback() {
    var gui_indexes = top_k_annotation_gui_indexes.value;
    gfb_feedback = {}
    for (var i = 0; i < gui_indexes.length; i++) {
          var checkboxVal = $(`input[name='options-outlined-${(i+1)}']:checked`).val();
          if (checkboxVal) {
              gfb_feedback[gui_indexes[i]] = checkboxVal;
          }
    }
    return gfb_feedback;
}

function collectFeatureAnnotationFeedback() {
    var gui_indexes = top_k_annotation_feature_indexes.value;
    gfb_feedback = {}
    for (var i = 0; i < gui_indexes.length; i++) {
          var checkboxVal = $(`input[name='options-outlined-${(i+1)}']:checked`).val();
          if (checkboxVal) {
              gfb_feedback[gui_indexes[i]] = checkboxVal;
          }
    }
    return gfb_feedback;
}


// on click of suggestion's button, get the title value and send it to rasa
$(document).on("click", ".menu .menuChips", function () {
    const text = this.innerText;
    const payload = this.getAttribute("data-payload");
    console.log("payload: ", this.getAttribute("data-payload"));
    setUserResponse(text);
    send(payload);

    // delete the suggestions once user click on it.
    $(".suggestions").remove();
});


module.exports['send'] = send;
module.exports['scrollToBottomOfResults'] = scrollToBottomOfResults;
module.exports['setUserResponse'] = setUserResponse;
module.exports['showBotTyping'] = showBotTyping;
module.exports['renderBotResponse'] = renderBotResponse;
},{"../../sergui/vars":79,"../constants":73,"./cardsCarousel":64,"./charts":65,"./collapsible":67,"./dropDown":68,"./guiRankingData":69,"./pdfAttachment":70,"./quickReplies":71,"./suggestionButtons":72}],67:[function(require,module,exports){
/**
 *  creates collapsible
 * for more info refer:https://materializecss.com/collapsible.html
 * @param {Array} collapsible_date json array
 */
function createCollapsible(collapsible_data) {
    // sample data format:
    // var collapsible_data=[{"title":"abc","description":"xyz"},{"title":"pqr","description":"jkl"}]
    let collapsible_list = "";
    for (let i = 0; i < collapsible_data.length; i += 1) {
        const collapsible_item = `<li><div class="collapsible-header">${collapsible_data[i].title}</div><div class="collapsible-body">
<span>${collapsible_data[i].description}</span></div></li>`;

        collapsible_list += collapsible_item;
    }
    const collapsible_contents = `<ul class="collapsible">${collapsible_list}</ul>`;
    $(collapsible_contents).appendTo(".chats");

    // initialize the collapsible
    $(".collapsible").collapsible();
}

module.exports['createCollapsible'] = createCollapsible;
},{}],68:[function(require,module,exports){
/**
 *  renders the dropdown message and
 *  handles the user selection
 * @param {Array} drop_down_data json array
 */
function renderDropDwon(drop_down_data) {
    let drop_down_options = "";
    for (let i = 0; i < drop_down_data.length; i += 1) {
        drop_down_options += `<option value="${drop_down_data[i].value}">${drop_down_data[i].label}</option>`;
    }
    const drop_down_select = `<div class="dropDownMsg"><select class="browser-default dropDownSelect"> <option value="" disabled selected>Choose your option</option>${drop_down_options}</select></div>`;
    $(".chats").append(drop_down_select);
}

module.exports['renderDropDwon'] = renderDropDwon;
},{}],69:[function(require,module,exports){
const { vars } = require('../../sergui/vars');

var {
    currentGUIReqSummary,
    showGUIReqSummary,
    guiNodes,
    layerPlay,
    stageAspects,
    layerAspects,
    gfb_top_k_gui_indexes,
    top_k_annotation_gui_indexes,
    top_k_annotation_feature_indexes,
    baseURL,
} = vars;

/**
 *  Renders the GUI ranking data to the workbench container
 */
function renderGUIRankingData(guiRankingData) {
    console.log('rendering guis method')
    setTimeout(() => {
        //$('#container-workbench').children().remove();
        $('#workbench-wrapper').children().remove();
        console.log('rendering guis')
        searchResultCards = guiRankingData.map((doc) =>
                        searchResultCard(doc['index'], doc['rank'], doc['score']));
        $('#workbench-wrapper').append(`
        <div id="container-workbench" class="row text-center text-lg-left" style="margin-top:2px; height:100%;overflow-y:scroll">        
      </div>`)
        $('#container-workbench').append(searchResultCards).hide().fadeIn(1300);
        //$('#container-workbench').on(
        //      'click',
        //      'button[id^="btn-gui-add"]',
        //      function () {
        //        console.log('add gui to preview');
         //       addGUIToEditor($(this).data('val'), 0, 0, isEditModeOn.value);
         //   });
        scrollToTopOfRankingResults();
        $('#container-workbench').css("background-color", '#e6fff2');
    }, 1000);
}

function scrollToTopOfRankingResults() {
  console.log('scrolling ranking results to top')
    const rankingResultsDiv = document.getElementById("container-workbench-wrapper");
    console.log(`scrolltop: ${rankingResultsDiv.scrollTop}`)
   $("#container-workbench-wrapper").animate({ scrollTop: 0 }, "slow");
     //rankingResultsDiv.scrollTop = 0;
}

function searchResultCard(index, rank, conf) {
  return `<div class="col-lg-4 col-md-6 col-12 col-sm-6" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED" class="card mb-3 box-shadow">
      <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">${rank}.</p>
      <img class="card-img-top myImages" id="myImg-${index}" src=  "${baseURL}/combined/${index}.jpg" draggable="true" alt="GUI ${index}">
            <button id="btn-gui-add-${index}" data-val="${index}" class="btn btn-success p-0" style="width:100%;text-transform: none;" type="submit">Select</button>

          </div>`;
}


function renderGUIRankingDataReselect(guiRankingData) {
    console.log('rendering guis method')
    setTimeout(() => {
        //$('#container-workbench').children().remove();
        $('#workbench-wrapper').children().remove();
        console.log('rendering guis')
        searchResultCards = guiRankingData.map((doc) =>
                        searchResultCardReselect(doc['index'], doc['rank'], doc['score']));
        $('#workbench-wrapper').append(`
        <div id="container-workbench" class="row text-center text-lg-left" style="margin-top:2px; height:100%;overflow-y:scroll">        
      </div>`)
        $('#container-workbench').append(searchResultCards).hide().fadeIn(1300);
        //$('#container-workbench').on(
        //      'click',
        //      'button[id^="btn-gui-add"]',
        //      function () {
        //        console.log('add gui to preview');
         //       addGUIToEditor($(this).data('val'), 0, 0, isEditModeOn.value);
         //   });
        scrollToTopOfRankingResults();
        $('#container-workbench').css("background-color", '#e6fff2');
    }, 1000);
}

function searchResultCardReselect(index, rank, conf) {
  return `<div class="col-lg-4 col-md-6 col-12 col-sm-6" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED" class="card mb-3 box-shadow">
      <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">${rank}.</p>
      <img class="card-img-top myImages" id="myImg-${index}" src=  "${baseURL}/combined/${index}.jpg" draggable="true" alt="GUI ${index}">
            <button id="btn-gui-reselect-${index}" data-val="${index}" class="btn btn-success p-0" style="width:100%;text-transform: none;" type="submit">Select</button>

          </div>`;
}


function gfbAnnotationCard(index, rank, conf) {
  return `<div class="col-lg-4 col-md-6 col-12 col-sm-6" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED" class="card mb-3 box-shadow">
      <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">${rank}.</p>
      <img class="card-img-top myImages" id="myImg-${index}" src=  "${baseURL}/combined/${index}.jpg" draggable="true" alt="GUI ${index}">
                     <div>
          <input type="radio" class="custom-btn-1" value="R" name="options-outlined-${rank}" id="success-outlined-${rank}" autocomplete="off">
<label style="width:49%" class="btn btn-outline-success" for="success-outlined-${rank}">+</label>

          <input type="radio" class="custom-btn-2" value="NR" name="options-outlined-${rank}" id="danger-outlined-${rank}" autocomplete="off">
<label style="width:49%" class="btn btn-outline-danger" for="danger-outlined-${rank}">-</label>
</div>


          </div>


        </div>`;
}

function topKFinalAnnotationCard(index, rank, conf) {
  return `<div class="col-lg-4 col-md-6 col-12 col-sm-6" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED" class="card mb-3 box-shadow">
      <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">${rank}.</p>
      <img style='margin-bottom:5px' class="card-img-top myImages" id="myImg-${index}" src=  "${baseURL}/combined/${index}.jpg" draggable="true" alt="GUI ${index}">
                     <div style="text-align:center">
          <input type="radio" class="custom-btn-1" value="0" name="options-outlined-${rank}" id="button-0-${rank}" autocomplete="off">
<label style="width:30%" class="btn" for="button-0-${rank}">0</label>

          <input type="radio" class="custom-btn-1" value="1" name="options-outlined-${rank}" id="button-1-${rank}" autocomplete="off">
<label style="width:30%" class="btn" for="button-1-${rank}">1</label>
                    <input type="radio" class="custom-btn-1" value="2" name="options-outlined-${rank}" id="button-2-${rank}" autocomplete="off">
<label style="width:30%" class="btn" for="button-2-${rank}">2</label>
</div>


          </div>


        </div>`
}

function renderGUIRankingDataForAnnotation(guiRankingData) {
    console.log('rendering guis method')
    setTimeout(() => {
        //$('#container-workbench').children().remove();
        $('#workbench-wrapper').children().remove();
        console.log('rendering guis')
        gfbAnnotationCards = guiRankingData.map((doc) =>
                        gfbAnnotationCard(doc['index'], doc['rank'], doc['score']));
        $('#workbench-wrapper').append(`
        <div id="container-workbench" class="row text-center text-lg-left" style="margin-top:2px; height:100%;overflow-y:scroll">        
      </div>`)
        $('#container-workbench').append(gfbAnnotationCards).hide().fadeIn(1300);
        //$('#container-workbench').on(
        //      'click',
        //      'button[id^="btn-gui-add"]',
        //      function () {
        //        console.log('add gui to preview');
         //       addGUIToEditor($(this).data('val'), 0, 0, isEditModeOn.value);
         //   });
        gfb_top_k_gui_indexes.value = guiRankingData.map((doc) => doc['index']);
        scrollToTopOfRankingResults();
        $('#container-workbench').css("background-color", '#e6f2ff');
    }, 1000);
}

function renderGUIRankingDataForTopKFinalAnnotation(guiRankingData) {
    console.log('rendering guis method final k')
    setTimeout(() => {
        //$('#container-workbench').children().remove();
        $('#workbench-wrapper').children().remove();
        console.log('rendering guis for annotation')
        topkfinalAnnotationCards = guiRankingData.map((doc) =>
                        topKFinalAnnotationCard(doc['index'], doc['rank'], doc['score']));
        $('#workbench-wrapper').append(`
        <div id="container-workbench" class="row text-center text-lg-left" style="margin-top:2px; height:100%;overflow-y:scroll">        
      </div>`)
        $('#container-workbench').append(topkfinalAnnotationCards).hide().fadeIn(1300);
        //$('#container-workbench').on(
        //      'click',
        //      'button[id^="btn-gui-add"]',
        //      function () {
        //        console.log('add gui to preview');
         //       addGUIToEditor($(this).data('val'), 0, 0, isEditModeOn.value);
         //   });
        top_k_annotation_gui_indexes.value = guiRankingData.map((doc) => doc['index']);
        scrollToTopOfRankingResults();
        $('#container-workbench').css("background-color", '#e6f2ff');
    }, 1000);
}

function addKonvaImage(guiIndex) {
    var stagePlay = new Konva.Stage({
        container: 'konva-workbench',
      });
    console.log(stagePlay);
    var layerPlay = new Konva.Layer();

    stagePlay.add(layerPlay);

    var newImg = new Image();
    newImg.onload = function () {
        drawGUI(this);
    }
    newImg.src = `${baseURL}/combined/${guiIndex}.jpg`;

    function drawGUI(newImg) {
    var imgNodePlay = new Konva.Image({x: 0,y: 0, image: newImg,
          width: newImg.width * (540 / newImg.width),
          height: newImg.height * (540 / newImg.width),
        });

       console.log(newImg.width);
       console.log(newImg.height);
       console.log(newImg.src);

        var realWidth = imgNodePlay.getAttr('width') * imgNodePlay.getAttr('scaleX');
        var realHeight = imgNodePlay.getAttr('height') * imgNodePlay.getAttr('scaleY');
        var scalePlayerContainer = 0.60;
        var scaling_factor = 1.0;
        var updatedWidth = realWidth * scalePlayerContainer;
        var updatedHeight = realHeight * scalePlayerContainer;

        imgNodePlay.width(updatedWidth);
        imgNodePlay.height(updatedHeight);
        stagePlay.width(updatedWidth);
        stagePlay.height(updatedHeight);

        $('#konva-workbench').width(updatedWidth).height(updatedHeight);
        layerPlay.add(imgNodePlay);
        layerPlay.batchDraw();
    }
}

function renderExampleGUI(guiIndex) {
    console.log('rendering gui')
    console.log(guiIndex)
    setTimeout(() => {
        $('#workbench-wrapper').children().remove();
        //console.log('rendering guis')
        //$('#container-workbench').append()
        //scrollToTopOfRankingResults();
  $('#workbench-wrapper').append(`
     <div id="konva-workbench-wrapper" style="overflow-y:scroll;scrollbar-width:none;width:100%;height:80%;display:flex;justify-content:center;align-items:center;">
        <div id="konva-workbench" style='width:0px;height:0px;'></div>
    </div>`)
        addKonvaImage(guiIndex);
    }, 200);
}

function renderFeatureRanking(data) {
    console.log(data);
        setTimeout(() => {
        //$('#container-workbench').children().remove();
        $('#workbench-wrapper').children().remove();
        $('#workbench-wrapper').append(`
        <div id="container-workbench" class="row text-center text-lg-left" style="margin-top:2px; height:100%;overflow-y:scroll">        
      </div>`).hide().fadeIn(1300);
        console.log('rendering features')
         for (var i = 0; i < data.length; i++) {
            console.log(i);
            console.log(data[i]);
             $("#container-workbench").append(featureCard(data[i]['rank'], data[i]['gui_id']));
             addKonvaImageAndFeatureWithContainerRanking(data[i]['gui_id'], data[i]['bounds'], 'feature-'+data[i]['rank']);
    }

        //$('#container-workbench').append(searchResultCards).hide().fadeIn(1300);
        //$('#container-workbench').on(
        //      'click',
        //      'button[id^="btn-gui-add"]',
        //      function () {
        //        console.log('add gui to preview');
         //       addGUIToEditor($(this).data('val'), 0, 0, isEditModeOn.value);
         //   });
        scrollToTopOfRankingResults();
        $('#container-workbench').css("background-color", '#e6f2ff');
    }, 1000);
}

function renderTopKFeatureRanking(data) {
    console.log(data);
        setTimeout(() => {
        //$('#container-workbench').children().remove();
        $('#workbench-wrapper').children().remove();
        $('#workbench-wrapper').append(`
        <div id="container-workbench" class="row text-center text-lg-left" style="margin-top:2px; height:100%;overflow-y:scroll">        
      </div>`).hide().fadeIn(1300);
        console.log('rendering features')
         for (var i = 0; i < data.length; i++) {
            console.log(i);
            console.log(data[i]);
             $("#container-workbench").append(featureCardTopK(data[i]['rank'], data[i]['gui_id'], data[i]['text'], data[i]['score']));
             addKonvaImageAndFeatureWithContainerRanking(data[i]['gui_id'], data[i]['bounds'], 'feature-'+data[i]['rank']);
    }

        //$('#container-workbench').append(searchResultCards).hide().fadeIn(1300);
        //$('#container-workbench').on(
        //      'click',
        //      'button[id^="btn-gui-add"]',
        //      function () {
        //        console.log('add gui to preview');
         //       addGUIToEditor($(this).data('val'), 0, 0, isEditModeOn.value);
         //   });
        top_k_annotation_feature_indexes.value = data.map((doc) => doc['feature_id']);
        scrollToTopOfRankingResults();
        $('#container-workbench').css("background-color", '#e6f2ff');
    }, 1000);
}

function featureCard(rank, index) {
  return `<div id="feature-card" class="col-lg-4 col-md-6 col-6 col-sm-6" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED; width:100%;text-align: center;vertical-align: middle;align-items: center;" class="card mb-3 box-shadow">
      <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">${rank}.</p>
      <div class="card-img-top myImages" id="feature-${rank}"></div>
        <button id="btn-select-feature-${index}" data-val="${index}" class="btn btn-primary p-0" style="width:100%;text-transform: none;" type="submit">Select</button>

          </div> </div>`;
}

function featureCardTopK(rank, index, text, score) {
    return `<div id="feature-card" class="col-lg-4 col-md-6 col-6 col-sm-6" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED; width:100%;text-align: center;vertical-align: middle;align-items: center;" class="card mb-3 box-shadow">
      <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">${rank}. (${score})</p>
      <div style="margin-bottom:5px" class="card-img-top myImages" id="feature-${rank}"></div>
                <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:5px">"${text}"</p>
        <div style="text-align:center;width:100%">
          <input type="radio" class="custom-btn-1-1" value="R" name="options-outlined-${rank}" id="success-outlined-${rank}" autocomplete="off">
<label style="width:45%" class="btn btn-outline-success" for="success-outlined-${rank}">+</label>

          <input type="radio" class="custom-btn-2-2" value="NR" name="options-outlined-${rank}" id="danger-outlined-${rank}" autocomplete="off">
<label style="width:45%" class="btn btn-outline-danger" for="danger-outlined-${rank}">-</label>
</div>

          </div> </div>`
}


function addKonvaImageAndFeature(data) {
  var guiIndex = data['gui_id']
  var bounds = data['bounds']
    var stagePlay = new Konva.Stage({
        container: 'konva-workbench',
      });
    console.log(stagePlay);
    var layerPlay = new Konva.Layer();

    stagePlay.add(layerPlay);

    var newImg = new Image();
    newImg.onload = function () {
        drawGUI(this, bounds);
    }
    newImg.src = `${baseURL}/combined/${guiIndex}.jpg`;

    function drawGUI(newImg, bounds) {
    var imgNodePlay = new Konva.Image({x: 0,y: 0, image: newImg,
          width: newImg.width * (540 / newImg.width),
          height: newImg.height * (540 / newImg.width),
        });

       console.log(newImg.width);
       console.log(newImg.height);
       console.log(newImg.src);

        var realWidth = imgNodePlay.getAttr('width') * imgNodePlay.getAttr('scaleX');
        var realHeight = imgNodePlay.getAttr('height') * imgNodePlay.getAttr('scaleY');
        var scalePlayerContainer = 0.60;
        var scaling_factor = 1.0;
        var updatedWidth = realWidth * scalePlayerContainer;
        var updatedHeight = realHeight * scalePlayerContainer;

        imgNodePlay.width(updatedWidth);
        imgNodePlay.height(updatedHeight);
        stagePlay.width(updatedWidth);
        stagePlay.height(updatedHeight);

        $('#konva-workbench').width(updatedWidth).height(updatedHeight);
        layerPlay.add(imgNodePlay);


    let factor =
            (1440 / newImg.width) *
            (1 / scaling_factor) *
            (newImg.width / 540) *
            (1 / scalePlayerContainer);
          let a = bounds;
    normalizedA = a.map(function (x) {
            return x / factor;
          });
          let width = normalizedA[2] - normalizedA[0];
          let height = normalizedA[3] - normalizedA[1];
          color = 'red'//'#32CD32';
          padding = 2
           var box2Play = new Konva.Rect({
                  x: normalizedA[0] - padding,
                  y: normalizedA[1] - padding,
                  width: width + padding*2,
                  height: height + padding*2,
                  stroke_ori: color,
                  stroke: color,
                  strokeWidth: 3,
                  //opacity: 0.3,
            });
            layerPlay.add(box2Play);

            arrow_x = box2Play.getAttr('x') + box2Play.getAttr('width')/2;

            rect_y_top = box2Play.getAttr('y');
            offset_top = 100;
            offset_arrow_end = 10;
            offset_arrow_start = 40;
            if((rect_y_top-offset_top) <= 0) {
                points = [arrow_x, rect_y_top+box2Play.getAttr('height')+offset_arrow_start, arrow_x,
                            rect_y_top+box2Play.getAttr('height')+offset_arrow_end]
            } else {
                points = [arrow_x, rect_y_top-offset_arrow_start, arrow_x, rect_y_top-offset_arrow_end]
            }
            y_end = box2Play.getAttr('y');
            console.log(arrow_x);

              var arrow = new Konva.Arrow({
            //x: 200,
            //y: 4,
            points: points,
            pointerLength: 5,
            pointerWidth: 6,
            fill: color,
            stroke: color,
            strokeWidth: 10,
          });

          layerPlay.add(arrow);
          layerPlay.batchDraw();
    }
}

function renderExampleGUIWithFeature(data) {
    console.log('rendering gui')
    console.log(data['gui_id'])
    setTimeout(() => {
        $('#workbench-wrapper').children().remove();
        //console.log('rendering guis')
        //$('#container-workbench').append()
        //scrollToTopOfRankingResults();
  $('#workbench-wrapper').append(`
     <div id="konva-workbench-wrapper" style="overflow-y:scroll;scrollbar-width:none;width:100%;height:80%;display:flex;justify-content:center;align-items:center;">
        <div id="konva-workbench" style='width:0px;height:0px;'></div>
    </div>`)
        addKonvaImageAndFeature(data);
        $('#container-workbench').css("background-color", '#e6f2ff');
    }, 200);
}




function addKonvaImageAndFeatureWithContainerRanking(gui_id, bounds, container_id) {
  var guiIndex = gui_id;
  var bounds = bounds;
  console.log(container_id);
    var stage = new Konva.Stage({
        container: container_id,
      });
    console.log('feature')
    console.log(stage);
    console.log('feature2');
    var layerPlay = new Konva.Layer();

    stage.add(layerPlay);

    var newImg = new Image();
    newImg.onload = function () {
        drawGUI(this, bounds);
    }
    newImg.src = `${baseURL}/combined/${guiIndex}.jpg`;

    function drawGUI(newImg, bounds) {
    var imgNodePlay = new Konva.Image({x: 0,y: 0, image: newImg,
          width: newImg.width * (540 / newImg.width),
          height: newImg.height * (540 / newImg.width),
        });

       console.log(newImg.width);
       console.log(newImg.height);
       console.log(newImg.src);

        var realWidth = imgNodePlay.getAttr('width') * imgNodePlay.getAttr('scaleX');
        var realHeight = imgNodePlay.getAttr('height') * imgNodePlay.getAttr('scaleY');
        var scalePlayerContainer = computeScaling3(realWidth);
        var scaling_factor = 1.0;
        var updatedWidth = realWidth * scalePlayerContainer;
        var updatedHeight = realHeight * scalePlayerContainer;

        imgNodePlay.width(updatedWidth);
        imgNodePlay.height(updatedHeight);
        stage.width(updatedWidth);
        stage.height(updatedHeight);

        $('#'+container_id).width(updatedWidth).height(updatedHeight);
        layerPlay.add(imgNodePlay);


    let factor =
            (1440 / newImg.width) *
            (1 / scaling_factor) *
            (newImg.width / 540) *
            (1 / scalePlayerContainer);
          let a = bounds;
    normalizedA = a.map(function (x) {
            return x / factor;
          });
          let width = normalizedA[2] - normalizedA[0];
          let height = normalizedA[3] - normalizedA[1];
          color = 'red'//'#32CD32';
          padding = 2
           var box2Play = new Konva.Rect({
                  x: normalizedA[0] - padding,
                  y: normalizedA[1] - padding,
                  width: width + padding*2,
                  height: height + padding*2,
                  stroke_ori: color,
                  stroke: color,
                  strokeWidth: 3,
                  //opacity: 0.3,
            });
            layerPlay.add(box2Play);

            arrow_x = box2Play.getAttr('x') + box2Play.getAttr('width')/2;

            rect_y_top = box2Play.getAttr('y');
            offset_top = 100;
            offset_arrow_end = 10;
            offset_arrow_start = 40;
            if((rect_y_top-offset_top) <= 0) {
                points = [arrow_x, rect_y_top+box2Play.getAttr('height')+offset_arrow_start, arrow_x,
                            rect_y_top+box2Play.getAttr('height')+offset_arrow_end]
            } else {
                points = [arrow_x, rect_y_top-offset_arrow_start, arrow_x, rect_y_top-offset_arrow_end]
            }
            y_end = box2Play.getAttr('y');
            console.log(arrow_x);

              var arrow = new Konva.Arrow({
            //x: 200,
            //y: 4,
            points: points,
            pointerLength: 5,
            pointerWidth: 6,
            fill: color,
            stroke: color,
            strokeWidth: 10,
          });

          layerPlay.add(arrow);
          layerPlay.batchDraw();
    }
}


function addKonvaImageAndFeatureWithContainer(gui_id, bounds, container_id) {
  var guiIndex = gui_id;
  var bounds = bounds;
  console.log(container_id);
    var stage = new Konva.Stage({
        container: container_id,
      });
    console.log('feature')
    console.log(stage);
    console.log('feature2');
    var layerPlay = new Konva.Layer();

    stage.add(layerPlay);

    var newImg = new Image();
    newImg.onload = function () {
        drawGUI(this, bounds);
    }
    newImg.src = `${baseURL}/combined/${guiIndex}.jpg`;

    function drawGUI(newImg, bounds) {
    var imgNodePlay = new Konva.Image({x: 0,y: 0, image: newImg,
          width: newImg.width * (540 / newImg.width),
          height: newImg.height * (540 / newImg.width),
        });

       console.log(newImg.width);
       console.log(newImg.height);
       console.log(newImg.src);

        var realWidth = imgNodePlay.getAttr('width') * imgNodePlay.getAttr('scaleX');
        var realHeight = imgNodePlay.getAttr('height') * imgNodePlay.getAttr('scaleY');
        var scalePlayerContainer = computeScaling1(realWidth);
        var scaling_factor = 1.0;
        var updatedWidth = realWidth * scalePlayerContainer;
        var updatedHeight = realHeight * scalePlayerContainer;

        imgNodePlay.width(updatedWidth);
        imgNodePlay.height(updatedHeight);
        stage.width(updatedWidth);
        stage.height(updatedHeight);

        $('#'+container_id).width(updatedWidth).height(updatedHeight);
        layerPlay.add(imgNodePlay);


    let factor =
            (1440 / newImg.width) *
            (1 / scaling_factor) *
            (newImg.width / 540) *
            (1 / scalePlayerContainer);
          let a = bounds;
    normalizedA = a.map(function (x) {
            return x / factor;
          });
          let width = normalizedA[2] - normalizedA[0];
          let height = normalizedA[3] - normalizedA[1];
          color = 'red'//'#32CD32';
          padding = 2
           var box2Play = new Konva.Rect({
                  x: normalizedA[0] - padding,
                  y: normalizedA[1] - padding,
                  width: width + padding*2,
                  height: height + padding*2,
                  stroke_ori: color,
                  stroke: color,
                  strokeWidth: 3,
                  //opacity: 0.3,
            });
            layerPlay.add(box2Play);

            arrow_x = box2Play.getAttr('x') + box2Play.getAttr('width')/2;

            rect_y_top = box2Play.getAttr('y');
            offset_top = 100;
            offset_arrow_end = 10;
            offset_arrow_start = 40;
            if((rect_y_top-offset_top) <= 0) {
                points = [arrow_x, rect_y_top+box2Play.getAttr('height')+offset_arrow_start, arrow_x,
                            rect_y_top+box2Play.getAttr('height')+offset_arrow_end]
            } else {
                points = [arrow_x, rect_y_top-offset_arrow_start, arrow_x, rect_y_top-offset_arrow_end]
            }
            y_end = box2Play.getAttr('y');
            console.log(arrow_x);

              var arrow = new Konva.Arrow({
            //x: 200,
            //y: 4,
            points: points,
            pointerLength: 5,
            pointerWidth: 6,
            fill: color,
            stroke: color,
            strokeWidth: 10,
          });

          layerPlay.add(arrow);
          layerPlay.batchDraw();
    }
}

function computeScaling(width) {
    const WIDTH_CORRECTION = 230;
    aspectCardWidth = $('#aspect-card-2').width();
    console.log('aspect card width');
    console.log(aspectCardWidth);
    return (aspectCardWidth) / (width + WIDTH_CORRECTION);
}

function computeScaling1(width) {
    const WIDTH_CORRECTION = 230;
    aspectCardWidth = $('#aspect-card-1').width();
    console.log('aspect card width');
    console.log(aspectCardWidth);
    return (aspectCardWidth) / (width + WIDTH_CORRECTION);
}

function computeScaling3(width) {
    const WIDTH_CORRECTION = 40;
    aspectCardWidth = $('#feature-card').width();
    console.log('feature card width');
    console.log(aspectCardWidth);
    return (aspectCardWidth) / (width + WIDTH_CORRECTION);
}


function addKonvaImageAndFeatureWithContainer2(gui_id, bounds, container_id) {
  var guiIndex = gui_id;
  var bounds = bounds;
  console.log(container_id);
    var stage = new Konva.Stage({
        container: container_id,
      });
    console.log('feature')
    console.log(stage);
    console.log('feature2');
    var layerPlay = new Konva.Layer();

    stage.add(layerPlay);

    var newImg = new Image();
    newImg.onload = function () {
        drawGUI(this, bounds);
    }
    newImg.src = `${baseURL}/combined/${guiIndex}.jpg`;

    function drawGUI(newImg, bounds) {
    var imgNodePlay = new Konva.Image({x: 0,y: 0, image: newImg,
          width: newImg.width * (540 / newImg.width),
          height: newImg.height * (540 / newImg.width),
        });

       console.log(newImg.width);
       console.log(newImg.height);
       console.log(newImg.src);

        var realWidth = imgNodePlay.getAttr('width') * imgNodePlay.getAttr('scaleX');
        var realHeight = imgNodePlay.getAttr('height') * imgNodePlay.getAttr('scaleY');


        computedScaling = computeScaling(realWidth);
        console.log('computed scaling');
        console.log(computedScaling);


        var scalePlayerContainer = computeScaling(realWidth);
        var scaling_factor = 1.0;
        var updatedWidth = realWidth * scalePlayerContainer;
        var updatedHeight = realHeight * scalePlayerContainer;

        imgNodePlay.width(updatedWidth);
        imgNodePlay.height(updatedHeight);
        stage.width(updatedWidth);
        stage.height(updatedHeight);

        $('#'+container_id).width(updatedWidth).height(updatedHeight);
        layerPlay.add(imgNodePlay);


    let factor =
            (1440 / newImg.width) *
            (1 / scaling_factor) *
            (newImg.width / 540) *
            (1 / scalePlayerContainer);
          let a = bounds;
    normalizedA = a.map(function (x) {
            return x / factor;
          });
          let width = normalizedA[2] - normalizedA[0];
          let height = normalizedA[3] - normalizedA[1];
          color = 'red'//'#32CD32';
          padding = 2
           var box2Play = new Konva.Rect({
                  x: normalizedA[0] - padding,
                  y: normalizedA[1] - padding,
                  width: width + padding*2,
                  height: height + padding*2,
                  stroke_ori: color,
                  stroke: color,
                  strokeWidth: 3,
                  //opacity: 0.3,
            });
            layerPlay.add(box2Play);

            arrow_x = box2Play.getAttr('x') + box2Play.getAttr('width')/2;

            rect_y_top = box2Play.getAttr('y');
            offset_top = 100;
            offset_arrow_end = 10;
            offset_arrow_start = 40;
            if((rect_y_top-offset_top) <= 0) {
                points = [arrow_x, rect_y_top+box2Play.getAttr('height')+offset_arrow_start, arrow_x,
                            rect_y_top+box2Play.getAttr('height')+offset_arrow_end]
            } else {
                points = [arrow_x, rect_y_top-offset_arrow_start, arrow_x, rect_y_top-offset_arrow_end]
            }
            y_end = box2Play.getAttr('y');
            console.log(arrow_x);

              var arrow = new Konva.Arrow({
            //x: 200,
            //y: 4,
            points: points,
            pointerLength: 5,
            pointerWidth: 6,
            fill: color,
            stroke: color,
            strokeWidth: 10,
          });

          layerPlay.add(arrow);
          layerPlay.batchDraw();
    }
}

function addAspectGUIsForPDFSummary(aspect_guis) {
    for (var i = 0; i < aspect_guis.length; i++) {
        curr_ag = aspect_guis[i];
        addKonvaImageAndFeatureForSummaryRendering(curr_ag['gui_id'], curr_ag['bounds'], curr_ag['feature_id']);
    }
}



function addKonvaImageAndFeatureForSummaryRendering(gui_id, bounds, feature_id) {
  var guiIndex = gui_id;
  var bounds = bounds;
   
    var newImg = new Image();
    newImg.onload = function () {
        drawGUI(this, bounds, feature_id);
    }
    newImg.src = `${baseURL}/combined/${guiIndex}.jpg`;

    function drawGUI(newImg, bounds, feature_id) {
        var groupPlay = new Konva.Group({name: feature_id, id:feature_id,});
        var imgNodePlay = new Konva.Image({x: 0,y: 0, image: newImg,
              width: newImg.width * (540 / newImg.width),
              height: newImg.height * (540 / newImg.width),
            });

           console.log(newImg.width);
           console.log(newImg.height);
           console.log(newImg.src);

            var realWidth = imgNodePlay.getAttr('width') * imgNodePlay.getAttr('scaleX');
            var realHeight = imgNodePlay.getAttr('height') * imgNodePlay.getAttr('scaleY');


            var scalePlayerContainer = 0.5;
            var scaling_factor = 1.0;
            var updatedWidth = realWidth * scalePlayerContainer;
            var updatedHeight = realHeight * scalePlayerContainer;

            imgNodePlay.width(updatedWidth);
            imgNodePlay.height(updatedHeight);
            stageAspects.width(updatedWidth);
            stageAspects.height(updatedHeight);

            $('#aspect-gui-container-rendering').width(updatedWidth).height(updatedHeight);
            groupPlay.add(imgNodePlay);


    let factor =
            (1440 / newImg.width) *
            (1 / scaling_factor) *
            (newImg.width / 540) *
            (1 / scalePlayerContainer);
          let a = bounds;
    normalizedA = a.map(function (x) {
            return x / factor;
          });
          let width = normalizedA[2] - normalizedA[0];
          let height = normalizedA[3] - normalizedA[1];
          color = 'red'//'#32CD32';
          padding = 2
           var box2Play = new Konva.Rect({
                  x: normalizedA[0] - padding,
                  y: normalizedA[1] - padding,
                  width: width + padding*2,
                  height: height + padding*2,
                  stroke_ori: color,
                  stroke: color,
                  strokeWidth: 3,
                  //opacity: 0.3,
            });
            groupPlay.add(box2Play);

            arrow_x = box2Play.getAttr('x') + box2Play.getAttr('width')/2;

            rect_y_top = box2Play.getAttr('y');
            offset_top = 100;
            offset_arrow_end = 10;
            offset_arrow_start = 40;
            if((rect_y_top-offset_top) <= 0) {
                points = [arrow_x, rect_y_top+box2Play.getAttr('height')+offset_arrow_start, arrow_x,
                            rect_y_top+box2Play.getAttr('height')+offset_arrow_end]
            } else {
                points = [arrow_x, rect_y_top-offset_arrow_start, arrow_x, rect_y_top-offset_arrow_end]
            }
            y_end = box2Play.getAttr('y');
            console.log(arrow_x);

              var arrow = new Konva.Arrow({
            //x: 200,
            //y: 4,
            points: points,
            pointerLength: 5,
            pointerWidth: 6,
            fill: color,
            stroke: color,
            strokeWidth: 10,
          });

          groupPlay.add(arrow);
          layerAspects.add(groupPlay);
          layerAspects.batchDraw();
          console.log('finished drawing');
    }
}


function aspectGUICard(index, feature_text) {
  return `<div id="aspect-card-1" class="col-lg-4 col-md-6 col-6" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED; width:75%;text-align: center;vertical-align: middle;align-items: center;" class="card mb-3 box-shadow">
      <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">${index}.</p>
      <div class="card-img-top myImages" id="konva-container-req-${index}"></div>
            <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">"${feature_text}"</p>

          </div> </div>`;
}

function aspectGUICardSummary(index, feature_text) {
  return `<div class="col-lg-4 col-md-6 col-6" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED; width:75%;text-align: center;vertical-align: middle;align-items: center;" class="card mb-3 box-shadow">
      <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">${index}.</p>
      <div class="card-img-top myImages" id="konva-container-req-summary${index}"></div>
            <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">"${feature_text}"</p>

          </div> </div>`;
}

function selectedGUICard(index, query) {
    return `<div class="col-lg-4 col-md-6 col-6" style="margin-bottom:20px;">
      <div style="padding:8px;background-color:#E3E5ED; width:75%" class="card mb-3 box-shadow">
      <img class="card-img-top myImages" id="myImg-1" src=  "${baseURL}/combined/${index}.jpg" draggable="true" alt="GUI ${index}">

          </div> </div>
            <div class="col-lg-8 col-md-8 col-8" style="margin-bottom:20px;text-align: center;vertical-align: middle;align-items: center;justify-content: center; display: flex;" >
                <p style="font-size:30px"><b>Requirements:</b> <i>"${query}"</i></p>
                </div>`
}


function selectedGUICardKonva(index, query) {
    return `<div class="col-lg-4 col-md-6 col-6" style="margin-bottom:20px;">
      <div style="padding:8px;background-color:#E3E5ED; width:75%" class="card mb-3 box-shadow">
      <div class="card-img-top myImages" id="konva-container-req-selected"></div>

          </div> </div>
            <div class="col-lg-8 col-md-8 col-8" style="margin-bottom:20px;text-align: center;vertical-align: middle;align-items: center;justify-content: center; display: flex;" >
                <p style="font-size:30px"><b>Requirements:</b> <i>"${query}"</i></p>
                </div>`
}


function aspectGUICard2(index, feature_text) {
  return `<div id="aspect-card-2" class="col-lg-4 col-md-6 col-6 col-sm-6" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED; width:75%;text-align: center;vertical-align: middle;align-items: center;" class="card mb-3 box-shadow">
      <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">${index}.</p>
      <div class="card-img-top myImages" id="konva-container-req-summary-${index}"></div>
            <p style="font-size:15px;font-weight:bold;text-align:center;margin-bottom:3px">"${feature_text}"</p>

          </div> </div>`;
}


function renderGUIReqSummaryModal(data) {
   console.log('testestsetset')
 //data =  {'selected_gui_id': '43412', 'nlr_query': 'login', 'aspect_guis': [{'aspect_type': 'afb', 'gui_id': '19158', 'feature_id': '19158_1', 'text': 'google', 'comp_type': 'Text Button', 'bounds': [144, 2133, 702, 2301], 'feature_query': 'google'},
             //           {'aspect_type': 'afb', 'gui_id': '19158', 'feature_id': '19158_1', 'text': 'google', 'comp_type': 'Text Button', 'bounds': [144, 2133, 702, 2301], 'feature_query': 'google'}]}
    console.log('test from modal');
    console.log(data);
    currentGUIReqSummary.value = data;
    // Clear the top of modal first
    $("#row-selected-gui").children().remove();
    $("#row-selected-gui").append(selectedGUICard(data['selected_gui_id'], data['nlr_query']));
    // clear aspect guis next
    $("#row-aspect-guis").children().remove();
    for (var i = 0; i < data['aspect_guis'].length; i++) {
        console.log(i);
        console.log(data['aspect_guis'][i]);
         $("#row-aspect-guis").append(aspectGUICard(i+1, data['aspect_guis'][i]['text']));
         addKonvaImageAndFeatureWithContainer(data['aspect_guis'][i]['gui_id'], data['aspect_guis'][i]['bounds'], 'konva-container-req-'+(i+1));
    }

    if (showGUIReqSummary.value) {
          $('#modal_box').modal('open');
    } else {
         setTimeout(function() {
            $('#btn-req-continue').click();
        }, 500);
    } 
}


function renderGUIReqSummaryModal2(data) {
   console.log('testestsetset')
  //data =  {'selected_gui_id': '43412', 'nlr_query': 'login', 'aspect_guis': [{'aspect_type': 'afb', 'gui_id': '19158', 'feature_id': '19158_1', 'text': 'google', 'comp_type': 'Text Button', 'bounds': [144, 2133, 702, 2301], 'feature_query': 'google'},
    //                  {'aspect_type': 'afb', 'gui_id': '19158', 'feature_id': '19158_1', 'text': 'google', 'comp_type': 'Text Button', 'bounds': [144, 2133, 702, 2301], 'feature_query': 'google'},
      //                {'aspect_type': 'afb', 'gui_id': '19158', 'feature_id': '19158_1', 'text': 'google', 'comp_type': 'Text Button', 'bounds': [144, 2133, 702, 2301], 'feature_query': 'google'},
        //              {'aspect_type': 'afb', 'gui_id': '19158', 'feature_id': '19158_1', 'text': 'google', 'comp_type': 'Text Button', 'bounds': [144, 2133, 702, 2301], 'feature_query': 'google'},
          //            {'aspect_type': 'afb', 'gui_id': '19158', 'feature_id': '19158_1', 'text': 'google', 'comp_type': 'Text Button', 'bounds': [144, 2133, 702, 2301], 'feature_query': 'google'}]}
    console.log('test from modal');
    console.log(data);
    // Clear the top of modal first
    $("#row-selected-gui-gui-summary").children().remove();
    $("#row-selected-gui-gui-summary").append(selectedGUICard(data['selected_gui_id'], data['nlr_query']));
    //$("#row-selected-gui-gui-summary").append(selectedGUICardKonva(data['selected_gui_id'], data['nlr_query']));
    //addKonvaSelectedGUIEditedCopy(data['selected_gui_id']);
    // clear aspect guis next
    $("#row-aspect-guis-gui-summary").children().remove();
    for (var i = 0; i < data['aspect_guis'].length; i++) {
        console.log(i);
        console.log(data['aspect_guis'][i]);
         $("#row-aspect-guis-gui-summary").append(aspectGUICard2(i+1, data['aspect_guis'][i]['text']));
         addKonvaImageAndFeatureWithContainer2(data['aspect_guis'][i]['gui_id'], data['aspect_guis'][i]['bounds'], 'konva-container-req-summary-'+(i+1));
    }
     $('#modal_box_gui_summary').scrollTop(0);
     $('#modal_box_gui_summary').modal('open');
}


function addKonvaSelectedGUIEditedCopy(gui_id) {
  var guiIndex = 'gui_' + gui_id;
  //console.log(container_id);
    var stage = new Konva.Stage({
        container: "konva-container-req-selected",
      });
    console.log('feature')
    console.log(stage);
    console.log('feature2');
    var layer = new Konva.Layer();
    console.log('gui id')
    console.log(guiIndex);
    console.log('layerplay');
    console.log(layerPlay);

    var guiIndexImg = guiIndex + '_img';
    var guiNodeKonva = layerPlay.findOne(`#${guiIndex}`);
    var imgNodeKonva = layerPlay.findOne(`#${guiIndexImg}`);
    console.log('node imaage')
    console.log(imgNodeKonva)
    scalePlayer = 0.6
    updatedWidth = imgNodeKonva.getAttr('width') * scalePlayer
    updatedHeight = imgNodeKonva.getAttr('height') * scalePlayer
    var clonedGuiNodeKonva = guiNodeKonva.clone();
    clonedGuiNodeKonva.children.forEach((c) => {
        console.log(c.getAttr('id'));
        oldWidth = c.getAttr('width');
        oldHeight = c.getAttr('height');
        c.width(oldWidth*scalePlayer);
        c.height(oldHeight*scalePlayer);
        c.children.forEach((d) => {
                console.log(d.getAttr('id'));
                oldWidth = d.getAttr('width');
                oldHeight = d.getAttr('height');
                d.width(oldWidth*scalePlayer);
                d.height(oldHeight*scalePlayer);
                

            });

    });
    console.log('konva node');
    console.log(guiNodeKonva);
    console.log(clonedGuiNodeKonva);


       console.log('updated size')
    console.log(updatedHeight);
        console.log(updatedWidth);

        stage.width(updatedWidth);
        stage.height(updatedHeight);
         console.log(clonedGuiNodeKonva);
         console.log(stage.getAttr('width'))
         console.log(stage);
         console.log(layerPlay);

        $('#konva-container-req-selected').width(updatedWidth).height(updatedHeight);


    layer.add(clonedGuiNodeKonva);
            var imgNodeKonvaCloned = layer.findOne(`#${guiIndexImg}`);
        imgNodeKonvaCloned.width(updatedWidth);
        imgNodeKonvaCloned.height(updatedHeight);
            console.log(imgNodeKonvaCloned.getAttr('scaleX'))
    stage.add(layer);
    console.log(stage);
    layer.batchDraw();
    
}


function updateModalAdditionalRequirements(data) {
   $("#row-aspect-guis-summary").children().remove();
   console.log(data);
   for (var i = 0; i < data['aspect_guis'].length; i++) {
        console.log(i);
        console.log(data['aspect_guis'][i]);
         $("#row-aspect-guis-summary").append(aspectGUICardSummary(i+1, data['aspect_guis'][i]['text']));
         addKonvaImageAndFeatureWithContainer(data['aspect_guis'][i]['gui_id'], data['aspect_guis'][i]['bounds'], 'konva-container-req-summary'+(i+1));
    }
}

function guiNodesCard(index, feature_text) {
  return `          <div class="col-lg-3 col-md-3 col-3" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED; height:100%" class="card mb-3 box-shadow">
        <button id="btn-gui-summary" data-val="${index}">
      <img class="card-img-top myImages" id="myImg-1" src=  "${baseURL}/combined/${index}.jpg" draggable="true" alt="GUI ${index}">
</button>
          </div>  </div>`;
}



function updateModalGUINodes() {
       $("#row-selected-gui-summary").children().remove();
       for (var i = 0; i < guiNodes.length; i++) { 
            $("#row-selected-gui-summary").append(guiNodesCard(guiNodes[i]['summary']['selected_gui_id'], guiNodes[i]['summary']['nlr_query']));
       }
}

module.exports['renderGUIRankingData'] = renderGUIRankingData;
module.exports['renderExampleGUI'] = renderExampleGUI;
module.exports['renderExampleGUIWithFeature'] = renderExampleGUIWithFeature;
module.exports['renderGUIReqSummaryModal'] = renderGUIReqSummaryModal;
module.exports['updateModalAdditionalRequirements'] = updateModalAdditionalRequirements;
module.exports['updateModalGUINodes'] = updateModalGUINodes;
module.exports['renderGUIReqSummaryModal2'] = renderGUIReqSummaryModal2;
module.exports['renderFeatureRanking'] = renderFeatureRanking;
module.exports['addKonvaImageAndFeatureForSummaryRendering'] = addKonvaImageAndFeatureForSummaryRendering;
module.exports['addAspectGUIsForPDFSummary'] = addAspectGUIsForPDFSummary;
module.exports['renderGUIRankingDataForAnnotation'] = renderGUIRankingDataForAnnotation;
module.exports['renderGUIRankingDataForTopKFinalAnnotation'] = renderGUIRankingDataForTopKFinalAnnotation;
module.exports['renderTopKFeatureRanking'] = renderTopKFeatureRanking;
module.exports['renderGUIRankingDataReselect'] = renderGUIRankingDataReselect;
},{"../../sergui/vars":79}],70:[function(require,module,exports){
/**
 * renders pdf attachment on to the chat screen
 * @param {Object} pdf_data json object
 */
function renderPdfAttachment(pdf_data) {
    const { url: pdf_url } = pdf_data.custom;
    const { title: pdf_title } = pdf_data.custom;
    const pdf_attachment = `<div class="pdf_attachment"><div class="row"><div class="col s3 pdf_icon">
<i class="fa fa-file-pdf-o" aria-hidden="true"></i></div><div class="col s9 pdf_link"><a href="${pdf_url}" target="_blank">
${pdf_title} </a></div></div></div>`;

    $(".chats").append(pdf_attachment);
}

module.exports['renderPdfAttachment'] = renderPdfAttachment;
},{}],71:[function(require,module,exports){
/**
 * appends horizontally placed buttons carousel
 * on to the chat screen
 * @param {Array} quickRepliesData json array
 */
function showQuickReplies(quickRepliesData) {
    let chips = "";
    console.log('quickreplies');
    for (let i = 0; i < quickRepliesData.length; i += 1) {
        console.log(quickRepliesData[i].payload);
        const chip = `<div class="chip" data-payload='${quickRepliesData[i].payload}''>${quickRepliesData[i].title}</div>`;
        chips += chip;
    }

    const quickReplies = `<div class="quickReplies">${chips}</div><div class="clearfix"></div>`;
    $(quickReplies).appendTo(".chats").fadeIn(1000);
    const slider = document.querySelector(".quickReplies");
    let isDown = false;
    let startX;
    let scrollLeft;

    slider.addEventListener("mousedown", (e) => {
        isDown = true;
        slider.classList.add("active");
        startX = e.pageX - slider.offsetLeft;
        scrollLeft = slider.scrollLeft;
    });
    slider.addEventListener("mouseleave", () => {
        isDown = false;
        slider.classList.remove("active");
    });
    slider.addEventListener("mouseup", () => {
        isDown = false;
        slider.classList.remove("active");
    });
    slider.addEventListener("mousemove", (e) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - slider.offsetLeft;
        const walk = (x - startX) * 3; // scroll-fast
        slider.scrollLeft = scrollLeft - walk;
    });
}

module.exports['showQuickReplies'] = showQuickReplies;
},{}],72:[function(require,module,exports){
/**
 *  adds vertically stacked buttons as a bot response
 * @param {Array} suggestions buttons json array
 */
function addSuggestion(suggestions) {
    setTimeout(() => {
        const suggLength = suggestions.length;
        $(
            ' <div class="singleCard"> <div class="suggestions"><div class="menu"></div></div></diV>',
        )
            .appendTo(".chats")
            .hide()
            .fadeIn(1000);
        // Loop through suggestions
        for (let i = 0; i < suggLength; i += 1) {
            $(
                `<div class="menuChips" data-payload='${suggestions[i].payload}'>${suggestions[i].title}</div>`,
            ).appendTo(".menu");
        }
    }, 1000);
}

module.exports['addSuggestion'] = addSuggestion;
},{}],73:[function(require,module,exports){
const action_name = "action_hello_world";
//const rasa_server_url = "http://localhost:5005/webhooks/rest/webhook";
const rasa_server_url = "http://127.0.0.1:8000/rasa/";
//const rasa_server_url = "http://www.sergui-tool.com/rasa/";
const sender_id = uuidv4();


module.exports['constants'] = {
  action_name,
  rasa_server_url,
  sender_id,
};

},{}],74:[function(require,module,exports){
const Konva = require('konva');
const { vars } = require('./vars');
const { guiNodes, layerPlay, stagePlay } = vars;
const { getNextId } = require('./helpers');

function createCustomLabel(
  currentShape,
  addBoxTransitionEventListener,
  extraInformation = null
) {
  let labelText = 'Sample Text';
  let fontSize = 12;
  let fontColor = '#000000';

  if (extraInformation) {
    labelText = extraInformation.text;
    fontSize = extraInformation.fontSize;
    fontColor = extraInformation.textColor;
  }

  //var nodeId = currentShape.getParent().getAttr('id').split('_')[1];
  // Remove guiNode first from the data model
  guiNode = guiNodes.find(
    (n) => n.id == currentShape.getParent().getParent().getAttr('id')
  );
  let currShapeParent = currentShape.getParent();
  var labelGroup = currShapeParent.clone();
  labelGroup.destroyChildren();
  var newId = getNextId(guiNode);
  newId = guiNode['id'] + '_' + newId;
  labelGroup.setAttr('name', newId);
  labelGroup.setAttr('id', newId);
  labelGroup.setAttr('visible', true);

  //create the two children: text and colored box
  let text = new Konva.Text({
    text: labelText,
    id: newId + '_img',
    name: newId + '_img',
    fontSize,
    fill: fontColor,
  });

  //limit the text width
  if (text.width() >= 250) {
    text.width(250);
  }

  if (extraInformation) {
    if (text.width() > extraInformation.width) {
      text.width(extraInformation.width);
    }
  }

  let box = new Konva.Rect({
    x: 0, //normalizedA[0] ,
    y: 0, //normalizedA[1] ,
    width: text.width(),
    height: text.height(),
    stroke_ori: 'gray',
    stroke: 'gray',
    strokeWidth: 2,
    opacity: 0.3,
    //draggable: true,
    id: newId,
    name: newId,
  });

  //set editable on box to true
  box.setAttr('editable', true);

  //box.on('mousedown', (e) => addBoxTransitionEventListener(e, box));

  //add children to group
  labelGroup.add(text);
  labelGroup.add(box);
  var newOffset = extraInformation ? 0 : 20;
  labelGroup.setAttr('x', labelGroup.getAttr('x') + newOffset);
  labelGroup.setAttr('y', labelGroup.getAttr('y') + newOffset);
  labelGroup.width(box.width());
  labelGroup.height(box.height());

  labelGroup.setAttr('isCustom', true);

  //add listener for editing the label
  labelGroup.off('dblclick');
  labelGroup.on('dblclick', function () {
    // at first lets find position of text node relative to the stage:
        var textPosition = this.getAbsolutePosition();

        // then lets find position of stage container on the page:
        var stageBox = stagePlay.container().getBoundingClientRect();

        // so position of textarea will be the sum of positions above:
        var areaPosition = {
          x: stageBox.left + textPosition.x,
          y: stageBox.top + textPosition.y,
        };

        // create textarea and style it
        var textarea = document.createElement('textarea');
        document.body.appendChild(textarea);

        textarea.value = text.getAttr('text');
        textarea.style.position = 'absolute';
        textarea.style.top = areaPosition.y + 'px';
        textarea.style.left = areaPosition.x + 'px';
        textarea.style.width = currShapeParent.width() + 'px';
        textarea.style.height = currShapeParent.height() + 'px';
        textarea.style.backgroundColor = "white";
        textarea.style.resize = "none";
        textarea.style.textAlign = "center";

        textarea.focus();

        textarea.addEventListener('keydown', function (e) {
          // hide on enter
          if (e.keyCode === 13) {
            text.text(textarea.value);
            document.body.removeChild(textarea);
          }
          layerPlay.batchDraw();
        });
  });

  //create and add new uiCompObject to data model
  var uiCompObject1 = guiNode.uiCompObjects.find(
    (n) => n['id'] == currentShape.getAttr('id')
  );
  var newCompObj = Object.assign({}, uiCompObject1);
  newCompObj['id'] = newId;
  newCompObj['comp_label'] = 'CustomLabel';
  newCompObj['plain_json'] = {};
  newCompObj['crop_group'] = labelGroup.clone();
  newCompObj['isBlank'] = false;
  newCompObj['isGroup'] = false;
  //newCompObj['is_CompoundElement'] = false;

  guiNode.uiCompObjects.push(newCompObj);
  var currGroup = currentShape.getParent().getParent();

  currGroup.add(labelGroup);
  // labelGroup.moveToTop();
  //fire these two events in order to display component correctly
  labelGroup.fire('dragstart');
  labelGroup.fire('dragend');
  layerPlay.batchDraw();
  if (extraInformation) {
    labelGroup.fire('dblclick');
  }
}

function getLabelCrop(textParam, fontSize, fontColor, width, height) {
  let text = new Konva.Text({
    text: textParam,
    fontSize: fontSize || 12,
    fill: fontColor || '#000000',
  });

  if (text.getTextWidth() > width) {
    text.width(width);
  }

  if (text.getTextHeight() > height) {
    text.height(height);
  }

  return text;
}

function createCustomButton(
  currentShape,
  addBoxTransitionEventListener,
  extraInformation = null
) {
  let buttonText = 'Sample Text';
  let fontSize = 12;
  let fontColor = '#000000';
  let buttonColor = '#ffffff';

  if (extraInformation) {
    buttonText = extraInformation.text;
    fontSize = extraInformation.fontSize;
    fontColor = extraInformation.textColor;
    buttonColor = extraInformation.buttonColor;
  }

  //var nodeId = currentShape.getParent().getAttr('id').split('_')[1];
  // Remove guiNode first from the data model
  guiNode = guiNodes.find(
    (n) => n.id == currentShape.getParent().getParent().getAttr('id')
  );
  let currShapeParent = currentShape.getParent();
  var buttonGroup = currShapeParent.clone();
  buttonGroup.destroyChildren();
  var newId = getNextId(guiNode);
  newId = guiNode['id'] + '_' + newId;
  buttonGroup.setAttr('name', newId);
  buttonGroup.setAttr('id', newId);
  buttonGroup.setAttr('visible', true);

  buttonGroup.setAttr('isCustom', true);

  //create the children: text, colored box, button background
  let text = new Konva.Text({
    //x: (-1 * buttonExtraWidth) / 2, //normalizedA[0] ,
    //y: (-1 * buttonExtraHeight) / 2, //normalizedA[1] ,
    text: buttonText,
    id: newId + '_img',
    name: newId + '_img',
    fontSize,
    fill: fontColor,
    verticalAlign: 'middle',
    align: 'center',
    // width: buttonExtraWidth,
    // height: buttonExtraHeight,
  });

  let realWidth = text.getTextWidth();
  let realHeight = text.getTextHeight();

  let buttonExtraWidth = realWidth * 2;
  let buttonExtraHeight = realHeight * 3;

  text.width(buttonExtraWidth);
  text.height(buttonExtraHeight);

  //limit the text width
  if (text.width() >= 250) {
    text.width(250);
  }

  if (extraInformation) {
    text.width(extraInformation.width);
    text.height(extraInformation.height);
  }

  // text.x((1 * buttonExtraWidth) / 2);
  // text.y((1 * buttonExtraHeight) / 2);

  let buttonFill = new Konva.Rect({
    //x: (-1 * buttonExtraWidth) / 2, //normalizedA[0] ,
    //y: (-1 * buttonExtraHeight) / 2, //normalizedA[1] ,
    width: text.width(),
    height: text.height(),
    fill: buttonColor,
    cornerRadius: text.width() / 15,
    //draggable: true,
    id: newId + '_img',
    name: newId + '_img',
  });

  if (extraInformation) {
    buttonFill.setAttr('fixedWidth', buttonFill.width());
    buttonFill.setAttr('fixedHeight', buttonFill.height());
  }

  let box = new Konva.Rect({
    x: buttonFill.x(), //normalizedA[0] ,
    y: buttonFill.y(), //normalizedA[1] ,
    width: buttonFill.width(),
    height: buttonFill.height(),
    stroke_ori: 'gray',
    stroke: 'gray',
    strokeWidth: 2,
    opacity: 0.3,
    //draggable: true,
    id: newId,
    name: newId,
  });

  //set editable on box to true
  box.setAttr('editable', true);

  //box.on('mousedown', (e) => addBoxTransitionEventListener(e, box));

  //add children to group
  buttonGroup.add(buttonFill);
  buttonGroup.add(text);

  buttonGroup.add(box);
  var newOffset = extraInformation ? 0 : 20;
  buttonGroup.setAttr('x', buttonGroup.getAttr('x') + newOffset);
  buttonGroup.setAttr('y', buttonGroup.getAttr('y') + newOffset);
  buttonGroup.width(box.width());
  buttonGroup.height(box.height());
  text.setAttr('align', 'center');
  text.setAttr('verticalAlign', 'middle');

  //add listener for editing the label
  buttonGroup.off('dblclick');
  buttonGroup.on('dblclick', function () {
        // at first lets find position of text node relative to the stage:
        var textPosition = this.getAbsolutePosition();

        // then lets find position of stage container on the page:
        var stageBox = stagePlay.container().getBoundingClientRect();

        // so position of textarea will be the sum of positions above:
        var areaPosition = {
          x: stageBox.left + textPosition.x,
          y: stageBox.top + textPosition.y,
        };

        // create textarea and style it
        var textarea = document.createElement('textarea');
        document.body.appendChild(textarea);

        textarea.value = text.getAttr('text');
        textarea.style.position = 'absolute';
        textarea.style.top = areaPosition.y + 'px';
        textarea.style.left = areaPosition.x + 'px';
        textarea.style.width = buttonFill.width() + 'px';
        textarea.style.height = buttonFill.height() + 'px';
        textarea.style.backgroundColor = "white";
        textarea.style.resize = "none";
        textarea.style.textAlign = "center";

        textarea.focus();

        textarea.addEventListener('keydown', function (e) {
          // hide on enter
          if (e.keyCode === 13) {
            text.text(textarea.value);
            document.body.removeChild(textarea);
          }
          layerPlay.batchDraw();
        });
  });

  //create and add new uiCompObject to data model
  var uiCompObject1 = guiNode.uiCompObjects.find(
    (n) => n['id'] == currentShape.getAttr('id')
  );
  var newCompObj = Object.assign({}, uiCompObject1);
  newCompObj['id'] = newId;
  newCompObj['comp_label'] = 'CustomButton';
  newCompObj['plain_json'] = {};
  newCompObj['crop_group'] = buttonGroup.clone();
  newCompObj['isBlank'] = false;
  newCompObj['isGroup'] = false;

  guiNode.uiCompObjects.push(newCompObj);
  var currGroup = currentShape.getParent().getParent();

  currGroup.add(buttonGroup);
  // buttonGroup.moveToTop();
  //fire these two events in order to display component correctly
  // buttonGroup.fire('dragstart');
  // buttonGroup.fire('dragend');

  if (extraInformation) {
    buttonGroup.fire('dblclick');
  }

  layerPlay.batchDraw();

}

function getButtonCrop(
  textParam,
  fontSize,
  fontColor,
  buttonColor,
  width,
  height,
  boxId,
  addBoxTransitionEventListener
) {
  let text = new Konva.Text({
    text: textParam,
    fontSize,
    fill: fontColor,
    verticalAlign: 'middle',
    align: 'center',
    height,
    width,
    id: boxId + '_img',
    name: boxId + '_img',
  });

  let buttonFill = new Konva.Rect({
    width,
    height,
    fill: buttonColor,
    cornerRadius: text.width() / 15,
    id: boxId + '_img',
    name: boxId + '_img',
  });

  buttonFill.setAttr('fixedWidth', width);
  buttonFill.setAttr('fixedHeight', height);

  let box = new Konva.Rect({
    x: buttonFill.x(), //normalizedA[0] ,
    y: buttonFill.y(), //normalizedA[1] ,
    width: buttonFill.width(),
    height: buttonFill.height(),
    stroke_ori: 'green',
    stroke: 'green',
    strokeWidth: 2,
    opacity: 0.3,
    //draggable: true,
    id: boxId,
    name: boxId,
  });

  //set editable on box to true
  box.setAttr('editable', true);

  box.on('mousedown', (e) => addBoxTransitionEventListener(e, box));

  //   let btnGroup = new Konva.Group({
  //     width: buttonFill.width(),
  //     height: buttonFill.height(),
  //   });

  //   btnGroup.add(buttonFill);
  //   btnGroup.add(text);

  //   return btnGroup;
  return [buttonFill, text, box];
}

function createCustomInput(
  currentShape,
  addBoxTransitionEventListener,
  extraInformation = null
) {
  let inputText = 'Sample Text';
  let fontSize = 12;
  let fontColor = '#ffffff';
  let inputColor = '#cccccc';
  let inputSize = 'full';

  if (extraInformation) {
    inputText = extraInformation.text;
    fontSize = extraInformation.fontSize;
    fontColor = extraInformation.textColor;
    inputColor = extraInformation.inputColor;
  }

  //var nodeId = currentShape.getParent().getAttr('id').split('_')[1];
  // Remove guiNode first from the data model
  guiNode = guiNodes.find(
    (n) => n.id == currentShape.getParent().getParent().getAttr('id')
  );
  let currShapeParent = currentShape.getParent();
  var inputGroup = currShapeParent.clone();
  inputGroup.destroyChildren();
  var newId = getNextId(guiNode);
  newId = guiNode['id'] + '_' + newId;
  inputGroup.setAttr('name', newId);
  inputGroup.setAttr('id', newId);
  inputGroup.setAttr('visible', true);

  inputGroup.setAttr('isCustom', true);

  let inputExtraHeight = fontSize * 1.5;

  //map width
  let inputWidthMap = {
    full: 250,
    twoThirds: 167,
    half: 125,
    oneThird: 83,
    fourth: 62,
  };

  let inputWidth = inputWidthMap[inputSize] || 250;

  //create the children: text, colored box, button background
  let text = new Konva.Text({
    text: inputText,
    id: newId + '_img',
    name: newId + '_img',
    fontSize,
    fill: fontColor,
    x: 5,
    verticalAlign: 'middle',
  });

  //limit the text width

  text.width(inputWidth - 10);

  text.height(text.getTextHeight() + inputExtraHeight);

  if (extraInformation) {
    text.width(extraInformation.width);
    text.height(extraInformation.height);
  }

  let inputFill = new Konva.Rect({
    x: 0, //normalizedA[0] ,
    y: 0, //normalizedA[1] ,
    width: inputWidth,
    height: text.height(),
    fill: inputColor,
    opacity: 0.3,
    //draggable: true,
    id: newId + '_img',
    name: newId + '_img',
  });

  inputFill.setAttr('inputSize', inputSize);

  let box = new Konva.Rect({
    x: inputFill.x(), //normalizedA[0] ,
    y: inputFill.y(), //normalizedA[1] ,
    width: inputFill.width(),
    height: inputFill.height(),
    stroke_ori: 'gray',
    stroke: 'gray',
    strokeWidth: 2,
    opacity: 0.3,
    //draggable: true,
    id: newId,
    name: newId,
  });

  //set editable on box to true
  box.setAttr('editable', true);

  box.on('mousedown', (e) => addBoxTransitionEventListener(e, box));

  //add children to group
  inputGroup.add(inputFill);
  inputGroup.add(text);

  inputGroup.add(box);
  var newOffset = extraInformation ? 0 : 20;
  inputGroup.setAttr('x', inputGroup.getAttr('x') + newOffset);
  inputGroup.setAttr('y', inputGroup.getAttr('y') + newOffset);
  inputGroup.width(box.width());
  inputGroup.height(box.height());

  //add listener for editing the label
  inputGroup.off('dblclick');
  inputGroup.on('dblclick', function () {
        // at first lets find position of text node relative to the stage:
        var textPosition = this.getAbsolutePosition();

        // then lets find position of stage container on the page:
        var stageBox = stagePlay.container().getBoundingClientRect();

        // so position of textarea will be the sum of positions above:
        var areaPosition = {
          x: stageBox.left + textPosition.x,
          y: stageBox.top + textPosition.y,
        };

        // create textarea and style it
        var textarea = document.createElement('textarea');
        document.body.appendChild(textarea);

        textarea.value = text.getAttr('text');
        textarea.style.position = 'absolute';
        textarea.style.top = areaPosition.y + 'px';
        textarea.style.left = areaPosition.x + 'px';
        textarea.style.width = inputFill.width() + 'px';
        textarea.style.height = inputFill.height() + 'px';
        textarea.style.backgroundColor = "white";
        textarea.style.resize = "none";
        textarea.style.textAlign = "center";

        textarea.focus();

        textarea.addEventListener('keydown', function (e) {
          // hide on enter
          if (e.keyCode === 13) {
            text.text(textarea.value);
            document.body.removeChild(textarea);
          }
          layerPlay.batchDraw();
        });


  });

  //create and add new uiCompObject to data model
  var uiCompObject1 = guiNode.uiCompObjects.find(
    (n) => n['id'] == currentShape.getAttr('id')
  );
  var newCompObj = Object.assign({}, uiCompObject1);
  newCompObj['id'] = newId;
  newCompObj['comp_label'] = 'CustomInput';
  newCompObj['plain_json'] = {};
  newCompObj['crop_group'] = inputGroup.clone();
  newCompObj['isBlank'] = false;
  newCompObj['isGroup'] = false;

  guiNode.uiCompObjects.push(newCompObj);
  var currGroup = currentShape.getParent().getParent();

  currGroup.add(inputGroup);
  // inputGroup.moveToTop();
  //fire these two events in order to display component correctly
  inputGroup.fire('dragstart');
  inputGroup.fire('dragend');
  if (extraInformation) {
    inputGroup.fire('dblclick');
  }
  layerPlay.batchDraw();

}

function getInputCrop(
  textParam,
  fontSize,
  fontColor,
  inputColor,
  width,
  height
) {
  let text = new Konva.Text({
    text: textParam,
    width,
    height,
    fontSize,
    fill: fontColor,
    x: 5,
    verticalAlign: 'middle',
  });

  let inputFill = new Konva.Rect({
    x: 0, //normalizedA[0] ,
    y: 0, //normalizedA[1] ,
    width,
    height: text.height(),
    fill: inputColor,
    opacity: 0.3,
  });

  return [inputFill, text];
}

module.exports = {
  createCustomLabel,
  getLabelCrop,
  createCustomButton,
  getButtonCrop,
  createCustomInput,
  getInputCrop,
};

},{"./helpers":76,"./vars":79,"konva":45}],75:[function(require,module,exports){
const {
  getUICompObjects,
  addGUIToKonva,
  addTransitionToKonva,
} = require('./konvaWireframing');
const { 
   generateID,
   showGUIButtons,
   hideGUIButtons,
   showGUISummaryButton,
 } = require('./helpers');
const { vars } = require('./vars');
var {
  isEditModeOn,
  showUICinPreview,
  currentSelectedComp,
  guiNodes,
  transitions,
  userSetStartNodeId,
  importHelper,
  currentShownGUINode,
  currentGUIReqSummary,
  baseURL
} = vars;

const {
  updateModalAdditionalRequirements,
  updateModalGUINodes,
  renderGUIReqSummaryModal2,
  addKonvaImageAndFeatureForSummaryRendering,
  addAspectGUIsForPDFSummary
} = require('../rasa/components/guiRankingData')


const {
  send,
  showBotTyping
} = require('../rasa/components/chat')

function getDataFromJson(url, callback) {
  return fetch(url)
    .then((res) => res.json())
    .then((jsonData) => callback(readJSON(jsonData)));
}

async function fetchJSONDataFromIndex(
  image,
  index,
  x,
  y,
  editable,
  extended,
  blank
) {
  if (extended || editable) {
    let returnVal = await Promise.all([
      fetch(
        `${baseURL}/combined/${index}.json`
      ).then((response) => response.json()),

      fetch(
        `${baseURL}/semantic_annotations/${index}.json`
      ).then((response) => {
        return response.json();
      }),
      fetch(
        `${baseURL}/combined_extended/${index}.json`
      ).then((response) => {
        // console.log(response);
        return response ? response.json() : null;
      }),
    ]).then((responses) =>
      fetchAllResponses(index, image, responses, x, y, editable, blank)
    );
    return returnVal;
  } else {
    return Promise.all([
      fetch(
        `${baseURL}/combined/${index}.json`
      ).then((response) => response.json()),

      fetch(
        `${baseURL}/semantic_annotations/${index}.json`
      ).then((response) => response.json()),
    ]).then((responses) =>
      fetchAllResponses(index, image, responses, x, y, editable, blank)
    );
  }
}


function fetchAllResponses(
  index,
  image,
  responses,
  x,
  y,
  editable,
  blank = false
) {
  jsonDataCombined = responses[0];
  jsonDataCombinedExtended = responses[2];
  jsonDataSemantic = responses[1];
  // console.log(responses);
  console.log(`Image width: ${image.width}, height: ${image.height}`);
  console.log(`JSON data combined : ${jsonDataCombined}`);
  console.log(`JSON data semantic : ${jsonDataSemantic}`);
  uiCompObjects = getUICompObjects(
    jsonDataCombined,
    jsonDataSemantic,
    jsonDataCombinedExtended
  );
  let bgColor = jsonDataCombinedExtended
    ? jsonDataCombinedExtended.bg_color
    : null;
    console.log(`ui-comp-objects: ${uiCompObjects.length}`)
    // If there are already gui nodes in the model we want to create transition
    //if (guiNodes.length > 4) {
    //    if (isEditModeOn.value) {
     //     if (currentSelectedComp.value) {
      //      // There is a currently selected ui comp we first create a new gui node
       //     console.log(`currentselc: ${currentSelectedComp.value.getAttr('id')}`);
        //    console.log(`setting current shown gui: ${guiNodes[0].id}`)
       //     guiNode = createGUINode(index, image, uiCompObjects, editable, bgColor);
      //      guiNodes.push(guiNode);
       //     currentShownGUINode.value = guiNode
            // Afterwards we use the new gui node to create a new transition
      //      transition = createTransition(guiNode, currentSelectedComp);
      //      transitions.push(transition);
      //      addGUIToKonva(guiNode);
      //      addTransitionToKonva(transition);
      //      showBotTyping();
       //     $(".quickReplies").remove();
       //     wireframe = getWireframe();
         //   send(`/gui_selected{"current_selected_gui_id": "${guiNode.id}", "current_transition": ${JSON.stringify(transition)}, "current_wireframe": ${JSON.stringify(wireframe)}}`);
        //    showGUIButtons();
        //    currentSelectedComp.value = null;
       //   }
        //}
    //} 
    // If no gui node yet in the data model, we initialze it and select it as start
    //else {



      guiNode = createGUINode(index, image, uiCompObjects, editable, bgColor, currentGUIReqSummary.value);
      guiNodes.push(guiNode);
      showGUISummaryButton();
      if (guiNodes.length>1) {
        showGUIButtons();
      }
      currentShownGUINode.value = guiNode
      userSetStartNodeId['id'] = guiNode.id
      console.log(`User set ${userSetStartNodeId.id} as the start node`);
      addGUIToKonva(guiNode);
      addAspectGUIsForPDFSummary(currentGUIReqSummary.value['aspect_guis']);
      //showBotTyping();
      //$(".quickReplies").remove();
      $("#container-konva-player").attr('style','border-style:solid;border-color:#22262a;');
      //wireframe = getWireframe();
     // send(`/gui_selected{"current_selected_gui_id": "${guiNode.id}", "current_transition": "None", "current_wireframe": ${JSON.stringify(wireframe)} }`);
//    }
}

function getWireframe() {
   return {'gui_nodes': guiNodes.map(gn => gn.id), 'transitions': transitions}
}

function createGUINode(index, image, uiCompObjects, editable, bgColor, summary) {
    return {
        id: 'gui_' + index,
        index: index,
        x: 0,
        y: 0,
        image: image,
        uiCompObjects: uiCompObjects,
        editable: editable,
        customBgColor: bgColor,
        uiCompGroups: null,
        summary: summary,
      };
}


function createTransition(guiNode, currentSelectedComp) {
    return {
        fromGUI: currentSelectedComp.value.getAttr('id'),
        from: currentSelectedComp.value.getAttr('id'),
        to: guiNode.id,
        id: `${currentSelectedComp.value.getAttr('id')}==>${guiNode.id}`,
  };
}

function addGUIToEditor(
  index,
  x = 0,
  y = 0,
  editable = false,
  extended = false,
  blank = false
) {
  var newImg = new Image();
  newImg.onload = function () {
    //importHelper.guisInitialized.push(index);
    fetchJSONDataFromIndex(this, index, x, y, editable, extended, blank);
  };
  newImg.src = `${baseURL}/combined/${index}.jpg`;
}

function fetchSearchResults(query, method, qe_method, max_results) {
  return fetch(
    'http://sergui-tool.com/gui2r/v1/retrieval',
    {
      method: 'post',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: query,
        method: method,
        qe_method: qe_method,
        max_results: max_results,
      }),
    }
  )
    .then((res) => res.json())
    .then((res) => appendAllSearchResults(res));
}

function appendAllSearchResults(results) {
  ranked_documents = results['results'];
  searchResultCards = ranked_documents.map((doc) =>
    searchResultCard(doc['index'], doc['rank'], doc['score'])
  );
  $('#container-search-results').append(searchResultCards);
}

function searchResultCard(index, rank, conf) {
  return `<div class="col-lg-4 col-md-6 col-6" style="margin-bottom:20px">
      <div style="padding:8px;background-color:#E3E5ED" class="card mb-3 box-shadow">
      <p style="font-size:10px;font-weight:bold;text-align:center;margin-bottom:3px">${rank}.</p>
      <img class="card-img-top myImages" id="myImg-${index}" src=  "${baseURL}/combined/${index}.jpg" draggable="true" alt="GUI ${index}">
            <button id="btn-gui-add-${index}" data-val="${index}" class="btn btn-success p-0" style="width:100%" type="submit">+</button>
  
          </div>`;
}

module.exports['fetchJSONDataFromIndex'] = fetchJSONDataFromIndex;
module.exports['addGUIToEditor'] = addGUIToEditor;
module.exports['fetchSearchResults'] = fetchSearchResults;

},{"../rasa/components/chat":66,"../rasa/components/guiRankingData":69,"./helpers":76,"./konvaWireframing":77,"./vars":79}],76:[function(require,module,exports){
const { vars } = require('./vars');
var { layer, importHelper } = vars;

function arraysEqual(
  a = importHelper.guisLoaded,
  b = importHelper.guisInitialized
) {
  console.log(a, b);
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length !== b.length) return false;
  if (a.length === 0 && b.length === 0) return false;

  a.sort((c, d) => c - d);
  b.sort((c, d) => c - d);

  for (var i = 0; i < a.length; ++i) {
    if (a[i] != b[i]) return false;
  }
  return true;
}

function generateID(ricoID) {
  let id = ricoID;
  let amount = vars.guiNodes.filter((node) => node.index == ricoID).length;
  return id + '-' + amount;
}

const rgbToHex = (r, g, b) =>
  '#' +
  [r, g, b]
    .map((x) => {
      const hex = x.toString(16);
      return hex.length === 1 ? '0' + hex : hex;
    })
    .join('');

function modeI(array) {
  if (array.length == 0) return null;
  var modeMap = {};
  var maxEl = array[0],
    maxCount = 1;
  for (var i = 0; i < array.length; i++) {
    var el = array[i];
    if (modeMap[el] == null) modeMap[el] = 1;
    else modeMap[el]++;
    if (modeMap[el] > maxCount) {
      maxEl = el;
      maxCount = modeMap[el];
    }
  }
  return maxEl;
}

function haveIntersection(r1, r2) {
  return !(
    r2.x > r1.x + r1.width ||
    r2.x + r2.width < r1.x ||
    r2.y > r1.y + r1.height ||
    r2.y + r2.height < r1.y
  );
}

function getArrowPoints(fromNode, toNode) {
  fromNodeParent = fromNode.getParent();
  x1 = fromNodeParent.getX() + fromNode.getX();
  y1 = fromNodeParent.getY() + fromNode.getY() + fromNode.getAttr('height') / 2;
  toNodeImgNode = layer.findOne(`#${toNode.getAttr('id')}_img`);
  x2 = toNode.getX();
  y2 =
    toNode.getY() +
    toNodeImgNode.getAttr('scaleY') * (toNodeImgNode.getAttr('height') / 2);
  if (x1 >= x2) {
    x2 = x2 + toNodeImgNode.getAttr('scaleX') * toNodeImgNode.getAttr('width');
  } else {
    x1 = x1 + fromNode.getAttr('width');
  }
  if (
    y1 +
      toNodeImgNode.getAttr('scaleY') * (toNodeImgNode.getAttr('height') / 2) >=
    y2
  ) {
    y1 = fromNodeParent.getY() + fromNode.getY();
    x1 =
      fromNodeParent.getX() + fromNode.getX() + fromNode.getAttr('width') / 2;
    y2 =
      toNode.getY() +
      toNodeImgNode.getAttr('scaleY') * toNodeImgNode.getAttr('height');
    x2 =
      toNode.getX() +
      toNodeImgNode.getAttr('scaleX') * (toNodeImgNode.getAttr('width') / 2);
  } else if (
    y1 +
      toNodeImgNode.getAttr('scaleY') * (toNodeImgNode.getAttr('height') / 2) >=
    y2
  ) {
    x2 =
      toNode.getX() +
      toNodeImgNode.getAttr('scaleX') * (toNodeImgNode.getAttr('width') / 2);
    y2 = toNode.getY();
    x1 =
      fromNodeParent.getX() + fromNode.getX() + fromNode.getAttr('width') / 2;
    y1 = fromNodeParent.getY() + fromNode.getY() + fromNode.getAttr('height');
  }
  //console.log([x1, y1, x2, y2]);
  return [x1, y1, x2, y2];
}

function getArrowPoints2(fromNode, toNode) {
  /* if (toNode.getAttr('editable')) {
          toNode = toNode.getParent();
      } */
  // FromNode x,y,width,height values
  fromNodeParent = fromNode.getParent();
  fromNodeX = fromNodeParent.getX() + fromNode.getX();
  fromNodeY = fromNodeParent.getY() + fromNode.getY();
  fromNodePoints = computeCenterPoints(
    fromNodeX,
    fromNodeY,
    fromNode.getAttr('width'),
    fromNode.getAttr('height')
  );
  // ToNode x,y,width,height values
  toNodeImgNode = layer.findOne(`#${toNode.getAttr('id')}_img`);
  toNodeWidth =
    toNodeImgNode.getAttr('width') * toNodeImgNode.getAttr('scaleX');
  toNodeHeight =
    toNodeImgNode.getAttr('height') * toNodeImgNode.getAttr('scaleY');
  toNodePoints = computeCenterPoints(
    toNode.getX(),
    toNode.getY(),
    toNodeWidth,
    toNodeHeight
  );
  // Compute pairwise distances between center points
  minDist = Number.MAX_SAFE_INTEGER;
  minFromPoint = undefined;
  minToPoint = undefined;
  for (i = 0; i < fromNodePoints.length; i++) {
    for (j = 0; j < toNodePoints.length; j++) {
      fromP = fromNodePoints[i];
      toP = toNodePoints[j];
      dist = computePointDistance(fromP[0], fromP[1], toP[0], toP[1]);
      if (dist <= minDist) {
        minDist = dist;
        minFromPoint = fromP;
        minToPoint = toP;
      }
    }
  }
  return [minFromPoint[0], minFromPoint[1], minToPoint[0], minToPoint[1]];
}

function computeCenterPoints(x, y, width, height) {
  p1 = [x + width / 2, y];
  p2 = [x, y + height / 2];
  p3 = [x + width, y + height / 2];
  p4 = [x + width / 2, y + height];
  return [p1, p2, p3, p4];
}

function computePointDistance(x1, y1, x2, y2) {
  var a = x1 - x2;
  var b = y1 - y2;
  return Math.sqrt(a * a + b * b);
}

function getNextId(node) {
  if (node.uiCompObjects.length <= 0) return 0;

  var idMapping = node.uiCompObjects.map((c) =>
    parseInt(c['id'].split('_')[2])
  );

  //console.log(`All ids of node ${node['id']}: ${idMapping}`);
  var nextId = Math.max.apply(null, idMapping) + 1;

  //console.log(`Next id: ${nextId}`);
  return nextId;
}

// module.exports['rgbToHex'] = rgbToHex;
// module.exports['modeI'] = modeI;
// module.exports['haveIntersection'] = haveIntersection;
// module.exports['getArrowPoints'] = getArrowPoints;
// module.exports['getArrowPoints2'] = getArrowPoints2;
// module.exports['computeCenterPoints'] = computeCenterPoints;
// module.exports['computePointDistance'] = computePointDistance;
// module.exports['getNextId'] = getNextId;
// module.exports['generateID'] = generateID;


function showGUIButtons() {
  $('#btn-view-summary').attr('style', 'display:block');
   $('#gui-previous-button').attr('style', 'display:block');
   $('#gui-next-button').attr('style', 'display:block');
}

function hideGUIButtons() {
   $('#btn-view-summary').attr('style', 'display:none');
   $('#gui-previous-button').attr('style', 'display:none');
   $('#gui-next-button').attr('style', 'display:none');
}

function showGUISummaryButton() {
  $('#btn-view-summary').attr('style', 'display:block');
    $('#btn-pdf').attr('style', 'display:block');
}

function hideGUISummaryButton() {
   $('#btn-view-summary').attr('style', 'display:none');
      $('#btn-pdf').attr('style', 'display:none');
}

module.exports = {
  rgbToHex,
  modeI,
  haveIntersection,
  getArrowPoints,
  getArrowPoints2,
  computeCenterPoints,
  computePointDistance,
  getNextId,
  generateID,
  arraysEqual,
  showGUIButtons,
  hideGUIButtons,
  hideGUISummaryButton,
  showGUISummaryButton,
};

},{"./vars":79}],77:[function(require,module,exports){
const {JSONPath} = require('jsonpath-plus');

const { vars } = require('./vars');
var {
  showUICinPreview,
  isEditModeOn,
  width,
  height,
  currentSelectedComp,
  guiNodes,
  transitions,
  blockSnapSize,
  userSetStartNodeId,
  guiStack,
  importHelper,
  stagePlay,
  layerPlay,
  currentShownGUINode,
  MAX_PLAYER_SCALE,
  scalePlayer,
} = vars;

const {
  getLabelCrop,
  getButtonCrop,
  getInputCrop,
  createCustomButton,
  createCustomInput,
  createCustomLabel,
} = require('./createCustomComps');

const {
  rgbToHex,
  modeI,
  haveIntersection,
  getArrowPoints2,
  getNextId,
  generateID,
  showGUIButtons,
  hideGUIButtons,
  hideGUISummaryButton
} = require('./helpers');

const colorThief = new ColorThief();

function computeScaling(width) {
    const WIDTH_CORRECTION = 110;
    konvaWrapperWidth = $('#konva-player-wrapper').width()
    konvaWrapperHeight = $('#konva-player-wrapper').height();
    console.log('scaling konva player wrapper width and height');
    console.log(konvaWrapperWidth);
    console.log(konvaWrapperHeight);
    return (konvaWrapperWidth-WIDTH_CORRECTION) / width;
}


function createWireframingPlayer2() {  
// Create a new Konva group for each of the guinodes
   for (j = 0; j < guiNodes.length; j++) {
    guiNode = guiNodes[j];
    // Create the Konva Group to capture all Konva objects for this GUI
    var groupPlay = new Konva.Group({name: guiNode.id, id: guiNode.id,});
    // Create the Konva image to visualize the GUI screenshot
    var imgNodePlay = new Konva.Image({x: 0,y: 0, image: guiNode.image,
      width: guiNode.image.width * (540 / guiNode.image.width),
      height: guiNode.image.height * (540 / guiNode.image.width),
      id: guiNode.id + '_img', name: guiNode.id + '_img',
    });
    // Update the width and height of the konva objects
    var realWidth = imgNodePlay.getAttr('width') * imgNodePlay.getAttr('scaleX');
    var realHeight = imgNodePlay.getAttr('height') * imgNodePlay.getAttr('scaleY');
    // Compute the scaling factor to obtain adapted konva sizes
    var scalePlayerContainer;
    console.log(`scaleplayer var: ${scalePlayer.value}`); 
    if (scalePlayer.value) {
        scalePlayerContainer = scalePlayer.value;
    } else {
        scalePlayerContainer = computeScaling(realWidth);
        scalePlayer.value = scalePlayerContainer;
    }
    // Update the width and height using the scaling factor
    var updatedWidth = realWidth * scalePlayerContainer
    var updatedHeight = realHeight * scalePlayerContainer
    imgNodePlay.width(updatedWidth);
    imgNodePlay.height(updatedHeight);
    stagePlay.width(updatedWidth);
    stagePlay.height(updatedHeight);
    console.log('here is the width')
    console.log($('#konva-player-wrapper').width());
        console.log('here is the height')
    console.log($('#konva-player-wrapper').height());
    // Set the width and height of the actual HTML container with the updated sizes
    $('#container-konva-player').width(updatedWidth).height(updatedHeight);

    // Create a konva group  and related objects for each ui comp
    for (let i = 0; i < guiNode.uiCompObjects.length; i++) {
  	  
      // Current ui comp object
      currUICompObject = guiNode.uiCompObjects[i];
      comp_bounds = currUICompObject['comp_bounds'];
      comp_label = currUICompObject['comp_label'];
      // Scale the bounds of the ui comp using the scaling factor
      let a = comp_bounds;
      let factor = (1440 / guiNode.image.width) * (guiNode.image.width / 540) * (1 / scalePlayerContainer);
      normalizedA = a.map(function (x) {
        return x / factor;
      });
      let width = normalizedA[2] - normalizedA[0];
      let height = normalizedA[3] - normalizedA[1];
      // Set stroke color depending on type and if set
      if (showUICinPreview.value) {
        stroke_color = component_color_mapping[comp_label] || 'black';
      } else {
        stroke_color = undefined;
      }

      // Create the bounding box konva rect for the ui comp object
      var name = currUICompObject.id;
      name = `${guiNode.id}_${i}`;
      var box2Play = new Konva.Rect({x: normalizedA[0], y: normalizedA[1], width: width, height: height,
          stroke_ori: stroke_color, stroke: stroke_color, strokeWidth: 2, opacity: 0.2, id: name, name: name});
      groupPlay.add(box2Play);
      addBox2PlayEventHandlers(box2Play);
    }
  // To each GUI add back button and add the GUI group to the layer
  addBackButton(layerPlay, groupPlay, guiNode, scalePlayerContainer);
  groupPlay.add(imgNodePlay);
  imgNodePlay.setZIndex(0);
  layerPlay.add(groupPlay);
  }
// Add the layer to the konva stage
stagePlay.add(layerPlay);
// Set the start node of the GUI preview player
if (!jQuery.isEmptyObject(userSetStartNodeId)) {
	   var startNode = layerPlay.findOne(`#${userSetStartNodeId.id}`);
	   layerPlay.children.forEach((c) => {console.log(c.getAttr('id'))});
		if (startNode) {
		  startNode.moveToTop();
  	 	}
  	} 
  // Redraw entire Konva player again
  layerPlay.batchDraw();
}

function getBackgroundRectangle(guiNode, imgNodePlay) {
    var detectedColor = colorThief.getColor(guiNode.image);
    //console.log(`DETECTED COLOR : ${detectedColor}`);
    var detextedHexColor = rgbToHex(
        detectedColor[0],
        detectedColor[1],
        detectedColor[2]
    );
    //console.log(`DETECTED HEXCOLOR : ${detextedHexColor}`);
    var backRect1 = new Konva.Rect({
        x: imgNodePlay.x(),
        y: imgNodePlay.y(),
        width: imgNodePlay.width(),
        height: imgNodePlay.height(),
        //stroke_ori: '#394046',
        //stroke: '#394046',
        //strokeWidth: 2,
        fill: !guiNode.blank ? detextedHexColor : '#ffffff',
        opacity: 1,
        //draggable: true,
        id: guiNode.id + '_back_rec',
        name: guiNode.id + '_back_rec',
    });
    if (guiNode.customBgColor && !guiNode.blank) {
      backRect1.setAttr('fill', guiNode.customBgColor);
    }
    return backRect1;
}


function getCroppedComponent(
  darthNode,
  image,
  x1,
  y1,
  width1,
  height1,
  x2,
  y2,
  width2,
  height2,
  draggable
) {
  var imgNodeClone = darthNode.clone();
  imgNodeClone.setAttr('draggable', draggable);
  //group.add(imgNodeClone);
  //imgNodeClone.moveToTop();
  // set crop

  imgNodeClone.setAttr('x', x1);
  imgNodeClone.setAttr('y', y1);
  imgNodeClone.setAttr('width', width1);
  imgNodeClone.setAttr('height', height1);

  var crop = imgNodeClone.crop({
    x: x2,
    y: y2,
    width: width2, //* (1/imgNodeClone.getAttr('scaleX')), //unnormWidth * scaling_factor * (image.width/540), //width * (1/imgNodeClone.getAttr('scaleX')),
    height: height2, ///* (1/imgNodeClone.getAttr('scaleY')),//unnormHeight * scaling_factor * (image.width/540), //height * (1/imgNodeClone.getAttr('scaleY')),
  });

  /* console.log(`IMAGE PROB ori image : w: ${image.width}, h: ${image.height}`);
              console.log(`IMAGE PROB darth image : w: ${darthNode.getAttr('width')}, h: ${darthNode.getAttr('height')}`);
              console.log(`IMAGE PROB clone image : w: ${imgNodeClone.getAttr('width')}, h: ${imgNodeClone.getAttr('height')}`);
              console.log(`IMAGE PROB clone image : w: ${imgNodeClone.getAttr('width')}, h: ${imgNodeClone.getAttr('height')}`); */

  /* crop.setAttr('x', normalizedA[0]);
              crop.setAttr('y', normalizedA[1]);
              crop.setAttr('width', width * (1/imgNodeClone.getAttr('scaleX')))
              crop.setAttr('height', height * (1/imgNodeClone.getAttr('scaleY'))) */
  return crop;
}

function addGUIToKonva(guiNode) {

    var scalingPlayer = 1.0;
    var scaling_factor = 1.0;
    // Create the Konva Group to capture all Konva objects for this GUI
    var groupPlay = new Konva.Group({name: guiNode.id, id: guiNode.id, master: true});
    // Create the Konva image to visualize the GUI screenshot
    var imgNodePlay = new Konva.Image({x: 0,y: 0, image: guiNode.image,
      width: guiNode.image.width * (540 / guiNode.image.width),
      height: guiNode.image.height * (540 / guiNode.image.width),
      id: guiNode.id + '_img', name: guiNode.id + '_img',
    });

    // Update the width and height of the konva objects
    var realWidth = imgNodePlay.getAttr('width') * imgNodePlay.getAttr('scaleX');
    var realHeight = imgNodePlay.getAttr('height') * imgNodePlay.getAttr('scaleY');
    // Compute the scaling factor to obtain adapted konva sizes
    var scalePlayerContainer;
    if (scalePlayer.value) {
        scalePlayerContainer = scalePlayer.value;
    } else {
        scalePlayerContainer = computeScaling(realWidth);
        if (scalePlayerContainer >= MAX_PLAYER_SCALE) {
            scalePlayerContainer = MAX_PLAYER_SCALE;
        }
        scalePlayer.value = scalePlayerContainer;
    }
        console.log('here is the width')
    console.log($('#konva-player-wrapper').width());
        console.log('here is the height')
    console.log($('#konva-player-wrapper').height());
    // Update the width and height using the scaling factor
    var updatedWidth = realWidth * scalePlayerContainer
    var updatedHeight = realHeight * scalePlayerContainer
    imgNodePlay.width(updatedWidth);
    imgNodePlay.height(updatedHeight);
    stagePlay.width(updatedWidth);
    stagePlay.height(updatedHeight);
    console.log(updatedWidth);
    console.log(updatedHeight);
    // Set the width and height of the actual HTML container with the updated sizes
    $('#container-konva-player').width(updatedWidth).height(updatedHeight);

    // Construct the background rectangle, action bar and menu bar first
    // First add the background replacing rectangle
    backRect1 = getBackgroundRectangle(guiNode, imgNodePlay);
    groupPlay.add(backRect1);

      // Second include the action bar
      let factor =
        (1440 / guiNode.image.width) *
        (1 / scaling_factor) *
        (guiNode.image.width / 540) *
        (1 / scalePlayerContainer);
      var abarloc = [0, 0, 1440, 84].map(function (x) {
        return x / factor;
      });
      var abarwidth = abarloc[2] - abarloc[0];
      var abarheight = abarloc[3] - abarloc[1];
      var croppedActionBar = getCroppedComponent(
        imgNodePlay,
        guiNode.image,
        abarloc[0],
        abarloc[1],
        abarwidth,
        abarheight,
        abarloc[0] *
          (1 / scaling_factor) *
          (guiNode.image.width / 540) *
          (1 / scalePlayerContainer),
        abarloc[1] *
          (1 / scaling_factor) *
          (guiNode.image.width / 540) *
          (1 / scalePlayerContainer),
        abarwidth *
          (1 / scaling_factor) *
          (guiNode.image.width / 540) *
          (1 / scalePlayerContainer),
        abarheight *
          (1 / scaling_factor) *
          (guiNode.image.width / 540) *
          (1 / scalePlayerContainer),
        false
      );

      croppedActionBar.setAttr('comp_label', 'action_bar');
      croppedActionBar.setAttr('name', guiNode.id + '_action_bar');
      croppedActionBar.setAttr('id', guiNode.id + '_action_bar');
      groupPlay.add(croppedActionBar);
      croppedActionBar.moveToTop();
      croppedActionBar.on('mousedown', function () {
        //console.log(this.getAttr('comp_label'));
      });
      // Third include the menu bar
      var menuloc = [0, 2393, 1440, 2560].map(function (x) {
        return x / factor;
      });
      var menuwidth = menuloc[2] - menuloc[0];
      var menuheight = menuloc[3] - menuloc[1];
      var cropppedMenu = getCroppedComponent(
        imgNodePlay,
        guiNode.image,
        menuloc[0],
        menuloc[1],
        menuwidth,
        menuheight,
        menuloc[0] *
          (1 / scaling_factor) *
          (guiNode.image.width / 540) *
          (1 / scalePlayerContainer),
        menuloc[1] *
          (1 / scaling_factor) *
          (guiNode.image.width / 540) *
          (1 / scalePlayerContainer),
        menuwidth *
          (1 / scaling_factor) *
          (guiNode.image.width / 540) *
          (1 / scalePlayerContainer),
        menuheight *
          (1 / scaling_factor) *
          (guiNode.image.width / 540) *
          (1 / scalePlayerContainer),
        false
      );

      cropppedMenu.setAttr('comp_label', 'menu');
      cropppedMenu.setAttr('name', guiNode.id + '_menu');
      cropppedMenu.setAttr('id', guiNode.id + '_menu');
      groupPlay.add(cropppedMenu);
      //cropppedMenu.moveToBottom();
      //cropppedMenu.moveToTop();
      /* cropppedMenu.on('mousedown', function() {
                          console.log(this.getAttr('comp_label'));
                      }); */
      imgNodePlay.visible(false);
      groupPlay.add(imgNodePlay);



    // For each of the ui comp objects create a group and add the crop and bounding box
    for (let i = 0; i < guiNode.uiCompObjects.length; i++) {
      currUICompObject = guiNode.uiCompObjects[i];
      if (currUICompObject.is_CompoundElement) continue;
      comp_bounds = currUICompObject['comp_bounds'];
      comp_label = currUICompObject['comp_label'];
      let a = comp_bounds;
      let factor =
        (1440 / guiNode.image.width) *
        (1 / scaling_factor) *
        (guiNode.image.width / 540) *
        (1 / scalePlayerContainer);
      //console.log(`DRAWER factor :  ${factor}`);
      normalizedA = a.map(function (x) {
        return x / factor;
      });
      //console.log(`From drawer arr: ${a}, normArr: ${normalizedA}`);
      let width = normalizedA[2] - normalizedA[0];
      let height = normalizedA[3] - normalizedA[1];
       if (showUICinPreview.value) {
        stroke_color = component_color_mapping[comp_label] || 'black';
        stroke_color = 'blue';
      } else {
        stroke_color = undefined;
      }
      name = `${guiNode.id}_${i}`;
      guiNode.uiCompObjects[i]['id'] = name;
      //console.log(`idname: ${name}`);

      if (currUICompObject.isGroup) {
              stroke_color = 'black';
            } else if (currUICompObject.isCustom) {
              stroke_color = 'green';
            }
      if (!showUICinPreview.value) {
          stroke_color = undefined;
      }      
            var crop =
              !currUICompObject.isGroup && !guiNode.isBlank
                ? getCroppedComponent(
                    imgNodePlay,
                    guiNode.image,
                    normalizedA[0],
                    normalizedA[1],
                    width,
                    height,
                    normalizedA[0] *
                      (1 / scaling_factor) *
                      (guiNode.image.width / 540) *
                      (1 / scalePlayerContainer),
                    normalizedA[1] *
                      (1 / scaling_factor) *
                      (guiNode.image.width / 540) *
                      (1 / scalePlayerContainer),
                    width *
                      (1 / scaling_factor) *
                      (guiNode.image.width / 540) *
                      (1 / scalePlayerContainer),
                    height *
                      (1 / scaling_factor) *
                      (guiNode.image.width / 540) *
                      (1 / scalePlayerContainer),
                    false
                  )
                : new Konva.Rect({
                    x: normalizedA[0],
                    y: normalizedA[1],
                    width: width,
                    height: height,
                    fill: currUICompObject.bg_color || '#ffffff',
                  });
            crop.setAttr('comp_label', comp_label);
            crop.setAttr('x', 0);
            crop.setAttr('y', 0);
            crop.visible(true);
            //group.add(crop);

            /* crop.on('mousedown', function() {
                              console.log(this.getAttr('comp_label'));
                          }); */
            // Create a rectangle for the component

            var box2Play = new Konva.Rect({
              x: 0, //normalizedA[0] ,
              y: 0, //normalizedA[1] ,
              width: width,
              height: height,
              stroke_ori: stroke_color,
              stroke: stroke_color,
              strokeWidth: 2,
              opacity: 0.3,
              //draggable: true,
              id: name,
              name: name,
            });

            //addBox2PlayClickEventHandlers(box2Play);

            //Use the updated comp positions to change the group position
            updated_comp_bounds = currUICompObject['updated_comp_bounds'];
            let a1 = updated_comp_bounds;
            let factor1 =
              (1440 / guiNode.image.width) *
              (1 / scaling_factor) *
              (guiNode.image.width / 540) *
              (1 / scalePlayerContainer);
            //console.log(`DRAWER factor :  ${factor1}`);
            normalizedA1 = a1.map(function (x) {
              return x / factor1;
            });
            //console.log(`From drawer arr: ${a}, normArr: ${normalizedA1}`);
            let width1 = normalizedA1[2] - normalizedA1[0];
            let height1 = normalizedA1[3] - normalizedA1[1];

            var compGroup = new Konva.Group({
              draggable: true,
              id: name,
              name: name,
              x: normalizedA1[0],
              y: normalizedA1[1],
              width: width1,
              height: height1,
              id: name,
              name: name,
            });
            compGroup.setAttr('editable', true);
           // console.log(`name: ${name}`);
            //console.log(`compgroup: ${JSON.stringify(compGroup)}`);
            //set correct id for text
            // if (comp_label === 'CustomLabel') {
            //   let cropId = crop.getAttr('id');
            //   crop.setAttr('id', cropId + '_text');
            //   crop.setAttr('name', cropId + '_text');
            // }
            // console.log('%c crop', 'background-color: green; padding: 4rem;');
            // console.log(crop);
            // if (crop && crop.getClassName() === 'Text') {
            //   let fontsize = crop.getAttr('fontSize');

            //   crop.setAttr('fontSize', fontsize * 1.25);
            // }


            // Create listeners for the custom components
            if (currUICompObject.isCustom) {
               stroke_color = 'black';
               if (currUICompObject.comp_label === 'Text Button') {
                  compGroup.setAttr('isStillCrop', true);
                  compGroup.setAttr('extraInformation', {
                    ...currUICompObject.extraInformation,
                    width,
                    height,
                    idToRemove: currUICompObject['id'],
                  });
                  compGroup.on('dblclick', function () {
                    if (this.getAttr('isStillCrop')) {
                      createCustomButton(
                        this.getChildren()[1],
                        addBoxTransitionEventListener,
                        this.getAttr('extraInformation')
                      );

                      this.destroy();
                      let idToRemove = this.getAttr(
                        'extraInformation'
                      ).idToRemove.split('_');
                      idToRemove = idToRemove[0] + '_' + idToRemove[1];
                      let nodeToDestroy = guiNodes.find((g) => g.id === idToRemove);
                      if (nodeToDestroy) {
                        let compToDestroy = nodeToDestroy.uiCompObjects.find(
                          (c) => c.id === this.getAttr('extraInformation').idToRemove
                        );
                        let indexToDestroy = nodeToDestroy.uiCompObjects.indexOf(
                          compToDestroy
                        );
                        nodeToDestroy.uiCompObjects.splice(indexToDestroy, 1);
                      }

                      layerPlay.batchDraw();

                      return;
              }
            });
            // isComplexComp = true;
          } else if (currUICompObject.comp_label === 'Text') {
            compGroup.setAttr('isStillCrop', true);
            compGroup.setAttr('extraInformation', {
              ...currUICompObject.extraInformation,
              width,
              height,
              idToRemove: currUICompObject['id'],
            });
            compGroup.on('dblclick', function () {
              if (this.getAttr('isStillCrop')) {
                createCustomLabel(
                  this.getChildren()[1],
                  addBoxTransitionEventListener,
                  this.getAttr('extraInformation')
                );

                this.destroy();
                let idToRemove = this.getAttr(
                  'extraInformation'
                ).idToRemove.split('_');
                idToRemove = idToRemove[0] + '_' + idToRemove[1];
                let nodeToDestroy = guiNodes.find((g) => g.id === idToRemove);
                if (nodeToDestroy) {
                  let compToDestroy = nodeToDestroy.uiCompObjects.find(
                    (c) => c.id === this.getAttr('extraInformation').idToRemove
                  );
                  let indexToDestroy = nodeToDestroy.uiCompObjects.indexOf(
                    compToDestroy
                  );
                  nodeToDestroy.uiCompObjects.splice(indexToDestroy, 1);
                }

                layerPlay.batchDraw();

                return;
              }
            });
          } else if (currUICompObject.comp_label === 'Input') {
            compGroup.setAttr('isStillCrop', true);
            compGroup.setAttr('extraInformation', {
              ...currUICompObject.extraInformation,
              width,
              height,
              idToRemove: currUICompObject['id'],
            });
            compGroup.on('dblclick', function () {
              if (this.getAttr('isStillCrop')) {
                createCustomInput(
                  this.getChildren()[1],
                  addBoxTransitionEventListener,
                  this.getAttr('extraInformation')
                );

                this.destroy();
                let idToRemove = this.getAttr(
                  'extraInformation'
                ).idToRemove.split('_');
                idToRemove = idToRemove[0] + '_' + idToRemove[1];
                let nodeToDestroy = guiNodes.find((g) => g.id === idToRemove);
                if (nodeToDestroy) {
                  let compToDestroy = nodeToDestroy.uiCompObjects.find(
                    (c) => c.id === this.getAttr('extraInformation').idToRemove
                  );
                  let indexToDestroy = nodeToDestroy.uiCompObjects.indexOf(
                    compToDestroy
                  );
                  nodeToDestroy.uiCompObjects.splice(indexToDestroy, 1);
                }

                layerPlay.batchDraw();

                return;
              }
            });
          }
            } // if custom end

            compGroup.add(crop);
            compGroup.add(box2Play);
            groupPlay.add(compGroup);

            // if (currUICompObject.isGroup) {
            //   crop.moveToBottom();
            //   console.log('MOVE TO BOTTOM!!!');
            // } else {
            //   crop.moveToTop();
            // }

            if (currUICompObject.isGroup) {
              //compGroup.moveToBottom();
            } else {
              compGroup.moveToTop();
            }


    } // End for ui comp objects
    addBackButton(layerPlay, groupPlay, guiNode, scalePlayerContainer);
    layerPlay.add(groupPlay);

  layerPlay.batchDraw();
}

function addBox2PlayClickEventHandlers(box2Play, nodeBackButton) {
    for (let t of transitions) {
        if (t.from == box2Play.getAttr('id')) {
          box2Play.setAttr('fill', 'green');
          box2Play.on('mousedown', function () {
              this.getParent().moveToBottom();
              var nextNode = layerPlay.findOne(`#${t.to}`);
              nextNode.moveToTop();
              guiStack.push(this.getParent().getAttr('id'));
              //userSetStartNodeId['id'] = t.to
              var guiNode = guiNodes.find((n) => n.id == t.to);
              currentShownGUINode.value = guiNode;
              if (guiStack) {
                  var nodeBackButton = layerPlay.findOne(
                    `#${nextNode.getAttr('id')}_back_btn`
                  );
                  nodeBackButton.setAttr('fill', 'green');
                  nodeBackButton.setAttr('stroke', 'white');
                  nodeBackButton.setAttr('strokeWidth', 2);
                  nodeBackButton.setAttr('opacity', 0.2);
                  nodeBackButton.on('mouseover', function () {
                      document.body.style.cursor = 'pointer';
                        });
                  nodeBackButton.on('mouseout', function () {
                      document.body.style.cursor = 'default';
                    });
                  }
              layerPlay.draw();
            });
          box2Play.on('mouseover', function () {
              document.body.style.cursor = 'pointer';
          });
          box2Play.on('mouseout', function () {
              document.body.style.cursor = 'default';
          });
          }
        }
        
}

function addBox2PlayEventHandlers(box2Play) {
        if (isEditModeOn.value){

          box2Play.on('mousedown', function () {
          console.log(this.getAttr('clicked'));
          console.log(currentSelectedComp.value);
          if (this.getAttr('clicked')) {
            this.setAttr('stroke', this.getAttr('stroke_ori'));
            this.setAttr('fill', undefined);
            this.setAttr('clicked', false);
            currentSelectedComp.value = null;
          } else {
            this.setAttr('stroke', 'green');
            this.setAttr('fill', 'green');
            this.setAttr('clicked', true);
            if (currentSelectedComp.value) {
              //TODO REMOVE THIS CODE
              if (currentSelectedComp.value.getParent() != this.getParent()) {
                addTransitionArrow(currentSelectedComp.value, this);
                this.setAttr('stroke', this.getAttr('stroke_ori'));
                currentSelectedComp.value.setAttr(
                  'stroke',
                  currentSelectedComp.value.getAttr('stroke_ori')
                );
                currentSelectedComp.value.setAttr('fill', undefined);
                this.setAttr('fill', undefined);
                this.setAttr('clicked', false);
                currentSelectedComp.value = null;
              } else {
                // this.setAttr('stroke', this.getAttr('stroke_ori'));
                // this.setAttr('fill', undefined);
                if (currentSelectedComp.value != this) {
                  currentSelectedComp.value.setAttr(
                    'stroke',
                    currentSelectedComp.value.getAttr('stroke_ori')
                  );
                  currentSelectedComp.value.setAttr('fill', undefined);
                  currentSelectedComp.value.setAttr('clicked', false);
                }
                currentSelectedComp.value = this;
              }
            } else {
              currentSelectedComp.value = this;
            }
          }
          layerPlay.batchDraw();
          console.log('draw layer again')
          //$('#info').html(this.getAttr('name') + " | " + this.getAttr('clicked'));
        });
        } else {
          for (let t of transitions) {
          if (t.from == box2Play.getAttr('id')) {
            //console.log(`Found matching transition : ${t.id},${t.from},${box2Play.getAttr('id')}`);
            box2Play.setAttr('fill', 'green');
            box2Play.on('mousedown', function () {
              this.getParent().moveToBottom();
              var nextNode = layerPlay.findOne(`#${t.to}`);
              nextNode.moveToTop();
              guiStack.push(this.getParent().getAttr('id'));
              //console.log(`Current GUI Stack : ${guiStack}`);
              userSetStartNodeId['id'] = t.to
              if (guiStack) {
                var nodeBackButton = layerPlay.findOne(
                  `#${nextNode.getAttr('id')}_back_btn`
                );
                nodeBackButton.setAttr('fill', 'green');
                nodeBackButton.setAttr('stroke', 'white');
                nodeBackButton.setAttr('strokeWidth', 2);
                nodeBackButton.setAttr('opacity', 0.2);
                nodeBackButton.on('mouseover', function () {
                  document.body.style.cursor = 'pointer';
                });
                nodeBackButton.on('mouseout', function () {
                  document.body.style.cursor = 'default';
                });
              }
              layerPlay.draw();
            });
            box2Play.on('mouseover', function () {
              document.body.style.cursor = 'pointer';
            });
            box2Play.on('mouseout', function () {
              document.body.style.cursor = 'default';
            });
          }
        }
        }
}


function addBackButton(
  layerPlay,
  groupPlay,
  guiNode,
  scalingPlayer
) {
  let a = [130, 2395, 520, 2567];
  let factor =
    (1440 / guiNode.image.width) *
    (1 ) *
    (guiNode.image.width / 540) *
    (1 / scalingPlayer);
  //console.log(`DRAWER factor :  ${factor}`);
  normalizedA = a.map(function (x) {
    return x / factor;
  });
  //console.log(`From drawer arr: ${a}, normArr: ${normalizedA}`);
  let width = normalizedA[2] - normalizedA[0];
  let height = normalizedA[3] - normalizedA[1];

  if (showUICinPreview.value) {
    stroke_color = 'white';
  } else {
    stroke_color = undefined;
  }
  name = `${guiNode.id}_back_btn`;
  //console.log(name);
  var backButton = new Konva.Rect({
    x: normalizedA[0],
    y: normalizedA[1],
    width: width,
    height: height,
    //stroke_ori: stroke_color,
    //stroke: stroke_color,
    //strokeWidth: 2,
    opacity: 0.05,
    //draggable: true,
    id: name,
    name: name,
  });
  groupPlay.add(backButton);
  //backButton.setZIndex(1);
 

  //backButton.setAttr('fill', 'green');
  backButton.on('mousedown', function () {
    //this.getParent().moveToBottom();
    var lastGuiID = guiStack.value.pop();
    console.log(`lastguiid: ${lastGuiID}`);
    if (lastGuiID) {
      var lastNode = layerPlay.findOne(`#${lastGuiID}`);
      console.log(`lastNode: ${JSON.stringify(lastNode)}`);
      lastNode.moveToTop();
      currentShownGUINode.value = guiNodes.filter(n => lastGuiID.includes(n.id))[0];
      layerPlay.draw();
    }
  });
}


function getUICompObjects(
  jsonDataCombined,
  jsonDataSemantic,
  jsonDataCombinedExtended
) {
  //console.log(jsonData);
  // Comp bounds
  //comp_bounds = JSONPath({path:'$..bounds', json: jsonDataSemantic});
  // Comp labels
  //comp_labels = JSONPath({path:'$..componentLabel', json: jsonDataSemantic});
  //console.log(`LENGTH OF BOUNDS ${ comp_bounds.slice(1).length}, length label : ${comp_labels.length}`)
  //
  /* comp_resource_ids = JSONPath({path:'$..resource-id', json: jsonDataSemantic});
      console.log(`LENGTH OF resource-ids : ${comp_resource_ids.length}`);
      for(i=0; i < comp_resource_ids.length; i++) {
          res_parents = JSONPath({path:'$..resource-id[""]', json: jsonDataSemantic});
      } */
  //comp_objects = JSONPath({path:'$..componentLabel^', json: jsonData});
  //console.log(`comp objects : ${comp_objects}`);
  //mapped_comp_objects = comp_objects.map(comp => comp['componentLabel']);
  //console.log(`UI components : ${mapped_comp_objects}`);
  /* comp_bounds.slice(1)
      console.log(`COMPUTING THE UI COMPONENTS`);
      for(i=0; i < comp_labels.length; i++) {
          console.log(`Adding new uicompobject: complabel: ${comp_labels[i]}, compbounds:${comp_bounds[i]}`)
          uiCompObjects.push({
              "comp_label": comp_labels[i],
              "comp_bounds": comp_bounds[i],
          });
      }
      return uiCompObjects; */
  uiCompObjects = [];
  compLabelParents = JSONPath({
    path: '$..componentLabel^',
    json: jsonDataSemantic,
  });
  if (jsonDataCombinedExtended) {
    compLabelParents = jsonDataCombinedExtended['ui_comps'];
    let uiCompGroups = getUICompGroups(jsonDataCombinedExtended);
    uiCompGroups.forEach((g) => {
      // console.log(g);
      uiCompObjects.push(g);
    });
  }
  //console.log(`LENGTH OF compLabelParents : ${compLabelParents.length}`);
  for (i = 0; i < compLabelParents.length; i++) {
    currCompLabelParent = compLabelParents[i];
    //console.log(`Adding new uicompobject: complabel: ${currCompLabelParent['componentLabel']}, compbounds:${currCompLabelParent['bounds']}`);
    var hasChildren = Boolean(currCompLabelParent['children']);
    var isBackgroundImage =
      currCompLabelParent['componentLabel'] === 'Background Image';
    var isCompoundElement = hasChildren || isBackgroundImage;
    var extraInformation = {};
    let isCustom = false;
    if (currCompLabelParent['componentLabel'] === 'Text') {
      extraInformation = {
        text: currCompLabelParent.text,
        textColor: currCompLabelParent.text_color,
        fontSize: currCompLabelParent.font_size,
      };
      isCustom = true;
    } else if (currCompLabelParent['componentLabel'] === 'Text Button') {
      extraInformation = {
        text: currCompLabelParent.text,
        textColor: currCompLabelParent.text_color,
        fontSize: currCompLabelParent.font_size,
        buttonColor: currCompLabelParent.bg_color,
      };
      isCustom = true;
    } else if (
      currCompLabelParent['componentLabel'] === 'Input' &&
      currCompLabelParent['class'].includes('Text')
    ) {
      //input
      extraInformation = {
        text: currCompLabelParent.text_updated,
        textColor: currCompLabelParent.text_color,
        fontSize: currCompLabelParent.font_size,
        inputColor: currCompLabelParent.bg_color,
      };
      isCustom = true;
    }
    /* console.log(`Has CHILDREN : ${hasChildren}`);
          console.log(`is BCKIMAGE : ${isBackgroundImage}`);
          console.log(`is COMPDELEM : ${isCompoundElement}`); */
    uiCompObjects.push({
      comp_label: currCompLabelParent['componentLabel'],
      comp_bounds: currCompLabelParent['bounds'],
      updated_comp_bounds: currCompLabelParent['bounds'],
      has_children: Boolean(hasChildren),
      is_CompoundElement: isCompoundElement,
      plain_json: currCompLabelParent,
      crop_group: undefined,
      extraInformation,
      isCustom,
    });
  }
  return uiCompObjects;
}


function getUICompGroups(jsonDataCombinedExtended = null) {
  if (!jsonDataCombinedExtended) return null;
  let uiCompGroups = [];
  const groupsJson = jsonDataCombinedExtended['ui_comp_groups'];
  groupsJson.forEach((group, i) => {
    uiCompGroups.push({
      comp_label: group['componentLabel'],
      comp_bounds: group['bounds'],
      updated_comp_bounds: group['bounds'],
      bg_color: group['bg_color'],
      isGroup: true,
      crop_group: undefined,
      has_children: false,
      is_CompoundElement: false,
    });
  });
  // console.log(uiCompGroups);
  return uiCompGroups;
}

function addTransitionToKonva(transition) {
  var transitionSourceNodes = layerPlay.find(`#${transition.from}`);
  console.log(`transition nodes: ${JSON.stringify(transitionSourceNodes)}`);
  var boxSources = transitionSourceNodes.getChildren().filter(node => node.getClassName() === 'Rect');
  console.log(`box nodes: ${JSON.stringify(boxSources)}`);
  var boxSource = boxSources[0];
  boxSource.setAttr('fill', 'green');
  layerPlay.batchDraw();
  var transitionSourceNodes = layerPlay.find(`#${transition.from}`);
  console.log(`transition nodes: ${JSON.stringify(transitionSourceNodes)}`);
  boxSource.on('mousedown', function () {
              //this.getParent().moveToBottom();
              var nextNode = layerPlay.findOne(`#${transition.to}`);
              nextNode.moveToTop();
              currentNode = this;
              while (!currentNode.getAttr('master')) {
                  currentNode = currentNode.getParent();
              }
              guiStack.value.push(currentNode.getAttr('id'));
              console.log(`guistack: ${JSON.stringify(guiStack.value)}`);
              //userSetStartNodeId['id'] = t.to
              var guiNode = guiNodes.find((n) => n.id == transition.to);
              currentShownGUINode.value = guiNode;
              if (guiStack.value) {
                  var nodeBackButton = layerPlay.findOne(
                    `#${nextNode.getAttr('id')}_back_btn`
                  );
                  nodeBackButton.setAttr('fill', 'green');
                  nodeBackButton.setAttr('stroke', 'white');
                  nodeBackButton.setAttr('strokeWidth', 2);
                  nodeBackButton.setAttr('opacity', 0.2);
                  nodeBackButton.on('mouseover', function () {
                    document.body.style.cursor = 'pointer';
                  });
                  nodeBackButton.on('mouseout', function () {
                    document.body.style.cursor = 'default';
                  });
                }
              layerPlay.draw();
            });
          boxSource.on('mouseover', function () {
              document.body.style.cursor = 'pointer';
          });
          boxSource.on('mouseout', function () {
              document.body.style.cursor = 'default';
          });
          
        
}



function removeUIComponent(uiComponent, isParent = false) {
  // UIcomponent is the clickable rectangle, we first obtain the group parent
  console.log(`uicompparent: ${JSON.stringify(uiComponent)}`);

  var uiCompParent = uiComponent.getParent();
  if (isParent) {
    uiCompParent = uiComponent;
  }
  console.log(`uicompparent: ${JSON.stringify(uiCompParent)}`);
  var splitIds = uiCompParent.getAttr('id').split('_');
  var guiNodeId = splitIds[0] + '_' + splitIds[1];
  //console.log(`Remove ui component id : ${uiCompParent.getAttr('id')}, guiNodeId : ${guiNodeId}`);
  //Find guiNode and remove the ui component from the data model
  console.log(`gúinode id :  ${guiNodeId}`);
  var guiNode = guiNodes.find((n) => n.id == guiNodeId);
  //console.log(`UI Comp removal uiCompObjects length before : ${guiNode.uiCompObjects.length}`)
  var uiCompObject = guiNode.uiCompObjects.find(
    (n) => n['id'] == uiCompParent.getAttr('id')
  );
  var uiCompObjectIndex = guiNode.uiCompObjects.indexOf(uiCompObject);
  guiNode.uiCompObjects.splice(uiCompObjectIndex, 1);
  //console.log(`UI Comp removal uiCompObjects length after : ${guiNode.uiCompObjects.length}`)
  // Find all outgoing transitions of the ui component and remove them in konva and in the model

  /*  mappings = transitions.map(t => [t.to, t.from])        
     matches = transitions.filter(t => (t.to == guiNode.id || t.from.includes(guiNode.id)));
     // Remove all arrows from layer
     var arrowNodes = matches.map(t => layer.findOne(`#${t.id}`));
     for(i=0; i < arrowNodes.length; i++) {
         arrowNodes[i].remove();
     }
     matchesIndexes = matches.map(m => transitions.indexOf(m));
     while(matchesIndexes.length) {
         transitions.splice(matchesIndexes.pop(), 1);
     }
     console.log(`Remaining transitions : ${transitions.length}`);
     
     layer.batchDraw(); */
  matches = transitions.filter((t) => t.from == uiCompParent.getAttr('id'));
  //console.log(`UI comp removal found ${matches.length} transitions to be removed`);
  var arrowNodes = matches.map((t) => layer.findOne(`#${t.id}`));
  for (i = 0; i < arrowNodes.length; i++) {
    arrowNodes[i].remove();
  }
  matchesIndexes = matches.map((m) => transitions.indexOf(m));
  while (matchesIndexes.length) {
    transitions.splice(matchesIndexes.pop(), 1);
  }
  // Remove from Konva

  uiCompParent.remove();
  currentShape = null;
  currentSelectedComp.value = null;
  layerPlay.batchDraw();
}

function markUIComponent(uiComponent, isParent = false) {
  console.log(`uicomp: ${JSON.stringify(uiComponent)}`);
  if(currentSelectedComp.value != uiComponent) {
      if (currentSelectedComp.value) {
        currentSelectedComp.value.setAttr('fill', undefined);
      }
      uiComponent.setAttr('fill', 'green');
      currentSelectedComp.value = uiComponent;
  } else {
      uiComponent.setAttr('fill', undefined);
      currentSelectedComp.value = null;
  }
  layerPlay.batchDraw();
}

function removeAllTransitionsForGUINode(guiNode) {
  mappings = transitions.map((t) => [t.to, t.from]);
  matches = transitions.filter(
    (t) => t.to == guiNode.id || t.from.includes(guiNode.id)
  );
  for(i = 0; i < matches.length; i++) {
    var transitionSourceNodes = layerPlay.find(`#${matches[i].from}`);
    var boxSources = transitionSourceNodes.getChildren().filter(node => node.getClassName() === 'Rect');
    var boxSource = boxSources[0];
    boxSource.setAttr('fill', undefined);
    boxSource.off('mousedown');
    boxSource.off('mouseover');
  }
  // Remove all arrows from layer
  //var arrowNodes = matches.map((t) => layer.findOne(`#${t.id}`));
  //for (i = 0; i < arrowNodes.length; i++) {
  //  arrowNodes[i].remove();
  //}
  matchesIndexes = matches.map((m) => transitions.indexOf(m));
  while (matchesIndexes.length) {
    transitions.splice(matchesIndexes.pop(), 1);
  }
  //console.log(`Remaining transitions : ${transitions.length}`);
  //layerPlay.batchDraw();
}

function deleteGuiNode(currentShape, isParent = false, guiNodeId = '') {
  let id = isParent ? guiNodeId : currentShape.getParent().getAttr('id');
  guiNode = guiNodes.find((n) => id.includes(n.id));
  guiNodeIndex = guiNodes.indexOf(guiNode);
  guiNodes.splice(guiNodeIndex, 1);
  while (!currentShape.getAttr('master')) {
    currentShape = currentShape.getParent();
  }
  currentShape.remove();
  removeAllTransitionsForGUINode(guiNode);
  currentShape = null;

  currentSelectedComp.value = null;
  if (guiNodes.length <= 1) {
    currentShownGUINode.value = null;
    hideGUISummaryButton();
    hideGUIButtons();
  } else {
    currentShownGUINode.value = guiNodes[0];
  }
}


function addBoxTransitionEventListener(e, box) {
  //console.log(`EVENT CLICK: ${e.evt.button}`)
  //Only respond if we click the shape with left click
  if (e.evt.button == 0) {
    if (box.getAttr('clicked')) {
      box.setAttr('stroke', box.getAttr('stroke_ori'));
      box.setAttr('fill', undefined);
      box.setAttr('clicked', false);
      currentSelectedComp.value = null;
    } else {
      box.setAttr('stroke', 'green');
      box.setAttr('fill', 'green');
      box.setAttr('clicked', true);
      if (currentSelectedComp.value) {
        //console.log(`CURRSEL COMP :${currentSelectedComp.value.getAttr('id').split('_')[1]}, ${box.getAttr('id').split('_')[1]}`)

        //if (currentSelectedComp.value.getParent() != box.getParent()) {
        if (
          currentSelectedComp.value.getAttr('id').split('_')[1] !=
          box.getAttr('id').split('_')[1]
        ) {
          addTransitionArrow(currentSelectedComp.value, box);
          box.setAttr('stroke', box.getAttr('stroke_ori'));
          currentSelectedComp.value.setAttr(
            'stroke',
            currentSelectedComp.value.getAttr('stroke_ori')
          );
          currentSelectedComp.value.setAttr('fill', undefined);
          box.setAttr('fill', undefined);
          box.setAttr('clicked', false);
          currentSelectedComp.value = null;
        } else {
          if (currentSelectedComp.value != box) {
            currentSelectedComp.value.setAttr(
              'stroke',
              currentSelectedComp.value.getAttr('stroke_ori')
            );
            currentSelectedComp.value.setAttr('fill', undefined);
            currentSelectedComp.value.setAttr('clicked', false);
          }
          currentSelectedComp.value = box;
        }
      } else {
        currentSelectedComp.value = box;
      }
    }
  }
}


module.exports = {
  getUICompObjects,
  addGUIToKonva,
  addTransitionToKonva,
  removeUIComponent,
  markUIComponent,
  removeAllTransitionsForGUINode,
  deleteGuiNode,
 };
},{"./createCustomComps":74,"./helpers":76,"./vars":79,"jsonpath-plus":4}],78:[function(require,module,exports){
const Konva = require('konva');
const { jsPDF } = require("jspdf"); 
const colorThief = new ColorThief();

const {
  fetchJSONDataFromIndex,
  addGUIToEditor,
  fetchSearchResults,
} = require('./fetchData');

const {
  getUICompObjects,
  addGUIToKonva,
  addTransitionToKonva,
} = require('./konvaWireframing');

const {
	send,
	showBotTyping,
  renderBotResponse
} = require('../rasa/components/chat')

const {
  updateModalAdditionalRequirements,
  updateModalGUINodes,
  renderGUIReqSummaryModal2,
  addKonvaImageAndFeatureForSummaryRendering,
} = require('../rasa/components/guiRankingData')


const { vars } = require('./vars');

var {
  isEditModeOn,
  showUICinPreview,
  currentSelectedComp,
  guiNodes,
  transitions,
  userSetStartNodeId,
  importHelper,
  currentShownGUINode,
  stagePlay,
  guiStack,
  layerPlay,
  currentGUIReqSummary,
  layerAspects,
  stageAspects,
  arrowImg,
  gfb_top_k_gui_indexes,
  baseURL,
} = vars;

const {
  removeUIComponent,
  markUIComponent,
  removeAllTransitionsForGUINode,
  deleteGuiNode,
} = require('./konvaWireframing');

showBotTyping();
send('/intent_start')

$(document).ready(function(){
    console.log('ready')
    var elems = document.querySelectorAll('.modal');
  var instances = M.Modal.init(elems,{
        dismissible:false
      });

    $('.tabs').tabs();
  });

$('#toggle-button').click(function() {
  console.log('click');
  $('#modal_box').modal('open');
});

let currentShape;
let currentShapeFill;
let currentShapeOpacity;
var menuNode = document.getElementById('menu');

window.addEventListener('click', () => {
  // hide menu
  menuNode.style.display = 'none';
  if (currentShape) {
      currentShape.setAttr('fill', currentShapeFill);
      currentShape.setAttr('opacity', currentShapeOpacity);
      currentShapeFill = undefined;
      currentShapeOpacity = undefined;
      currentShape = null;
  }
  layerPlay.batchDraw();
});

stagePlay.on('contextmenu', function (e) {
  // prevent default behavior
  e.evt.preventDefault();
  console.log(`target: ${e.target.getAttr('id')}`);
  if (e.target === stagePlay || e.target.getAttr('id').includes('_back_rec') ||
      e.target.getAttr('id').includes('_action_bar') ||  
      e.target.getAttr('id').includes('_menu') ||  
      e.target.getAttr('id').includes('_back_btn')) {
    // if we are on empty place of the stagePlay we will do nothing or clicked on
    // on the background rectangle
    return;
  }
  if (currentShape) {
      currentShape.setAttr('fill', currentShapeFill);
      currentShape.setAttr('opacity', currentShapeOpacity);
      currentShapeFill = undefined;
      currentShapeOpacity = undefined;
  }
  currentShape = e.target;
  currentShapeFill = currentShape.getAttr('fill');
  currentShapeOpacity = currentShape.getAttr('opacity');
  currentShape.setAttr('fill', 'red');
  currentShape.setAttr('opacity', 0.3);
  var parentNode = currentShape.getParent();
  // show menu
  menuNode.style.display = 'initial';
  var containerRect = $('#container-konva-player').position();
  menuNode.style.top =
    //parentNode.getY() + currentShape.getAttr('y') + 4 + 'px';
     containerRect.top + stagePlay.getPointerPosition().y + 10 + 'px';
  menuNode.style.left =
    //parentNode.getX() + currentShape.getAttr('x') + 4 + 'px';
     containerRect.left + stagePlay.getPointerPosition().x + 4 + 'px';
  layerPlay.batchDraw();
});

$('#workbench-wrapper').on(
  'click',
  'button[id^="btn-gui-add"]',
  function () {
    console.log('get gui summary');
    gui_id = 'gui_' + $(this).data('val');

    $("#preview-header").text("Currently Selected GUI");
    $('#selected-gui-wrapper').append(`
        <img class="card-img-top myImages" style="width:70%;height:70%" id="myImg-${$(this).data('val')}" src=  "${baseURL}/combined/${$(this).data('val')}.jpg" draggable="true" alt="GUI ${$(this).data('val')}">`)


    if(guiNodes.map(n => n.id).includes(gui_id)) {
      alert("The same GUI cannot be added to the preview more than once.");
      return
    }
    renderBotResponse([{'text': 'I am searching for other potentially relevant features for you. Please wait a moment.'}], 0, 0);
    console.log(gui_id);
    showBotTyping();
    $(".quickReplies").remove();
    send(`/gui_selected{"current_selected_gui_id": "${gui_id}", "current_transition": "None", "current_wireframe": "None"}`);
    //addGUIToEditor($(this).data('val'), 0, 0, isEditModeOn.value);
    //disableGUISelectionButtons();
});

$('#workbench-wrapper').on(
  'click',
  'button[id^="btn-gui-reselect"]',
  function () {
    console.log('get gui summary');
    gui_id = 'gui_' + $(this).data('val');
    if(guiNodes.map(n => n.id).includes(gui_id)) {
      alert("The same GUI cannot be added to the preview more than once.");
      return
    }
    console.log(gui_id);
    showBotTyping();
    $(".quickReplies").remove();
    send(`/gui_reselected{"current_selected_gui_id": "${gui_id}", "current_transition": "None", "current_wireframe": "None"}`);
    //addGUIToEditor($(this).data('val'), 0, 0, isEditModeOn.value);
    //disableGUISelectionButtons();
});

$('#workbench-wrapper').on(
  'click',
  'button[id^="btn-select-feature"]',
  function () {
    console.log('select feature');
    gui_id = 'gui_' + $(this).data('val');
    console.log(gui_id);
    showBotTyping();
    $(".quickReplies").remove();
    send(`/select_feature{"current_selected_gui_id": "${gui_id}"}`);
});


$('#row-selected-gui-summary').on(
  'click',
  'button[id^="btn-gui-summary"]',
  function () {
    gui_id = 'gui_' + $(this).data('val');
    console.log(gui_id);
    data = {'selected_gui_id': '43412', 'nlr_query': 'login', 'aspect_guis': [{'aspect_type': 'afb', 'gui_id': '19158', 'feature_id': '19158_1', 'text': 'google', 'comp_type': 'Text Button', 'bounds': [144, 2133, 702, 2301], 'feature_query': 'google'}]}
    //guiNode = guiNodes.find((n) => gui_id.includes(n.id));
    //console.log('Found gui node for summary');
    //console.log(guiNode);
    //updateModalAdditionalRequirements(guiNode['summary']);
    updateModalAdditionalRequirements(data);
});

$("#gui-previous-button").click(() => {
  currentGUIIndex = guiNodes.map(n => n.id).indexOf(currentShownGUINode.value.id);
  console.log(`curridx : ${currentGUIIndex}`);
  console.log(`currguinodeid : ${currentShownGUINode.value.id}`);
  console.log(`guinodes : ${guiNodes.map(n => n.id)}`);
  if (!(currentGUIIndex<1)) {
    currentShownGUINode.value = guiNodes[(currentGUIIndex-1)]
    var nextNode = layerPlay.findOne(`#${currentShownGUINode.value.id}`);
    var foundNodes = layerPlay.find(`#${currentShownGUINode.value.id}`)
        var nodeBackButton = layerPlay.findOne(
        `#${nextNode.getAttr('id')}_back_btn`
    );
    nodeBackButton.setAttr('fill', undefined);
    nodeBackButton.setAttr('stroke', undefined);
    nodeBackButton.on('mouseover', function () {
              document.body.style.cursor = 'default';
    });
    console.log(`layerplay: ${foundNodes.length}`);
    console.log(`layerplay child: ${layerPlay.getChildren().length}`);
    guiStack.value = []
    nextNode.moveToTop();
    layerPlay.batchDraw();
  }
});

$("#gui-next-button").click(() => {
  currentGUIIndex = guiNodes.map(n => n.id).indexOf(currentShownGUINode.value.id);
  console.log(`curridx : ${currentGUIIndex}`);
  console.log(`currguinodeid : ${currentShownGUINode.value.id}`);
  console.log(`guinodes : ${guiNodes.map(n => n.id)}`);
  console.log(`guistack1 :${guiStack.value}`);
  if (!(currentGUIIndex>= (guiNodes.length-1))) {
    var currentNode = layerPlay.findOne(`#${currentShownGUINode.value.id}`);
    currentNode.moveToBottom();
    currentShownGUINode.value = guiNodes[(currentGUIIndex+1)]
    var nextNode = layerPlay.findOne(`#${currentShownGUINode.value.id}`);
    var nodeBackButton = layerPlay.findOne(
        `#${nextNode.getAttr('id')}_back_btn`
    );
    nodeBackButton.setAttr('fill', undefined);
    nodeBackButton.setAttr('stroke', undefined);
    nodeBackButton.on('mouseover', function () {
                document.body.style.cursor = 'default';
            });
    guiStack.value = []
    console.log(`guistack2 :${guiStack.value}`);
    nextNode.moveToTop();
    layerPlay.batchDraw();
  }
});

document
  .getElementById('delete-uicomp-button')
  .addEventListener('click', () => {
    removeUIComponent(currentShape);
  });

  document
  .getElementById('btn-pdf')
  .addEventListener('click', () => {
    const doc = new jsPDF({
      orientation: "landscape",
      unit: "mm",
      format: "a4"
    });
    // First we draw the general overview of the app
    createPDFSummaryApp(doc);
    // Second we draw each GUI with its aspect GUIs
    createAspectGUISummaries(doc);
    doc.save('app_summary.pdf'); 
  });


function createPDFSummaryApp(doc) {
    HEADING_FONT_SIZE = 25;
    NORMAL_FONT_SIZE = 15;
    WIDTH = 338;
    HEIGTH = 600.8888;
    if (guiNodes.length > 0) {
       summary = guiNodes[0]['summary'];
       ctx_domain = summary['ctx_domain'];
       ctx_app = summary['ctx_app'];
      doc.setFont(undefined, 'bold').setFontSize(HEADING_FONT_SIZE).text("App Requirements Summary (1)", 10, 21).setFont(undefined, 'normal').setFontSize(NORMAL_FONT_SIZE)
      //doc.text("Domain: "+ctx_domain, 10, 24);
      //doc.text("Description: " + ctx_app, 10, 31);
    }
    scaling = 0.2;
    y_offset = 45;
    x_offset = 15
    counter = 0;
    pageCount = 1;
    for (var i = 0; i < guiNodes.length; i++) {
      var nextNode = layerPlay.findOne(`#${guiNodes[i]['id']}`);
      nextNode.moveToTop();
      console.log(nextNode);
      if (counter == 3) {
        console.log('new page');
        counter = 0;
        doc.addPage();
        pageCount = pageCount + 1;
        doc.setFont(undefined, 'bold').setFontSize(HEADING_FONT_SIZE).text("App Requirements Summary ("+pageCount+")", 10, 14).setFont(undefined, 'normal').setFontSize(NORMAL_FONT_SIZE)
        //doc.text("Domain: "+ctx_domain, 10, 24);
        //doc.text("Description: " + ctx_app, 10, 31);
      }
      console.log('stage width and height');
      console.log(stagePlay.width());
      console.log(stagePlay.height());
        doc.addImage(
          stagePlay.toDataURL({ pixelRatio: 2 }),
          (counter*100)+x_offset,
          y_offset,
          stagePlay.width()*scaling*(WIDTH/stagePlay.width()),
          stagePlay.height()*scaling*(HEIGTH/stagePlay.height())
        );
      
      doc.setFont(undefined, 'bold').text("GUI ("+(i+1)+ ")", (counter*100)+x_offset+((stagePlay.width()*scaling)/2)-8, stagePlay.height()*scaling+y_offset+9).setFont(undefined, 'normal');
      if (counter == 1 || counter == 2) {
        doc.addImage(
            arrowImg,
            (counter*100)-7,
            y_offset-11+(stagePlay.height()*scaling)/2,
            arrowImg.width*0.012,
            arrowImg.height*0.012
          );
    }
      counter = counter + 1;
    }
    // reset the preview to the actually shown GUI
    //currentGUIIndex = guiNodes.map(n => n.id).indexOf(currentShownGUINode.value.id);
    var currentNode = layerPlay.findOne(`#${currentShownGUINode.value.id}`);
    console.log(currentNode);
    currentNode.moveToTop();
    layerPlay.batchDraw();
}

function createAspectGUISummaries(doc) {
    HEADING_FONT_SIZE = 25;
    MEDIUM_FONTS_IZE = 20;
    NORMAL_FONT_SIZE = 15;
    ASPECT_FONT_SIZE = 11;
    WIDTH = 338;
    HEIGTH = 600.8888;
    scaling_centering = 1.1;
    scaling = 0.2;
    scalingAspect = 0.15;
    y_offset = 45;
    x_offset = 15
    page_counter = 0;
    for (var i = 0; i < guiNodes.length; i++) {
      asp_guis = guiNodes[i]['summary']['aspect_guis'];
      summary = guiNodes[i]['summary']
      nlr = summary['nlr_query']
      if (asp_guis.length>0) {
      page_counter = 0;
      doc.addPage();
      doc.setFont(undefined, 'bold').setFontSize(HEADING_FONT_SIZE).text("GUI ("+(i+1)+") Summary ("+(page_counter+1)+")", 10, 21).setFont(undefined, 'normal').setFontSize(NORMAL_FONT_SIZE)
    add_reqs = summary['aspect_guis'].map(e => '"'+e.text+'"').join(', ');
    console.log('summary')
    console.log(summary);
    doc.setFont(undefined, 'bold').text("NL Requirements: ", 10, 32).setFont(undefined, 'normal');
    doc.text('"'+nlr+'"', 57, 32);
   // doc.text("Additional Requirements: "+ add_reqs, 10, 31);
      var nextNode = layerPlay.findOne(`#${guiNodes[i]['id']}`);
      nextNode.moveToTop();
      doc.addImage(
          stagePlay.toDataURL({ pixelRatio: 2 }),
          x_offset,
          y_offset,
          stagePlay.width()*scaling*(WIDTH/stagePlay.width()),
          stagePlay.height()*scaling*(HEIGTH/stagePlay.height())
        );
      row_counter = 0;
      col_counter = 0;
      aspect_counter = 0;
      num_guis_left = guiNodes[i]['summary']['aspect_guis'].length;
      NUM_COLS = 3;
      NUM_ASPECTS_PER_PAGE = 6;
      doc.setFont(undefined, 'bold').text("Selected GUI ("+(i+1)+ ")", x_offset+((stagePlay.width()*scaling)/2)-18, stagePlay.height()*scaling+y_offset+9).setFont(undefined, 'normal');
      for (var j = 0; j < guiNodes[i]['summary']['aspect_guis'].length;j++) {
        aspect_gui = guiNodes[i]['summary']['aspect_guis'][j]
        var aspectNode = layerAspects.findOne(`#${aspect_gui['feature_id']}`);
        console.log('found aspect node');
        console.log(aspectNode);
        console.log(stageAspects);
        aspectNode.moveToTop();
             doc.addImage(
                stageAspects.toDataURL({ pixelRatio: 2 }),
                ((col_counter+1)*65)+x_offset+30,
                (row_counter*85)+y_offset-5,
                stageAspects.width()*scalingAspect,
                stageAspects.height()*scalingAspect
          );
        doc.setFont(undefined, 'bold').setFontSize(ASPECT_FONT_SIZE).text('"'+aspect_gui['text']+'"', ((col_counter+1)*65)+x_offset+30+((stageAspects.width()*scalingAspect)/2)-(scaling_centering*aspect_gui['text'].length), stageAspects.height()*scalingAspect+y_offset+1+(row_counter*86)).setFont(undefined, 'normal').setFontSize(NORMAL_FONT_SIZE);
        num_guis_left = num_guis_left - 1;
        col_counter = col_counter + 1;
        aspect_counter = aspect_counter + 1;
        if (col_counter>= NUM_COLS) {
          col_counter = 0;
          row_counter = row_counter + 1;
        }
        if (aspect_counter >= NUM_ASPECTS_PER_PAGE && num_guis_left>0) {
                page_counter = page_counter + 1;
                doc.addPage();
                doc.setFont(undefined, 'bold').setFontSize(HEADING_FONT_SIZE).text("GUI ("+(i+1)+") Summary ("+(page_counter+1)+")", 10, 21).setFont(undefined, 'normal').setFontSize(NORMAL_FONT_SIZE)
                doc.setFont(undefined, 'bold').text("NL Requirements: ", 10, 32).setFont(undefined, 'normal');
                doc.text('"'+nlr+'"', 57, 32);
                  var nextNode = layerPlay.findOne(`#${guiNodes[i]['id']}`);
                  nextNode.moveToTop();
                  doc.addImage(
                      stagePlay.toDataURL({ pixelRatio: 2 }),
                      x_offset,
                      y_offset,
                      stagePlay.width()*scaling*(WIDTH/stagePlay.width()),
                      stagePlay.height()*scaling*(HEIGTH/stagePlay.height())
                    );
                  doc.setFont(undefined, 'bold').text("Selected GUI ("+(i+1)+ ")", x_offset+((stagePlay.width()*scaling)/2)-18, stagePlay.height()*scaling+y_offset+9).setFont(undefined, 'normal');
            row_counter = 0;
            col_counter = 0;
            aspect_counter = 0;
        }
      }
    }
      // Add new page with additional requirements
      additional_reqs = summary['additional_requirements']// ['password hint and reset', 'password hint', "password hint test et", 'password hint test', 'password hint reset', 'password hint', 'password hint', 'password hint', 'password hint', 'password hint']
      if (additional_reqs.length>0) {
        page_counter = page_counter + 1;
        doc.addPage();
        doc.setFont(undefined, 'bold').setFontSize(HEADING_FONT_SIZE).text("GUI ("+(i+1)+") Summary ("+(page_counter+1)+")", 10, 21).setFont(undefined, 'normal').setFontSize(NORMAL_FONT_SIZE)
        doc.setFont(undefined, 'bold').text("NL Requirements: ", 10, 32).setFont(undefined, 'normal');
        doc.text('"'+nlr+'"', 57, 32);
        var nextNode = layerPlay.findOne(`#${guiNodes[i]['id']}`);
        nextNode.moveToTop();
        doc.addImage(
                      stagePlay.toDataURL({ pixelRatio: 2 }),
                      x_offset,
                      y_offset,
                      stagePlay.width()*scaling*(WIDTH/stagePlay.width()),
                      stagePlay.height()*scaling*(HEIGTH/stagePlay.height())
                    );
        doc.setFont(undefined, 'bold').text("Selected GUI ("+(i+1)+ ")", x_offset+((stagePlay.width()*scaling)/2)-18, stagePlay.height()*scaling+y_offset+9).setFont(undefined, 'normal');
        doc.setFont(undefined, 'bold').setFontSize(MEDIUM_FONTS_IZE).text("Additional Requirements", x_offset+3+85, y_offset+10).setFont(undefined, 'normal').setFontSize(NORMAL_FONT_SIZE);
        curr_length = x_offset+85+3;
        MAX_LENGTH = 270;
        curr_y_offset = y_offset+10+10;
        len_factor = 2.7;
        for (var k = 0; k < additional_reqs.length;k++) {
          curr_req = additional_reqs[k];
          if (curr_req.length*len_factor+curr_length>=MAX_LENGTH) {
                  curr_length = (x_offset+85+3);
                  curr_y_offset = curr_y_offset + 9;
                  doc.setFont(undefined, 'bold').text(String(k+1) + '.', curr_length, curr_y_offset).setFont(undefined, 'normal');
                  doc.text(' "'+curr_req+'"', curr_length+(8), curr_y_offset);
                  curr_length += (curr_req.length+6)*len_factor;

          } else {
                doc.setFont(undefined, 'bold').text(String(k+1) + '.', curr_length, curr_y_offset).setFont(undefined, 'normal');
                doc.text(' "'+curr_req+'"', curr_length+(8), curr_y_offset);
                curr_length += (curr_req.length+6)*len_factor;
          }
          console.log(curr_length);
          console.log(curr_y_offset);
    }
      }
    }
}


 // document
  //.getElementById('btn-modal')
  //.addEventListener('click', () => {
  //  $('#modal_box_app_summary').modal('open');
   // renderGUIReqSummaryModal2();
    //updateModalGUINodes();
// });

  document
  .getElementById('btn-req-continue')
  .addEventListener('click', () => {
    if (currentGUIReqSummary.value) {
      //var guiNode = guiNodes.find((n) => n.id == 'gui_'+currentGUIReqSummary.value['selected_gui_id']);
      console.log(currentGUIReqSummary.value['selected_gui_id']);
      console.log(guiNodes);
      $('#modal_box').modal('close');
      send(`/gui_selected_confirm`);
      showBotTyping();
      addGUIToEditor(currentGUIReqSummary.value['selected_gui_id'], 0, 0, isEditModeOn.value);
      //enableGUISelectionButtons();
    }
  });

    document
  .getElementById('btn-req-continue-2')
  .addEventListener('click', () => {
      $('#modal_box_app_summary').modal('close');
  });

    document
  .getElementById('btn-req-continue-3')
  .addEventListener('click', () => {
      $('#modal_box_gui_summary').modal('close');
  });

    document
  .getElementById('btn-view-summary')
  .addEventListener('click', () => {
    console.log('clicked')
      if (currentShownGUINode.value) {
            renderGUIReqSummaryModal2(currentShownGUINode.value.summary);
      }
  });


 // document
  //.getElementById('btn-req-cancel')
  //.addEventListener('click', () => {
  //  console.log('cancel');
  //  $('#modal_box').modal('close');
  //  send(`/gui_selected_cancel`);
  //  showBotTyping();
    //enableGUISelectionButtons();
  //});


  //document
  //.getElementById('mark-ui-element-button')
  //.addEventListener('click', () => {
   // console.log(`currentshape: ${JSON.stringify(currentShape)}`);
  // markUIComponent(currentShape);
  //});

    document
  .getElementById('delete-button')
  .addEventListener('click', () => {
    var guiId = currentShape.getParent().getAttr('id');
    console.log(`gui id : ${guiId}`);
    var guiNode = guiNodes.find((n) => guiId.includes(n.id));
    //removeAllTransitionsForGUINode(guiNode);
    deleteGuiNode(currentShape);
    layerPlay.batchDraw();
  });
},{"../rasa/components/chat":66,"../rasa/components/guiRankingData":69,"./fetchData":75,"./konvaWireframing":77,"./vars":79,"jspdf":5,"konva":45}],79:[function(require,module,exports){
const Konva = require('konva');
var isEditModeOn = { value: true };
var showGUIReqSummary = { value: true };
var showUICinPreview = { value: false };
var width = 1870;
var height = 2000;

var currentSelectedComp = { value: null };

var gfb_top_k_gui_indexes = {value: null};

var top_k_annotation_gui_indexes = {value: null};

var top_k_annotation_feature_indexes = {value: null};

var graph = null;
var guiNodes = [];
var transitions = [];

var blockSnapSize = 30;
var shadowOffset = 10;
var tween = null;
var scalePlayer = {value: null};
const baseURL = "http://www.sergui-tool.com/static/resources"

const CHAT_MSG_DELAY_MAX = 6000
const CHAT_MSG_DELAY_MIN = 2000

const MAX_PLAYER_SCALE = 0.92;

var userSetStartNodeId = {};

var currentShownGUINode = {value : null};

component_color_mapping = {
  'Background Image': 'red',
  Image: 'pink',
  Input: 'yellow',
  'Text Button': 'blue',
  Button: 'blue',
  Text: 'green',
};

var stagePlay = new Konva.Stage({
    container: 'container-konva-player',
  });

 var stageAspects = new Konva.Stage({
        container: "aspect-gui-container-rendering",
      });
 var layerAspects = new Konva.Layer();
stageAspects.add(layerAspects);

var layerPlay = new Konva.Layer();

console.log('layerplay vars')
console.log(layerPlay);

stagePlay.add(layerPlay);

guiStack = {value: []};

currentGUIReqSummary = {value: null};

    var arrowImg = new Image();
    arrowImg.onload = function () {
      console.log('arrow loaded');
    }
    arrowImg.src = `http://sergui-tool.com/static/resources/arrow_image/arrow.jpeg`;

importHelper = {
  guisInitialized: [],
  guisLoaded: [],
};

module.exports['vars'] = {
  isEditModeOn,
  showUICinPreview,
  width,
  height,
  currentSelectedComp,
  graph,
  guiNodes,
  transitions,
  blockSnapSize,
  shadowOffset,
  tween,
  userSetStartNodeId,
  component_color_mapping,
  guiStack,
  importHelper,
  currentShownGUINode,
  CHAT_MSG_DELAY_MAX,
  CHAT_MSG_DELAY_MIN,
  stagePlay,
  layerPlay,
  MAX_PLAYER_SCALE,
  scalePlayer,
  currentGUIReqSummary,
  showGUIReqSummary,
  stageAspects,
  layerAspects,
  arrowImg,
  gfb_top_k_gui_indexes,
  baseURL,
  top_k_annotation_gui_indexes,
  top_k_annotation_feature_indexes
};

},{"konva":45}]},{},[78]);
